<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Siri咔咔</title>
  
  <subtitle>学而时习之</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wfwblog.cn/"/>
  <updated>2018-04-09T07:18:27.264Z</updated>
  <id>http://wfwblog.cn/</id>
  
  <author>
    <name>siri-kk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot系列（七）——集成Elasticsearch</title>
    <link href="http://wfwblog.cn/2018/04/04/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94%E9%9B%86%E6%88%90Elasticsearch/"/>
    <id>http://wfwblog.cn/2018/04/04/SpringBoot系列（七）——集成Elasticsearch/</id>
    <published>2018-04-04T02:32:14.000Z</published>
    <updated>2018-04-09T07:18:27.264Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>本文介绍SpringBoot如何集成es以及es的基本操作。</p></blockquote></blockquote><a id="more"></a><h2 id="创建客户端帮助类"><a href="#创建客户端帮助类" class="headerlink" title="创建客户端帮助类"></a>创建客户端帮助类</h2><p>使用的es版本为v6.1.1</p><h3 id="引入jar包"><a href="#引入jar包" class="headerlink" title="引入jar包"></a>引入jar包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;transport&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="创建工具类"><a href="#创建工具类" class="headerlink" title="创建工具类"></a>创建工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ESClientHelper &#123;</span><br><span class="line">    private static Environment env;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public void setEnv(Environment env) &#123;</span><br><span class="line">        ESClientHelper.env = env;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static boolean isInit = false;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 集群对应的客户端，key为clusterName</span><br><span class="line">     */</span><br><span class="line">    private static Map&lt;String, Client&gt; clientMap = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化默认的client</span><br><span class="line">     */</span><br><span class="line">    private static void init() &#123;</span><br><span class="line">        System.setProperty(&quot;es.set.netty.runtime.available.processors&quot;, &quot;false&quot;);</span><br><span class="line"></span><br><span class="line">        //集群1名称及es地址</span><br><span class="line">        String clusterName1 = ESClientHelper.env.getProperty(&quot;elasticsearch.cluster-name1&quot;);</span><br><span class="line">        String cluster1nodes = ESClientHelper.env.getProperty(&quot;elasticsearch.cluster1-nodes&quot;);</span><br><span class="line">        addClient(clusterName1, cluster1nodes);</span><br><span class="line"></span><br><span class="line">        //集群2名称及es地址</span><br><span class="line">        String clusterName2 = ESClientHelper.env.getProperty(&quot;elasticsearch.cluster-name2&quot;);</span><br><span class="line">        String cluster2nodes = ESClientHelper.env.getProperty(&quot;elasticsearch.cluster2-nodes&quot;);</span><br><span class="line">        addClient(clusterName2, cluster2nodes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得所有的地址端口</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static List&lt;TransportAddress&gt; getAllAddress(Map&lt;String, Integer&gt; ips) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            List&lt;TransportAddress&gt; addressList = new ArrayList&lt;&gt;();</span><br><span class="line">            for (String ip : ips.keySet()) &#123;</span><br><span class="line">                TransportAddress address = new TransportAddress(InetAddress.getByName(ip), ips.get(ip));</span><br><span class="line">                addressList.add(address);</span><br><span class="line">            &#125;</span><br><span class="line">            return addressList;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            System.err.println(&quot;Initial ESClient creation failed.&quot; + ex);</span><br><span class="line">            throw new ExceptionInInitializerError(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取指定集群的es客户端</span><br><span class="line">     *</span><br><span class="line">     * @param clusterName</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Client getClient(String clusterName) &#123;</span><br><span class="line">        if (!isInit) &#123;</span><br><span class="line">            init();</span><br><span class="line">            isInit = true;</span><br><span class="line">        &#125;</span><br><span class="line">        return clientMap.get(clusterName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 为其他集群添加客户端</span><br><span class="line">     *</span><br><span class="line">     * @param setting 配置信息</span><br><span class="line">     * @param ips     node-port列表，例如：127.0.0.1-9300</span><br><span class="line">     */</span><br><span class="line">    private static void addClient(Settings setting, Map&lt;String, Integer&gt; ips) &#123;</span><br><span class="line">        List&lt;TransportAddress&gt; transportAddress = getAllAddress(ips);</span><br><span class="line"></span><br><span class="line">        Client client = new PreBuiltTransportClient(setting)</span><br><span class="line">                .addTransportAddresses(transportAddress.toArray(new TransportAddress[transportAddress.size()]));</span><br><span class="line">        clientMap.put(setting.get(&quot;cluster.name&quot;), client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 为其他集群添加客户端</span><br><span class="line">     *</span><br><span class="line">     * @param clusterName   集群名</span><br><span class="line">     * @param strConnection 集群地址</span><br><span class="line">     */</span><br><span class="line">    public static void addClient(String clusterName, String strConnection) &#123;</span><br><span class="line">        String[] nodeConnections = strConnection.split(&quot;;|,&quot;);</span><br><span class="line">        Map&lt;String, Integer&gt; ips = new HashMap&lt;&gt;();</span><br><span class="line">        for (String nodeConnection : nodeConnections) &#123;</span><br><span class="line">            Pattern pattern = Pattern.compile(&quot;(http://)*([.\\d]+):(\\d&#123;1,6&#125;)&quot;);</span><br><span class="line">            Matcher matcher = pattern.matcher(nodeConnection);</span><br><span class="line">            if (matcher.find()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    String hostname = matcher.group(2);</span><br><span class="line">                    int port = Integer.parseInt(matcher.group(3));</span><br><span class="line">                    ips.put(hostname, port);</span><br><span class="line">                &#125; catch (NumberFormatException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Settings setting = Settings.builder()</span><br><span class="line">                .put(&quot;cluster.name&quot;, clusterName)</span><br><span class="line">                .put(&quot;client.transport.ignore_cluster_name&quot;, false)</span><br><span class="line">                .put(&quot;client.transport.sniff&quot;, true).build();</span><br><span class="line">        addClient(setting, ips);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断索引是否存在</span><br><span class="line">     *</span><br><span class="line">     * @param client</span><br><span class="line">     * @param index</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean indexExists(Client client, String index) &#123;</span><br><span class="line">        IndicesExistsRequest request = new IndicesExistsRequest(index);</span><br><span class="line">        IndicesExistsResponse response = client.admin().indices().exists(request).actionGet();</span><br><span class="line">        if (response.isExists()) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class ESClientHelperTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Environment env;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testCreateIndex()&#123;</span><br><span class="line">        Client client = ESClientHelper.getClient(env.getProperty(&quot;elasticsearch.cluster-name2&quot;));</span><br><span class="line">        System.out.println(ESClientHelper.indexExists(client, &quot;index&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>java中创建es索引需要首先生成type对应的source。es的java api没有提供像C#中NEST那样的特性（即注解），因此我们参照NEST首先写一个基于反射实现的工具类。</p><h3 id="定义注解-ElasticProperty"><a href="#定义注解-ElasticProperty" class="headerlink" title="定义注解@ElasticProperty"></a>定义注解<code>@ElasticProperty</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.FIELD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface ElasticProperty &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 是否分词，默认不分词</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    FieldIndexOption fieldIndex() default FieldIndexOption.NOTANALYZED;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 该字段分词时使用的分词器，默认使用ik_max_word</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    String analyzer() default &quot;ik_max_word&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 当字段为null时的默认值，默认为“-”</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    String nullValue() default &quot;-&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 日期格式</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    String dateFormat() default &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * fields</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    String fields() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否为nested字段</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    NestOpinion isNested() default NestOpinion.NOTNESTED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public enum FieldIndexOption &#123;</span><br><span class="line">    ANALYZED,</span><br><span class="line">    NOTANALYZED</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public enum NestOpinion &#123;</span><br><span class="line">    NESTED,</span><br><span class="line">    NOTNESTED</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-ElasticProperty定义type模型"><a href="#使用-ElasticProperty定义type模型" class="headerlink" title="使用@ElasticProperty定义type模型"></a>使用<code>@ElasticProperty</code>定义type模型</h3><p>类<code>Department</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public class Department &#123;</span><br><span class="line">    private Long id;</span><br><span class="line">    private String departmentName;</span><br><span class="line">    @ElasticProperty(isNested = NestOpinion.NESTED)</span><br><span class="line">    private List&lt;Employee&gt; employees;</span><br><span class="line">    private List&lt;Business&gt; businessList;</span><br><span class="line"></span><br><span class="line">    public Long getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Long id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDepartmentName() &#123;</span><br><span class="line">        return departmentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDepartmentName(String departmentName) &#123;</span><br><span class="line">        this.departmentName = departmentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Employee&gt; getEmployees() &#123;</span><br><span class="line">        return employees;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmployees(List&lt;Employee&gt; employees) &#123;</span><br><span class="line">        this.employees = employees;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Business&gt; getBusinessList() &#123;</span><br><span class="line">        return businessList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBusinessList(List&lt;Business&gt; businessList) &#123;</span><br><span class="line">        this.businessList = businessList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>类<code>Employee</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class Employee &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    @ElasticProperty(fieldIndex = FieldIndexOption.ANALYZED, fields = &quot;&#123;\&quot;raw\&quot;: &#123;\&quot;type\&quot;: \&quot;keyword\&quot;&#125;&#125;&quot;)</span><br><span class="line">    private String profile;</span><br><span class="line">    @ElasticProperty(dateFormat = &quot;yyyy-MM-dd&quot;)</span><br><span class="line">    private Date birth;</span><br><span class="line">    private List&lt;String&gt; articles;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getProfile() &#123;</span><br><span class="line">        return profile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProfile(String profile) &#123;</span><br><span class="line">        this.profile = profile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getBirth() &#123;</span><br><span class="line">        return birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBirth(Date birth) &#123;</span><br><span class="line">        this.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;String&gt; getArticles() &#123;</span><br><span class="line">        return articles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setArticles(List&lt;String&gt; articles) &#123;</span><br><span class="line">        this.articles = articles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>类<code>Business</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Business &#123;</span><br><span class="line">    private String core;</span><br><span class="line">    private Float revenue;</span><br><span class="line"></span><br><span class="line">    public String getCore() &#123;</span><br><span class="line">        return core;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCore(String core) &#123;</span><br><span class="line">        this.core = core;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Float getRevenue() &#123;</span><br><span class="line">        return revenue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRevenue(Float revenue) &#123;</span><br><span class="line">        this.revenue = revenue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实现工具类"><a href="#实现工具类" class="headerlink" title="实现工具类"></a>实现工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">public class ElasticsearchMappingGenerator &#123;</span><br><span class="line">    private final static String mappingPattern = &quot;\&quot;$type\&quot;: &#123;\&quot;properties\&quot;: &#123;$properties&#125;&#125;&quot;;</span><br><span class="line">    private final static String nestedMappingPattern = &quot;\&quot;$type\&quot;: &#123;\&quot;type\&quot;: \&quot;nested\&quot;, \&quot;properties\&quot;: &#123;$properties&#125;&#125;&quot;;</span><br><span class="line">    private final static String propertyPattern = &quot;\&quot;$fieldName\&quot;: &#123;$parameters&#125;&quot;;</span><br><span class="line">    private final static String parameterPattern = &quot;\&quot;$parameterName\&quot;: \&quot;$parameterValue\&quot;&quot;;</span><br><span class="line">    private final static String fieldsPattern = &quot;\&quot;fields\&quot;: $fieldsValue&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成type对应的source</span><br><span class="line">     * @param clazz：定义的类模型</span><br><span class="line">     * @param fieldName：为null时，则只有properties，即为source；不为null时，表示要生成模型中某个字段的source</span><br><span class="line">     * @param isNested：fieldName不为null时有意义，true表示该字段为nested</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String generateSource(Class&lt;?&gt; clazz, String fieldName, boolean isNested)&#123;</span><br><span class="line">        String result;</span><br><span class="line">        StringBuilder properties = new StringBuilder();</span><br><span class="line"></span><br><span class="line">        if (fieldName == null) &#123;</span><br><span class="line">            //主resource只有properties</span><br><span class="line">            result = mappingPattern.replace(&quot;\&quot;$type\&quot;: &quot;, &quot;&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //字段对应的resource</span><br><span class="line">            if (isNested)&#123;</span><br><span class="line">                //nested字段</span><br><span class="line">                result = nestedMappingPattern.replace(&quot;$type&quot;, fieldName);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                result = mappingPattern.replace(&quot;$type&quot;, fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        boolean isFirst = true;</span><br><span class="line">        for (Field field : fields) &#123;</span><br><span class="line">            if (isFirst) &#123;</span><br><span class="line">                properties.append(generateProperty(field));</span><br><span class="line">                isFirst = false;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                properties.append(&quot;, &quot;).append(generateProperty(field));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result.replace(&quot;$properties&quot;, properties.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取字段的mapping</span><br><span class="line">     *</span><br><span class="line">     * @param field</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String generateProperty(Field field) &#123;</span><br><span class="line">        String fieldName = field.getName();</span><br><span class="line">        //获取字段类型</span><br><span class="line">        Class&lt;?&gt; fieldType = field.getType();</span><br><span class="line"></span><br><span class="line">        //获取@ElasticProperty注解</span><br><span class="line">        ElasticProperty elasticProperty = field.getAnnotation(ElasticProperty.class);</span><br><span class="line">        String type;</span><br><span class="line"></span><br><span class="line">        //field为列表类型</span><br><span class="line">        if (fieldType.equals(List.class)) &#123;</span><br><span class="line">            //Array dataType</span><br><span class="line">            Type genericType = field.getGenericType();</span><br><span class="line">            if (genericType instanceof ParameterizedType)&#123;</span><br><span class="line">                fieldType = (Class)((ParameterizedType)genericType).getActualTypeArguments()[0];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //字段为String类型，需要判断是否分词</span><br><span class="line">        if (fieldType.equals(String.class)) &#123;</span><br><span class="line">            if (elasticProperty != null &amp;&amp; elasticProperty.fieldIndex().equals(FieldIndexOption.ANALYZED)) &#123;</span><br><span class="line">                type = &quot;text&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                type = &quot;keyword&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (fieldType.equals(Integer.class)) &#123;</span><br><span class="line">            type = &quot;integer&quot;;</span><br><span class="line">        &#125; else if (fieldType.equals(Long.class)) &#123;</span><br><span class="line">            type = &quot;long&quot;;</span><br><span class="line">        &#125; else if (fieldType.equals(Double.class)) &#123;</span><br><span class="line">            type = &quot;double&quot;;</span><br><span class="line">        &#125; else if (fieldType.equals(Float.class)) &#123;</span><br><span class="line">            type = &quot;float&quot;;</span><br><span class="line">        &#125; else if (fieldType.equals(Boolean.class)) &#123;</span><br><span class="line">            type = &quot;boolean&quot;;</span><br><span class="line">        &#125; else if (fieldType.equals(Byte.class)) &#123;</span><br><span class="line">            type = &quot;binary&quot;;</span><br><span class="line">        &#125; else if (fieldType.equals(Date.class)) &#123;</span><br><span class="line">            type = &quot;date&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //如果是Nested dataType类型则需要重新赋值</span><br><span class="line">            if (elasticProperty!=null &amp;&amp; elasticProperty.isNested().equals(NestOpinion.NESTED)) &#123;</span><br><span class="line">                //注意此时isNested参数为true</span><br><span class="line">                return generateSource(fieldType, fieldName, true);</span><br><span class="line">            &#125;</span><br><span class="line">            //Object dataType：自定义类型字段，使用递归获取该field的source</span><br><span class="line">            return generateSource(fieldType, fieldName, false);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //单个字段上定义的参数信息</span><br><span class="line">        StringBuilder parameters = new StringBuilder();</span><br><span class="line">        parameters.append(parameterPattern.replace(&quot;$parameterName&quot;, &quot;type&quot;).replace(&quot;$parameterValue&quot;, type));</span><br><span class="line">        if (elasticProperty != null) &#123;</span><br><span class="line">            if (type.equals(&quot;fulltext&quot;)) &#123;</span><br><span class="line">                String analyzer = elasticProperty.analyzer();</span><br><span class="line">                parameters.append(&quot;, &quot;)</span><br><span class="line">                        .append(parameterPattern.replace(&quot;$parameterName&quot;, &quot;analyzer&quot;).replace(&quot;$parameterValue&quot;, analyzer));</span><br><span class="line">            &#125;</span><br><span class="line">            if (type.equals(&quot;keyword&quot;) || type.equals(&quot;date&quot;)) &#123;</span><br><span class="line">                String nullValue = elasticProperty.nullValue();</span><br><span class="line">                parameters.append(&quot;, &quot;)</span><br><span class="line">                        .append(parameterPattern.replace(&quot;$parameterName&quot;, &quot;null_value&quot;).replace(&quot;$parameterValue&quot;, nullValue));</span><br><span class="line">            &#125;</span><br><span class="line">            if (type.equals(&quot;date&quot;)) &#123;</span><br><span class="line">                String dateFormat = elasticProperty.dateFormat();</span><br><span class="line">                parameters.append(&quot;, &quot;)</span><br><span class="line">                        .append(parameterPattern.replace(&quot;$parameterName&quot;, &quot;format&quot;).replace(&quot;$parameterValue&quot;, dateFormat));</span><br><span class="line">            &#125;</span><br><span class="line">            if (!StringUtils.isEmpty(elasticProperty.fields())) &#123;</span><br><span class="line">                parameters.append(&quot;, &quot;)</span><br><span class="line">                        .append(fieldsPattern.replace(&quot;$fieldsValue&quot;, elasticProperty.fields()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String result = propertyPattern.replace(&quot;$fieldName&quot;, fieldName).replace(&quot;$parameters&quot;, parameters.toString());</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ESClientHelper中实现创建index的方法"><a href="#ESClientHelper中实现创建index的方法" class="headerlink" title="ESClientHelper中实现创建index的方法"></a><code>ESClientHelper</code>中实现创建index的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static boolean createIndex(Client client, String index, Settings.Builder settings, String type, String mapping)&#123;</span><br><span class="line">        if (client==null || StringUtils.isEmpty(index) || StringUtils.isEmpty(mapping) || indexExists(client, index))&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (settings == null)&#123;</span><br><span class="line">            settings = Settings.builder()</span><br><span class="line">                    .put(&quot;index.number_of_shards&quot;, 5)</span><br><span class="line">                    .put(&quot;index.number_of_replicas&quot;, 2);</span><br><span class="line">        &#125;</span><br><span class="line">        CreateIndexResponse createIndexResponse = client.admin().indices()</span><br><span class="line">                .prepareCreate(index)</span><br><span class="line">                .setSettings(settings)</span><br><span class="line">                .get();</span><br><span class="line">        if (!createIndexResponse.isAcknowledged())&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        PutMappingResponse putMappingResponse = client.admin().indices().preparePutMapping(index).setType(type).setSource(mapping, XContentType.JSON).get();</span><br><span class="line">        return putMappingResponse.isAcknowledged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class ESClientHelperTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Environment env;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testCreateIndex()&#123;</span><br><span class="line">        Client client = ESClientHelper.getClient(env.getProperty(&quot;elasticsearch.cluster-name2&quot;));</span><br><span class="line">        String index = env.getProperty(&quot;elasticsearch.index-name&quot;);</span><br><span class="line">        String mapping = ElasticsearchMappingGenerator.generateSource(Department.class, null, false);</span><br><span class="line">        if (ESClientHelper.createIndex(client, index, null, &quot;department&quot;, mapping))&#123;</span><br><span class="line">            System.out.println(&quot;success creating index&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;fail to create index&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/6.1/transport-client.html" target="_blank" rel="noopener">TransportClient</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/6.1/java-admin-indices.html#java-admin-indices-create-index-settings" target="_blank" rel="noopener">Indices Administration</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文介绍SpringBoot如何集成es以及es的基本操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://wfwblog.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringBoot" scheme="http://wfwblog.cn/tags/SpringBoot/"/>
    
      <category term="elasticsearch" scheme="http://wfwblog.cn/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot系列（六）——集成redis</title>
    <link href="http://wfwblog.cn/2018/04/03/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E9%9B%86%E6%88%90redis/"/>
    <id>http://wfwblog.cn/2018/04/03/SpringBoot系列（六）——集成redis/</id>
    <published>2018-04-03T07:05:13.000Z</published>
    <updated>2018-04-04T02:29:32.225Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>redis经常用于缓存用户登录信息，本文介绍SpringBoot如何集成单节点的redis及redis集群。</p></blockquote></blockquote><h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><p><code>pom.xml</code>文件中增加启动依赖项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3 id="redis在application-properties中配置说明"><a href="#redis在application-properties中配置说明" class="headerlink" title="redis在application.properties中配置说明"></a>redis在application.properties中配置说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># （普通集群，不使用则不用开启）在群集中执行命令时要遵循的最大重定向数目。</span><br><span class="line"># spring.redis.cluster.max-redirects=</span><br><span class="line"># （普通集群，不使用则不用开启）以逗号分隔的“主机：端口”对列表进行引导。</span><br><span class="line"># spring.redis.cluster.nodes=</span><br><span class="line"># 连接工厂使用的数据库索引。</span><br><span class="line">spring.redis.database=0</span><br><span class="line"># 连接URL，将覆盖主机，端口和密码（用户将被忽略），例如：redis://user:password@example.com:6379</span><br><span class="line">spring.redis.url=</span><br><span class="line"># Redis服务器主机。</span><br><span class="line">spring.redis.host=localhost</span><br><span class="line"># 登录redis服务器的密码。</span><br><span class="line">spring.redis.password=</span><br><span class="line"># 启用SSL支持。</span><br><span class="line">spring.redis.ssl=false</span><br><span class="line"># 池在给定时间可以分配的最大连接数。使用负值无限制。</span><br><span class="line">spring.redis.pool.max-active=8</span><br><span class="line"># 池中“空闲”连接的最大数量。使用负值表示无限数量的空闲连接。</span><br><span class="line">spring.redis.pool.max-idle=8</span><br><span class="line"># 连接分配在池被耗尽时抛出异常之前应该阻塞的最长时间量（以毫秒为单位）。使用负值可以无限期地阻止。</span><br><span class="line">spring.redis.pool.max-wait=-1</span><br><span class="line"># 目标为保持在池中的最小空闲连接数。这个设置只有在正面的情况下才有效果。</span><br><span class="line">spring.redis.pool.min-idle=0</span><br><span class="line"># Redis服务器端口。</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"># （哨兵模式，不使用则不用开启）Redis服务器的名称。</span><br><span class="line"># spring.redis.sentinel.master=</span><br><span class="line"># （哨兵模式，不使用则不用开启）主机：端口对的逗号分隔列表。 </span><br><span class="line"># spring.redis.sentinel.nodes=</span><br><span class="line"># 以毫秒为单位的连接超时。</span><br><span class="line">spring.redis.timeout=0</span><br></pre></td></tr></table></figure><h3 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h3><p>在application.properties中增加redis相关配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># redis单点配置</span><br><span class="line">#spring.redis.host=10.202.xx.xx</span><br><span class="line">#spring.redis.port=30301</span><br><span class="line">#spring.redis.database=10</span><br><span class="line">#spring.redis.password=password</span><br><span class="line">#spring.redis.timeout=28800</span><br><span class="line"></span><br><span class="line"># redis集群配置</span><br><span class="line">spring.redis.cluster.nodes=10.203.xx.1:7000,10.203.xx.1:7001,10.203.xx.1:7002,10.203.xx.1:7003,10.203.xx.1:7004,10.203.xx.1:7005</span><br><span class="line">spring.redis.password=password</span><br><span class="line">spring.redis.timeout=28800</span><br></pre></td></tr></table></figure></p><h3 id="实现工具类"><a href="#实现工具类" class="headerlink" title="实现工具类"></a>实现工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class RedisUtil &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Environment env;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; T get(String key, Class&lt;T&gt; clz) &#123;</span><br><span class="line">        String value = redisTemplate.opsForValue().get(key);</span><br><span class="line">        if (value == null)</span><br><span class="line">            return null;</span><br><span class="line">        return JSONObject.parseObject(value, clz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String get(String key)&#123;</span><br><span class="line">        return redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void set(String key, Object value, long timeout) &#123;</span><br><span class="line">        String json = JSONObject.toJSONString(value);</span><br><span class="line">        redisTemplate.opsForValue().set(key, json, timeout, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void set(String key, Object value)&#123;</span><br><span class="line">        int timeout = env.getProperty(&quot;spring.redis.timeout&quot;, Integer.class);</span><br><span class="line">        String json = JSONObject.toJSONString(value);</span><br><span class="line">        redisTemplate.opsForValue().set(key, json, timeout, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void delete(String key) &#123;</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class RedisUtilTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testRedisUtil()&#123;</span><br><span class="line">        //设置redis</span><br><span class="line">        String key = UUID.randomUUID().toString();</span><br><span class="line">        redisUtil.set(key, &quot;this is a redis test without timeout&quot;);</span><br><span class="line">        //取值</span><br><span class="line">        String value = redisUtil.get(key);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        //删除key</span><br><span class="line">        redisUtil.delete(key);</span><br><span class="line">        value = redisUtil.get(key);</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        key = UUID.randomUUID().toString();</span><br><span class="line">        UserDTO userDTO = new UserDTO();</span><br><span class="line">        userDTO.setUserName(&quot;wfw&quot;);</span><br><span class="line">        userDTO.setDepartment(&quot;tech&quot;);</span><br><span class="line">        redisUtil.set(key, userDTO, 1);</span><br><span class="line">        UserDTO userValue = redisUtil.get(key, UserDTO.class);</span><br><span class="line">        System.out.println(userValue.getUserName() + &quot;: &quot; + userValue.getDepartment());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="http://blog.720ui.com/2016/springboot_02_data_redis/" target="_blank" rel="noopener">Springboot揭秘与实战——redis</a></li><li><a href="https://www.cnblogs.com/keithtt/p/6719532.html" target="_blank" rel="noopener">Centos7搭建redis集群及安装sentinel</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;redis经常用于缓存用户登录信息，本文介绍SpringBoot如何集成单节点的redis及redis集群。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;环境依赖&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="微服务" scheme="http://wfwblog.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringBoot" scheme="http://wfwblog.cn/tags/SpringBoot/"/>
    
      <category term="redis" scheme="http://wfwblog.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot系列（五）——全局异常处理</title>
    <link href="http://wfwblog.cn/2018/04/03/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://wfwblog.cn/2018/04/03/SpringBoot系列（五）——全局异常处理/</id>
    <published>2018-04-03T03:05:59.000Z</published>
    <updated>2018-04-03T03:20:19.498Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>对于代码中未捕获的异常，需要有一个全局异常处理器。</p></blockquote></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestControllerAdvice</span><br><span class="line">public class GlobalExceptionHandler &#123;</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    @ExceptionHandler(&#123;Exception.class&#125;)</span><br><span class="line">    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    public BaseResponseVO unknownException(Exception e) &#123;</span><br><span class="line">        this.logger.error(String.format(&quot;Global catch unknown exception , message: %s&quot;, e.getMessage()), e);</span><br><span class="line">        BaseResponseVO result = new BaseResponseVO();</span><br><span class="line">        result.setMessage(&quot;服务器错误&quot;);</span><br><span class="line">        result.setResult(false);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将异常记录到日志中</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(path = &quot;testGlobalExceptionHandler&quot;, method = RequestMethod.GET)</span><br><span class="line">@ApiOperation(value = &quot;测试全局异常处理&quot;)</span><br><span class="line">public BaseResponseVO testGlobalExceptionHandler() throws Exception&#123;</span><br><span class="line">    throw new Exception(&quot;this is a global exception handler test&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于代码中未捕获的异常，需要有一个全局异常处理器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实
      
    
    </summary>
    
      <category term="微服务" scheme="http://wfwblog.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringBoot" scheme="http://wfwblog.cn/tags/SpringBoot/"/>
    
      <category term="微服务" scheme="http://wfwblog.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java构造函数初始化</title>
    <link href="http://wfwblog.cn/2018/04/01/Java%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://wfwblog.cn/2018/04/01/Java构造函数初始化/</id>
    <published>2018-04-01T03:17:07.000Z</published>
    <updated>2018-04-01T03:36:14.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>通过代码看一下java中父子类直接构造函数的初始化顺序。</p></blockquote></blockquote><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>如果类没有提供构造函数，则会生成默认的无参构造函数</li><li>父类的构造函数必须被子类构造函数隐式调用或显示调用</li><li>如果父类提供了无参构造函数，则子类可以选择隐式调用父类的构造函数（即调用父类的无参构造函数），或者显示调用父类构造函数（可以显示调用父类的无参构造函数，也可以显示调用父类的有参构造函数）</li><li>如果父类只提供了有参构造函数，则子类必须显示调用父类的有参构造函数</li></ul><h3 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h3><ul><li>父类静态变量 -&gt; 父类静态代码块 -&gt; 子类静态变量 -&gt; 子类静态代码块<br>因为静态代码块中只能访问静态变量，因此静态变量要在静态代码块之前初始化</li><li>父类非静态变量 -&gt; 父类非静态代码块 -&gt; 父类构造函数</li><li>子类非静态代码块 -&gt; 子类非静态变量 -&gt; 子类构造函数</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>定义父类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class ClassA &#123;</span><br><span class="line">    private final static String parentStaticVariable = &quot;parentStaticVariableValue&quot;;</span><br><span class="line">    private String parentVariable = &quot;parentVariableValue&quot;;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;parentStaticVariableValue: &quot; + parentStaticVariable);</span><br><span class="line">        System.out.println(&quot;ClassA static code block&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;parentVariable: &quot; + parentVariable);</span><br><span class="line">        System.out.println(&quot;ClassA code block&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ClassA()&#123;</span><br><span class="line">        System.out.println(&quot;ClassA&apos;s constructor with no parameters&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ClassA(String para)&#123;</span><br><span class="line">        System.out.println(&quot;ClassA&apos;s constructor with parameters: &quot; + para);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义子类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class ClassB extends ClassA &#123;</span><br><span class="line">    private final static String childStaticVariable = &quot;childStaticVariableValue&quot;;</span><br><span class="line">    private String childVariable = &quot;childVariableValue&quot;;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;childStaticVariable: &quot; + childStaticVariable);</span><br><span class="line">        System.out.println(&quot;ClassB static code block&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;childVariable: &quot; + childVariable);</span><br><span class="line">        System.out.println(&quot;ClassB block code&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ClassB()&#123;</span><br><span class="line">        System.out.println(&quot;ClassB&apos;s constructor with no parameters&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ClassB(String para)&#123;</span><br><span class="line">        super(para);</span><br><span class="line">        System.out.println(&quot;ClassB&apos;s constructor with parameters: &quot; + para);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void testConstructor()&#123;</span><br><span class="line">    ClassB classB = new ClassB();</span><br><span class="line">    System.out.println(&quot;---------------------------------------------------&quot;);</span><br><span class="line">    classB = new ClassB(&quot;ClassB构造参数&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://blog.csdn.net/wyongan1128/article/details/52604776" target="_blank" rel="noopener">Java构造函数之调用父类构造函数</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;通过代码看一下java中父子类直接构造函数的初始化顺序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="java基础" scheme="http://wfwblog.cn/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="构造函数" scheme="http://wfwblog.cn/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>理解Spring中的beanFactory</title>
    <link href="http://wfwblog.cn/2018/03/26/%E7%90%86%E8%A7%A3Spring%E4%B8%AD%E7%9A%84beanFactory/"/>
    <id>http://wfwblog.cn/2018/03/26/理解Spring中的beanFactory/</id>
    <published>2018-03-26T06:44:50.000Z</published>
    <updated>2018-03-30T03:35:53.020Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>IOC（Inversion of Control）即“控制反转”，是一种思想，将创建对象的权利交给框架（或容器）。而DI（Dependency Injection）即依赖注入是其实现的一种方式，还包括DL（Dependency Lookup）即依赖查找。</p></blockquote></blockquote><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>Interface Driven Design即接口驱动可以提供灵活的子类实现，但接口一定要实现。<br>假设定义了接口<code>AInterface</code>，其实现为<code>AInterfaceImpl</code>，那么使用时需要实例化：<code>AInterface a = new AInterfaceImpl()</code>，那么这样接口和接口实现直接的依赖和耦合关系就产生了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">classA</span><br><span class="line">&#123;</span><br><span class="line">    AInterface a;</span><br><span class="line">    A()&#123;&#125;</span><br><span class="line">    AMethod()//一个方法</span><br><span class="line">    &#123;</span><br><span class="line">        a = new AInterfaceImp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Class A与AInterfaceImp就是依赖关系，如果想使用AInterface的另外一个实现就需要更改代码了。这时我们可以使用工厂模式根据条件获取AInterface的不同实现:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">InterfaceImplFactory</span><br><span class="line">&#123;</span><br><span class="line">   AInterface create(Object condition)</span><br><span class="line">   &#123;</span><br><span class="line">      if(condition == condA)</span><br><span class="line">      &#123;</span><br><span class="line">          return new AInterfaceImpA();</span><br><span class="line">      &#125;</span><br><span class="line">      else if(condition == condB)</span><br><span class="line">      &#123;</span><br><span class="line">          return new AInterfaceImpB();</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">          return new AInterfaceImp();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是很显然，代码直接的耦合仍然存在，假设新增一种实现，还需要修改工厂。通过IoC模式可以彻底解决这种耦合，它把耦合从代码中移出去，放到统一的XML文件中，通过一个容器在需要的时候把这个依赖关系形成。由IoC容器管理对象的生命周期、依赖关系等。可以通过文本的配置文件进行应用程序组件间相互关系的配置，而不用重新修改并编译具体的代码。Spring就是一个IoC容器。<br>可以把IoC模式看做是工厂模式的升华，把IoC看作是一个大工厂，只不过这个大工厂里要生成的对象都是在XML文件中给出定义的，然后利用Java的“反射”编程，根据XML中给出的类名生成相应的对象。从实现来看，IoC是把以前在工厂方法里写死的对象生成代码，改变为由XML文件来定义，也就是把工厂和对象生成这两者独立分隔开来，目的就是提高灵活性和可维护性。<br><strong>优点</strong>：因为把对象生成放在了XML里定义，所以当我们需要换一个实现子类将会变成很简单（一般这样的对象都是实现于某种接口的），只要修改XML就可以了，这样我们甚至可以实现对象的热插拔<br><strong>缺点</strong>：（1）生成一个对象的步骤变“复杂”了（2）由于使用反射，效率降低（3）缺少IDE重构操作的支持，如果在Eclipse要对类改名，那么你还需要去XML文件里手工去改了。</p><p><strong>我的理解：IoC容器将服务或组件的实现定义到bean中（以xml文件或注解的方式等），然后通过beanFactory实现将其注入容器中，由容器控制对象的生命周期和依赖关系等。</strong></p><h2 id="实现简单基于xml的beanFactory"><a href="#实现简单基于xml的beanFactory" class="headerlink" title="实现简单基于xml的beanFactory"></a>实现简单基于xml的beanFactory</h2><h3 id="定义MyXmlBeanFactory"><a href="#定义MyXmlBeanFactory" class="headerlink" title="定义MyXmlBeanFactory"></a>定义MyXmlBeanFactory</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class MyXmlBeanFactory &#123;</span><br><span class="line">    private Map&lt;String, Object&gt; container = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public MyXmlBeanFactory(String... xmlPaths) throws DocumentException, ClassNotFoundException,</span><br><span class="line">            IllegalAccessException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        for (String xmlPath : xmlPaths) &#123;</span><br><span class="line">            // 读取指定的配置文件</span><br><span class="line">            SAXReader reader = new SAXReader();</span><br><span class="line">            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">            // 从class目录下获取指定的xml文件</span><br><span class="line">            InputStream ins = classLoader.getResourceAsStream(xmlPath);</span><br><span class="line">            Document doc = reader.read(ins);</span><br><span class="line">            Element root = doc.getRootElement();</span><br><span class="line">            Element foo;</span><br><span class="line">            // 遍历bean</span><br><span class="line">            for (Iterator i = root.elementIterator(&quot;bean&quot;); i.hasNext(); ) &#123;</span><br><span class="line">                foo = (Element) i.next();</span><br><span class="line">                // 获取bean的属性id和class</span><br><span class="line">                Attribute id = foo.attribute(&quot;id&quot;);</span><br><span class="line">                Attribute cls = foo.attribute(&quot;class&quot;);</span><br><span class="line">                // 利用Java反射机制，通过class的名称获取Class对象</span><br><span class="line">                Class&lt;?&gt; bean = Class.forName(cls.getText());</span><br><span class="line">                // 创建一个对象</span><br><span class="line">                Object obj = bean.newInstance();</span><br><span class="line">                // 遍历该bean的property属性</span><br><span class="line">                for (Iterator ite = foo.elementIterator(&quot;property&quot;); ite.hasNext(); ) &#123;</span><br><span class="line">                    Element foo2 = (Element) ite.next();</span><br><span class="line">                    // 获取该property的name属性</span><br><span class="line">                    Attribute name = foo2.attribute(&quot;name&quot;);</span><br><span class="line">                    Object value;</span><br><span class="line">                    if (container.containsKey(name.getText())) &#123;</span><br><span class="line">                        value = container.get(name.getText());</span><br><span class="line">                        Field field = bean.getDeclaredField(name.getText());</span><br><span class="line">                        field.setAccessible(true);</span><br><span class="line">                        field.set(obj, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                // 将对象放入beanMap中，其中key为id值，value为对象</span><br><span class="line">                container.put(id.getText(), obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object getBean(String beanName) &#123;</span><br><span class="line">        Object obj = this.container.get(beanName);</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义接口及实现"><a href="#定义接口及实现" class="headerlink" title="定义接口及实现"></a>定义接口及实现</h3><p>定义<code>BInterface</code>接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface BInterface &#123;</span><br><span class="line">    String say();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义<code>BInterface</code>接口的实现<code>BInterfaceImpl</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class BInterfaceImpl implements BInterface &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String say() &#123;</span><br><span class="line">        return &quot;this is a hello from BInterface&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义<code>AInterface</code>接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface AInterface &#123;</span><br><span class="line">    void print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义<code>AInterface</code>接口的实现<code>AInterfaceImpl</code>，其实现依赖于<code>BInterface</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class AInterfaceImpl implements AInterface &#123;</span><br><span class="line">    private BInterface bInterface;</span><br><span class="line"></span><br><span class="line">    public BInterface getbInterface() &#123;</span><br><span class="line">        return bInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //beans.xml使用的是依赖注入，依赖注入必须写setter方法</span><br><span class="line">    public void setbInterface(BInterface bInterface) &#123;</span><br><span class="line">        this.bInterface = bInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void print() &#123;</span><br><span class="line">        System.out.println(&quot;this is an implementation of AInterface, it&apos;s dependency bInterface say: &quot;</span><br><span class="line">        + bInterface.say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="定义xml配置bean"><a href="#定义xml配置bean" class="headerlink" title="定义xml配置bean"></a>定义xml配置bean</h3><p>在<code>resources/study</code>目录下创建<code>beans.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id=&quot;bInterface&quot; class=&quot;com.wfw.study.ioc.xml.BInterfaceImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;aInterface&quot; class=&quot;com.wfw.study.ioc.xml.AInterfaceImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;bInterface&quot; ref=&quot;bInterface&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class MyBeanFactoryTest extends TestCase &#123;</span><br><span class="line">    public void testApplicationContext()&#123;</span><br><span class="line">        //测试ClassPathXmlApplicationContext</span><br><span class="line">        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;study/beans.xml&quot;);</span><br><span class="line">        BInterface bInterface = (BInterface) ac.getBean(&quot;bInterface&quot;);</span><br><span class="line">        System.out.println(bInterface.say());</span><br><span class="line">        ((AInterface) ac.getBean(&quot;aInterface&quot;)).print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void testBeanFactory() throws Exception &#123;</span><br><span class="line">        MyXmlBeanFactory myXmlBeanFactory = new MyXmlBeanFactory(&quot;study/beans.xml&quot;);</span><br><span class="line">        BInterface bInterface = (BInterface) myXmlBeanFactory.getBean(&quot;bInterface&quot;);</span><br><span class="line">        System.out.println(bInterface.say());</span><br><span class="line">        ((AInterface) myXmlBeanFactory.getBean(&quot;aInterface&quot;)).print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的测试使用了<code>ClassPathXmlApplicationContext</code>用来对比，可以看到输出结果一致。</p><h2 id="实现基于注解的beanFactory"><a href="#实现基于注解的beanFactory" class="headerlink" title="实现基于注解的beanFactory"></a>实现基于注解的beanFactory</h2><h3 id="自定义注解-MyComponent"><a href="#自定义注解-MyComponent" class="headerlink" title="自定义注解@MyComponent"></a>自定义注解@MyComponent</h3><p>对应Spring中的@Component<br>该注解用于注解class，被注解的类表明是一个组件。当IoC使用基于注解的配置和classpath扫描时，被@MyComponent注解的类可以被自动检测到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface MyComponent &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 组件名称</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="自定义注解-MyResource"><a href="#自定义注解-MyResource" class="headerlink" title="自定义注解@MyResource"></a>自定义注解@MyResource</h3><p>对应jdk中的@Resource，JDK中的注解可以用于注解Class，Field和Method，此处我们只用于注解Field。<br>当IoC容器实例化组件时，组件中如果有被该注解注释的Field，则IoC容器会将实例化的Field注入到该组件中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.FIELD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface MyResource &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 默认是field名称</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用自定义注解定义组件"><a href="#使用自定义注解定义组件" class="headerlink" title="使用自定义注解定义组件"></a>使用自定义注解定义组件</h3><p>自定义B组件的接口定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface BComponentInterface &#123;</span><br><span class="line">    String say();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>自定义B组件的接口实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@MyComponent</span><br><span class="line">public class BComponentImpl implements BComponentInterface &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String say() &#123;</span><br><span class="line">        return &quot;this is a hello from BComponentInterface&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>自定义组件A<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@MyComponent</span><br><span class="line">public class AComponent &#123;</span><br><span class="line">    @MyResource(name = &quot;bComponentImpl&quot;)</span><br><span class="line">    private BComponentInterface bComponent;</span><br><span class="line"></span><br><span class="line">    public void print()&#123;</span><br><span class="line">        System.out.println(&quot;this is an AComponent, it&apos;s dependency bComponent say: &quot;</span><br><span class="line">                + bComponent.say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实现基于注解的beanFactory-1"><a href="#实现基于注解的beanFactory-1" class="headerlink" title="实现基于注解的beanFactory"></a>实现基于注解的beanFactory</h3><p>思路：指定包的扫描路径，在classPath中扫描.class文件，然后基于@Component注解进行筛选，实例化后放入container，然后注入每个实例化组件中被@MyResource注释的Field。getBean方法从container中取出实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">public class MyAnnotationBeanFactory &#123;</span><br><span class="line">    private Map&lt;String, Object&gt; container = new HashMap&lt;&gt;();</span><br><span class="line">    private String classPath = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    public MyAnnotationBeanFactory(String... basePackages) throws  ClassNotFoundException, InstantiationException,</span><br><span class="line">            IllegalAccessException, FieldInjectionFailedException &#123;</span><br><span class="line">        this.classPath = MyAnnotationBeanFactory.class.getClassLoader().getResource(&quot;&quot;).getPath();</span><br><span class="line">        //因为是在单元测试中测试的，所有路径需要替换一下</span><br><span class="line">        this.classPath = this.classPath.replace(&quot;test-classes&quot;, &quot;classes&quot;);</span><br><span class="line">        String systemName = System.getProperty(&quot;os.name&quot;);</span><br><span class="line">        if (systemName.startsWith(&quot;Win&quot;)) &#123;</span><br><span class="line">            this.classPath = this.classPath.substring(1);</span><br><span class="line">        &#125;</span><br><span class="line">        //扫描所有basePackages下的.class文件到classFiles</span><br><span class="line">        List&lt;File&gt; classFiles = new ArrayList&lt;&gt;();</span><br><span class="line">        for (String basePackage : basePackages) &#123;</span><br><span class="line">            String packagePath = basePackage.replace(&quot;.&quot;, &quot;/&quot;);</span><br><span class="line">            File folder = Paths.get(this.classPath, packagePath).toFile();</span><br><span class="line">            this.scanClass(folder, classFiles);</span><br><span class="line">        &#125;</span><br><span class="line">        this.instantiateComponent(classFiles);</span><br><span class="line">        this.injectField();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object getBean(String beanName)&#123;</span><br><span class="line">        Object obj = this.container.get(beanName);</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取文件夹下所有的.class文件</span><br><span class="line">     *</span><br><span class="line">     * @param folder</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private void scanClass(File folder, List&lt;File&gt; list) &#123;</span><br><span class="line">        for (File f : folder.listFiles()) &#123;</span><br><span class="line">            if (f.isFile() &amp;&amp; f.getName().endsWith(&quot;.class&quot;)) &#123;</span><br><span class="line">                list.add(f);</span><br><span class="line">            &#125; else if (!f.isFile()) &#123;</span><br><span class="line">                scanClass(f, list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 实例化被@Component注解的组件</span><br><span class="line">     *</span><br><span class="line">     * @param classFiles</span><br><span class="line">     */</span><br><span class="line">    private void instantiateComponent(List&lt;File&gt; classFiles) throws ClassNotFoundException, InstantiationException,</span><br><span class="line">            IllegalAccessException &#123;</span><br><span class="line">        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        for (File classFile : classFiles) &#123;</span><br><span class="line">            //获取类名并实例化</span><br><span class="line">            String className = classFile.getAbsolutePath().substring(0, classFile.getAbsolutePath().length() - 6)</span><br><span class="line">                    .replace(&quot;\\&quot;, &quot;/&quot;)</span><br><span class="line">                    .replace(this.classPath, &quot;&quot;).replace(&quot;/&quot;, &quot;.&quot;);</span><br><span class="line">            Class&lt;?&gt; clazz = classLoader.loadClass(className);</span><br><span class="line">            //如果该类被@MyComponent注解，则实例化并保存到container</span><br><span class="line">            if (clazz.isAnnotationPresent(MyComponent.class)) &#123;</span><br><span class="line">                //获取@MyComponent注解及其value</span><br><span class="line">                MyComponent myComponent = clazz.getAnnotation(MyComponent.class);</span><br><span class="line">                String componentName = myComponent.value();</span><br><span class="line">                if (componentName.equals(&quot;&quot;)) &#123;</span><br><span class="line">                    //@MyComponent的value为空时，使用类名作为id，类名首字母小写</span><br><span class="line">                    componentName = clazz.getSimpleName();</span><br><span class="line">                    componentName = componentName.substring(0, 1).toLowerCase() + componentName.substring(1);</span><br><span class="line">                &#125;</span><br><span class="line">                if (!this.container.containsKey(componentName))&#123;</span><br><span class="line">                    this.container.put(componentName, clazz.newInstance());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 自动注入组件中依赖的由@MyResource注解注释的Field</span><br><span class="line">     */</span><br><span class="line">    private void injectField() throws FieldInjectionFailedException, IllegalAccessException&#123;</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; iterator = this.container.entrySet().iterator();</span><br><span class="line">        //遍历所有被实例化的组件</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, Object&gt; entry = iterator.next();</span><br><span class="line">            Object component = entry.getValue();</span><br><span class="line">            //找出所有被@MyResource注解注释的Field</span><br><span class="line">            for(Field field : component.getClass().getDeclaredFields())&#123;</span><br><span class="line">                if (field.isAnnotationPresent(MyResource.class))&#123;</span><br><span class="line">                    //提取@MyResource中的name</span><br><span class="line">                    MyResource myResource = field.getAnnotation(MyResource.class);</span><br><span class="line">                    String myResourceName = myResource.name();</span><br><span class="line">                    if (myResourceName.equals(&quot;&quot;))&#123;</span><br><span class="line">                        myResourceName = field.getName();</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (!this.container.containsKey(myResourceName))&#123;</span><br><span class="line">                        throw new FieldInjectionFailedException(component.getClass().getName() + &quot;的&quot; + field.getName() + &quot;注入失败&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    field.setAccessible(true);</span><br><span class="line">                    field.set(component, this.container.get(myResourceName));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void testAnnotationBeanFactory() throws Exception &#123;</span><br><span class="line">        MyAnnotationBeanFactory myAnnotationBeanFactory = new MyAnnotationBeanFactory(&quot;com.wfw.study.ioc.annotation&quot;);</span><br><span class="line">        BComponentInterface bComponentInterface = (BComponentInterface)myAnnotationBeanFactory.getBean(&quot;bComponentImpl&quot;);</span><br><span class="line">        System.out.println(bComponentInterface.say());</span><br><span class="line">        AComponent aComponent = (AComponent)myAnnotationBeanFactory.getBean(&quot;aComponent&quot;);</span><br><span class="line">        aComponent.print();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><h3 id="SpringBoot中beanFactory的继承关系"><a href="#SpringBoot中beanFactory的继承关系" class="headerlink" title="SpringBoot中beanFactory的继承关系"></a>SpringBoot中beanFactory的继承关系</h3><p><img src="/2018/03/26/理解Spring中的beanFactory/hierarchy.png" alt="hierarchy.png"><br>我把beanFactory接口的继承关系和具体实现类用红框框起来了。<br>可以看一下<code>AbstractApplicationContext</code>中对<code>BeanFactory</code>接口的具体实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">//---------------------------------------------------------------------</span><br><span class="line">// Implementation of BeanFactory interface</span><br><span class="line">//---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Object getBean(String name) throws BeansException &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getBean(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T getBean(String name, @Nullable Class&lt;T&gt; requiredType) throws BeansException &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getBean(name, requiredType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Object getBean(String name, Object... args) throws BeansException &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getBean(name, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) throws BeansException &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getBean(requiredType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T getBean(Class&lt;T&gt; requiredType, Object... args) throws BeansException &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getBean(requiredType, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean containsBean(String name) &#123;</span><br><span class="line">return getBeanFactory().containsBean(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isSingleton(String name) throws NoSuchBeanDefinitionException &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().isSingleton(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isPrototype(String name) throws NoSuchBeanDefinitionException &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().isPrototype(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().isTypeMatch(name, typeToMatch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isTypeMatch(String name, @Nullable Class&lt;?&gt; typeToMatch) throws NoSuchBeanDefinitionException &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().isTypeMatch(name, typeToMatch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public Class&lt;?&gt; getType(String name) throws NoSuchBeanDefinitionException &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getType(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String[] getAliases(String name) &#123;</span><br><span class="line">return getBeanFactory().getAliases(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>AbstractApplicationContext</code>中对<code>ListableBeanFactory</code>接口的具体实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">//---------------------------------------------------------------------</span><br><span class="line">// Implementation of ListableBeanFactory interface</span><br><span class="line">//---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean containsBeanDefinition(String beanName) &#123;</span><br><span class="line">return getBeanFactory().containsBeanDefinition(beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int getBeanDefinitionCount() &#123;</span><br><span class="line">return getBeanFactory().getBeanDefinitionCount();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String[] getBeanDefinitionNames() &#123;</span><br><span class="line">return getBeanFactory().getBeanDefinitionNames();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String[] getBeanNamesForType(ResolvableType type) &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getBeanNamesForType(type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String[] getBeanNamesForType(@Nullable Class&lt;?&gt; type) &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getBeanNamesForType(type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String[] getBeanNamesForType(@Nullable Class&lt;?&gt; type, boolean includeNonSingletons, boolean allowEagerInit) &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getBeanNamesForType(type, includeNonSingletons, allowEagerInit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public &lt;T&gt; Map&lt;String, T&gt; getBeansOfType(@Nullable Class&lt;T&gt; type) throws BeansException &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getBeansOfType(type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public &lt;T&gt; Map&lt;String, T&gt; getBeansOfType(@Nullable Class&lt;T&gt; type, boolean includeNonSingletons, boolean allowEagerInit)</span><br><span class="line">throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getBeansOfType(type, includeNonSingletons, allowEagerInit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String[] getBeanNamesForAnnotation(Class&lt;? extends Annotation&gt; annotationType) &#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getBeanNamesForAnnotation(annotationType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Map&lt;String, Object&gt; getBeansWithAnnotation(Class&lt;? extends Annotation&gt; annotationType)</span><br><span class="line">throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().getBeansWithAnnotation(annotationType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public &lt;A extends Annotation&gt; A findAnnotationOnBean(String beanName, Class&lt;A&gt; annotationType)</span><br><span class="line">throws NoSuchBeanDefinitionException&#123;</span><br><span class="line"></span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">return getBeanFactory().findAnnotationOnBean(beanName, annotationType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>AbstractApplicationContext</code>中对<code>HierarchicalBeanFactory</code>接口的具体实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">//---------------------------------------------------------------------</span><br><span class="line">// Implementation of HierarchicalBeanFactory interface</span><br><span class="line">//---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public BeanFactory getParentBeanFactory() &#123;</span><br><span class="line">return getParent();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean containsLocalBean(String name) &#123;</span><br><span class="line">return getBeanFactory().containsLocalBean(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Return the internal bean factory of the parent context if it implements</span><br><span class="line"> * ConfigurableApplicationContext; else, return the parent context itself.</span><br><span class="line"> * @see org.springframework.context.ConfigurableApplicationContext#getBeanFactory</span><br><span class="line"> */</span><br><span class="line">@Nullable</span><br><span class="line">protected BeanFactory getInternalParentBeanFactory() &#123;</span><br><span class="line">return (getParent() instanceof ConfigurableApplicationContext) ?</span><br><span class="line">((ConfigurableApplicationContext) getParent()).getBeanFactory() : getParent();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//---------------------------------------------------------------------</span><br><span class="line">// Implementation of MessageSource interface</span><br><span class="line">//---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String getMessage(String code, @Nullable Object args[], @Nullable String defaultMessage, Locale locale) &#123;</span><br><span class="line">return getMessageSource().getMessage(code, args, defaultMessage, locale);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String getMessage(String code, @Nullable Object args[], Locale locale) throws NoSuchMessageException &#123;</span><br><span class="line">return getMessageSource().getMessage(code, args, locale);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException &#123;</span><br><span class="line">return getMessageSource().getMessage(resolvable, locale);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Return the internal MessageSource used by the context.</span><br><span class="line"> * @return the internal MessageSource (never &#123;@code null&#125;)</span><br><span class="line"> * @throws IllegalStateException if the context has not been initialized yet</span><br><span class="line"> */</span><br><span class="line">private MessageSource getMessageSource() throws IllegalStateException &#123;</span><br><span class="line">if (this.messageSource == null) &#123;</span><br><span class="line">throw new IllegalStateException(&quot;MessageSource not initialized - &quot; +</span><br><span class="line">&quot;call &apos;refresh&apos; before accessing messages via the context: &quot; + this);</span><br><span class="line">&#125;</span><br><span class="line">return this.messageSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Return the internal message source of the parent context if it is an</span><br><span class="line"> * AbstractApplicationContext too; else, return the parent context itself.</span><br><span class="line"> */</span><br><span class="line">@Nullable</span><br><span class="line">protected MessageSource getInternalParentMessageSource() &#123;</span><br><span class="line">return (getParent() instanceof AbstractApplicationContext) ?</span><br><span class="line">((AbstractApplicationContext) getParent()).messageSource : getParent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实现基本都是通过调用<code>getBeanFactory()</code>方法获取beanFactory来间接实现。而在<code>AbstractApplicationContext</code>类中，该方法是一个抽象方法，需要由其子类实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public abstract ConfigurableListableBeanFactory getBeanFactory() throws IllegalStateException;</span><br></pre></td></tr></table></figure></p><p>我们再来看一下其继承类<code>GenericApplicationContext</code>对抽象方法<code>getBeanFactory()</code>的override：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final ConfigurableListableBeanFactory getBeanFactory() &#123;</span><br><span class="line">return this.beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，该方法返回的是上下文的内部变量<code>this.beanFactory</code>，那么该变量是如何被实例化的？<br>首先看它在<code>GenericApplicationContext</code>类中的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private final DefaultListableBeanFactory beanFactory;</span><br></pre></td></tr></table></figure></p><p>接下来看看它是如何在构造函数中被初始化的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Create a new GenericApplicationContext.</span><br><span class="line"> * @see #registerBeanDefinition</span><br><span class="line"> * @see #refresh</span><br><span class="line"> */</span><br><span class="line">public GenericApplicationContext() &#123;</span><br><span class="line">this.beanFactory = new DefaultListableBeanFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Create a new GenericApplicationContext with the given DefaultListableBeanFactory.</span><br><span class="line"> * @param beanFactory the DefaultListableBeanFactory instance to use for this context</span><br><span class="line"> * @see #registerBeanDefinition</span><br><span class="line"> * @see #refresh</span><br><span class="line"> */</span><br><span class="line">public GenericApplicationContext(DefaultListableBeanFactory beanFactory) &#123;</span><br><span class="line">Assert.notNull(beanFactory, &quot;BeanFactory must not be null&quot;);</span><br><span class="line">this.beanFactory = beanFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Create a new GenericApplicationContext with the given parent.</span><br><span class="line"> * @param parent the parent application context</span><br><span class="line"> * @see #registerBeanDefinition</span><br><span class="line"> * @see #refresh</span><br><span class="line"> */</span><br><span class="line">public GenericApplicationContext(@Nullable ApplicationContext parent) &#123;</span><br><span class="line">this();</span><br><span class="line">setParent(parent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Create a new GenericApplicationContext with the given DefaultListableBeanFactory.</span><br><span class="line"> * @param beanFactory the DefaultListableBeanFactory instance to use for this context</span><br><span class="line"> * @param parent the parent application context</span><br><span class="line"> * @see #registerBeanDefinition</span><br><span class="line"> * @see #refresh</span><br><span class="line"> */</span><br><span class="line">public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) &#123;</span><br><span class="line">this(beanFactory);</span><br><span class="line">setParent(parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可见类型为<strong><code>DefaultListableBeanFactory</code></strong>的beanFactory变量是实际的执行者。</p><h3 id="beanDefinition的注册"><a href="#beanDefinition的注册" class="headerlink" title="beanDefinition的注册"></a>beanDefinition的注册</h3><p>上述几个构造函数的注释中都提到了两个方法：<code>registerBeanDefinition</code>和<code>registerBeanDefinition</code>，我们先不管这两个方法是在什么时候，哪里被调用的，先看看它们的定义。在<code>GenericApplicationContext</code>类中找找这两个方法，找到了<code>registerBeanDefinition</code>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</span><br><span class="line">throws BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">this.beanFactory.registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它调用了this.beanFactory的方法。<br>refresh方法没有找到，因此去<code>GenericApplicationContext</code>的父类<code>AbstractApplicationContext</code>中找，终于找到了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">// 为context刷新做准备，执行property sources的初始化</span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line">// 在子类中实现刷新内置bean factory的操作</span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">// 配置bean factory的标准上下文特性，例如ClassLoader和post-processors</span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">// Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">// Register bean processors that intercept bean creation.</span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">// Register bean processors that intercept bean creation.</span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">// Initialize message source for this context.</span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line">// Initialize event multicaster for this context.</span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">// Initialize other special beans in specific context subclasses.</span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line">// Check for listener beans and register them.</span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line">// Instantiate all remaining (non-lazy-init) singletons：实例化所有单例模式的bean</span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">// Last step: publish corresponding event.</span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (BeansException ex) &#123;</span><br><span class="line">if (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(&quot;Exception encountered during context initialization - &quot; +</span><br><span class="line">&quot;cancelling refresh attempt: &quot; + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Destroy already created singletons to avoid dangling resources.</span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line">// Reset &apos;active&apos; flag.</span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">// Propagate exception to caller.</span><br><span class="line">throw ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">finally &#123;</span><br><span class="line">// Reset common introspection caches in Spring&apos;s core, since we</span><br><span class="line">// might not ever need metadata for singleton beans anymore...</span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>参考文章8</strong>详细讲述了在refresh()方法中bean定义是如何被注册的，可以在代码中跟一下。主要通过<code>postProcessBeanFactory(beanFactory)</code>，<code>invokeBeanFactoryPostProcessors(beanFactory)</code>和<code>registerBeanPostProcessors(beanFactory)</code>获取beanDefinition，将其填充到类<code>DefaultListableBeanFactory</code>的变量<code>beanDefinitionMap</code>中。看一下该变量的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/** Map of bean definition objects, keyed by bean name */</span><br><span class="line">private final Map&lt;String, BeanDefinition&gt; beanDefinitionMap = new ConcurrentHashMap&lt;&gt;(256);</span><br></pre></td></tr></table></figure></p><h3 id="bean的创建和注入"><a href="#bean的创建和注入" class="headerlink" title="bean的创建和注入"></a>bean的创建和注入</h3><p>Bean对象的创建是在getBean方法被调用的时候发生的，而在Spring中有两个场景会触发getBean方法被调用:</p><ul><li>单例模式并且是非延迟加载的对象，会在IOC容器初始化的时候被创建且初始化</li><li>非单例模式或者是延迟加载的对象，是应用第一次向容器索要该Bean对象的时候被创建且初始化</li></ul><p>看一下<code>refresh()</code>方法中，在完成beanDefinition的注册之后，调用了<code>finishBeanFactoryInitialization(beanFactory)</code>方法，该方法完成应用程序上下文中beanFactory的初始化，初始化所有单例模式的bean对象。而该方法通过调用beanFactory的<code>preInstantiateSingletons()</code>方法完成实例化。<br><strong>参考文章10</strong>详细讲述了bean是如何被创建和依赖注入的。</p><p>最后说一下refresh()方法是在什么时候被调用的，在SpringBoot启动的run方法中，有一个<code>refreshContext(context)</code>的方法调用，跟一下就可以看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected void refresh(ApplicationContext applicationContext) &#123;</span><br><span class="line">Assert.isInstanceOf(AbstractApplicationContext.class, applicationContext);</span><br><span class="line">((AbstractApplicationContext) applicationContext).refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://blog.csdn.net/u011202334/article/details/51509235" target="_blank" rel="noopener">spring中的BeanFactory与ApplicationContext的作用和区别</a></li><li><a href="https://www.cnblogs.com/ITtangtang/p/3978349.html" target="_blank" rel="noopener">Spring：源码解读Spring IOC原理</a></li><li><a href="https://www.cnblogs.com/shinubi/p/4182027.html" target="_blank" rel="noopener">Spring学习之bean的理解</a></li><li><a href="https://blog.csdn.net/mlc1218559742/article/details/52776160" target="_blank" rel="noopener">简单实现Spring中BeanFactory原理</a></li><li><a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/1158025?fr=aladdin&amp;fromid=4853&amp;fromtitle=ioc" target="_blank" rel="noopener">控制反转</a></li><li><a href="https://blog.csdn.net/wangyang1354/article/details/50906238" target="_blank" rel="noopener">注解方式实现Bean的注入</a></li><li><a href="https://blog.csdn.net/lc0817/article/details/48341765" target="_blank" rel="noopener">以注解方式模拟Spring的IoC,AOP</a></li><li><a href="https://blog.csdn.net/liaokailin/article/details/49107209" target="_blank" rel="noopener">Spring boot Bean加载源码分析</a></li><li><a href="https://www.jianshu.com/p/0e7f65afa156" target="_blank" rel="noopener">Spring初始化过程之invokeBeanFactoryPostProcessors</a></li><li><a href="http://www.cnblogs.com/dongguacai/p/6438603.html" target="_blank" rel="noopener">Spring源码解析三：IOC容器的依赖注入</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;IOC（Inversion of Control）即“控制反转”，是一种思想，将创建对象的权利交给框架（或容器）。而DI（Dependency Injection）即依赖注入是其实现的一种方式，还包括DL（Dependen
      
    
    </summary>
    
      <category term="微服务" scheme="http://wfwblog.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring" scheme="http://wfwblog.cn/tags/Spring/"/>
    
      <category term="beanFactory" scheme="http://wfwblog.cn/tags/beanFactory/"/>
    
  </entry>
  
  <entry>
    <title>理解SpringFactoriesLoader</title>
    <link href="http://wfwblog.cn/2018/03/23/%E7%90%86%E8%A7%A3SpringFactoriesLoader/"/>
    <id>http://wfwblog.cn/2018/03/23/理解SpringFactoriesLoader/</id>
    <published>2018-03-23T06:58:32.000Z</published>
    <updated>2018-03-23T07:55:54.652Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SpringFactoriesLoader是Springframework框架中经常用到的一个类，在看SpringBoot源码前需要先了解一下它的作用以及工作原理。</p></blockquote><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><code>General purpose factory loading mechanism for internal use within the framework</code><br>即该类是为框架内部使用工厂加载机制服务的。<br><code>SpringFactoriesLoader loads and instantiates factories of a given type from FACTORIES_RESOURCE_LOCATION files which may be present in multiple JAR files in the classpath.</code><br><code>SpringFactoriesLoader</code>类通过读取<code>spring.factories</code>文件（该文件会存在多个classpath的多个jar包中），对给定的type及<code>factoryClass</code>加载和实例化其工厂类。<br><code>The spring.factories file must be in java.util.Properties format, where the key is the fully qualified name of the interface or abstract class, and the value is a comma-separated list of implementation class names.</code><br><code>spring.factories</code>格式：key为接口或抽象类全称，value为具体实现类全称的列表，举例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Application Context Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</span><br></pre></td></tr></table></figure></p><p>ApplicationContextInitializer为接口名称，列表中为该接口的四个实现类。</p><p>为什么叫工厂加载机制呢？想一下工厂模式，工厂模式定义了一个接口或抽象类，然后用多个具体类去实现，通过传入不同的参数实现不同的实例化从而实现不同的功能。是不是跟<code>spring.factories</code>文件相对应。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p><code>SpringFactoriesLoader</code>类的源码相对较简单，我们全部给出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">public abstract class SpringFactoriesLoader &#123;</span><br><span class="line">public static final String FACTORIES_RESOURCE_LOCATION = &quot;META-INF/spring.factories&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private static final Log logger = LogFactory.getLog(SpringFactoriesLoader.class);</span><br><span class="line"></span><br><span class="line">private static final Map&lt;ClassLoader, MultiValueMap&lt;String, String&gt;&gt; cache = new ConcurrentReferenceHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">public static &lt;T&gt; List&lt;T&gt; loadFactories(Class&lt;T&gt; factoryClass, @Nullable ClassLoader classLoader) &#123;</span><br><span class="line">Assert.notNull(factoryClass, &quot;&apos;factoryClass&apos; must not be null&quot;);</span><br><span class="line">ClassLoader classLoaderToUse = classLoader;</span><br><span class="line">if (classLoaderToUse == null) &#123;</span><br><span class="line">classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();</span><br><span class="line">&#125;</span><br><span class="line">List&lt;String&gt; factoryNames = loadFactoryNames(factoryClass, classLoaderToUse);</span><br><span class="line">if (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(&quot;Loaded [&quot; + factoryClass.getName() + &quot;] names: &quot; + factoryNames);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;T&gt; result = new ArrayList&lt;&gt;(factoryNames.size());</span><br><span class="line">for (String factoryName : factoryNames) &#123;</span><br><span class="line">result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse));</span><br><span class="line">&#125;</span><br><span class="line">AnnotationAwareOrderComparator.sort(result);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader) &#123;</span><br><span class="line">String factoryClassName = factoryClass.getName();</span><br><span class="line">return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) &#123;</span><br><span class="line">MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line">if (result != null)</span><br><span class="line">return result;</span><br><span class="line">try &#123;</span><br><span class="line">Enumeration&lt;URL&gt; urls = (classLoader != null ?</span><br><span class="line">classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">result = new LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">while (urls.hasMoreElements()) &#123;</span><br><span class="line">URL url = urls.nextElement();</span><br><span class="line">UrlResource resource = new UrlResource(url);</span><br><span class="line">Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">for (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">List&lt;String&gt; factoryClassNames = Arrays.asList(</span><br><span class="line">StringUtils.commaDelimitedListToStringArray((String) entry.getValue()));</span><br><span class="line">result.addAll((String) entry.getKey(), factoryClassNames);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cache.put(classLoader, result);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">catch (IOException ex) &#123;</span><br><span class="line">throw new IllegalArgumentException(&quot;Unable to load factories from location [&quot; +</span><br><span class="line">FACTORIES_RESOURCE_LOCATION + &quot;]&quot;, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">private static &lt;T&gt; T instantiateFactory(String instanceClassName, Class&lt;T&gt; factoryClass, ClassLoader classLoader) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Class&lt;?&gt; instanceClass = ClassUtils.forName(instanceClassName, classLoader);</span><br><span class="line">if (!factoryClass.isAssignableFrom(instanceClass)) &#123;</span><br><span class="line">throw new IllegalArgumentException(</span><br><span class="line">&quot;Class [&quot; + instanceClassName + &quot;] is not assignable to [&quot; + factoryClass.getName() + &quot;]&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return (T) ReflectionUtils.accessibleConstructor(instanceClass).newInstance();</span><br><span class="line">&#125;</span><br><span class="line">catch (Throwable ex) &#123;</span><br><span class="line">throw new IllegalArgumentException(&quot;Unable to instantiate factory class: &quot; + factoryClass.getName(), ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>常量<code>FACTORIES_RESOURCE_LOCATION</code>指定了加载文件的位置，即<code>META-INF/spring.factories</code>。<br>SpringFactoriesLoader是一个抽象类，只能调用它的两个公共静态方法：<code>loadFactories</code>和<code>loadFactoryNames</code></p><h3 id="loadFactoryNames方法"><a href="#loadFactoryNames方法" class="headerlink" title="loadFactoryNames方法"></a>loadFactoryNames方法</h3><p>定义：<code>public static List&lt;String&gt; More ...loadFactoryNames(Class&lt;?&gt; factoryClass, ClassLoader classLoader){}</code><br>factoryClass为工厂的接口或抽象类全称，即<code>spring.factories</code>中的key<br>classLoader为类加载器，<a href="http://wfwblog.cn/2018/03/22/%E7%90%86%E8%A7%A3Java%E4%B8%AD%E7%9A%84ClassLoader/#more">类加载器详解</a><br>该方法获取spring.factories中指定key的value列表。<br>该方法的起名容易让人误会，其实它获取的是具体实现类的全称。</p><h3 id="loadFactories方法"><a href="#loadFactories方法" class="headerlink" title="loadFactories方法"></a>loadFactories方法</h3><p>定义:<code>public static &lt;T&gt; List&lt;T&gt; loadFactories(Class&lt;T&gt; factoryClass, @Nullable ClassLoader classLoader){}</code><br>参数同<code>loadFactoryNames</code>方法。<br>loadFactories方法首先调用loadFactoryNames方法获取待实例化的具体实现类的全称，然后调用<code>instantiateFactory</code>方法实例化每一个具体实现类，最终返回一个具体实现类的实例列表。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://www.grepcode.com/file/repo1.maven.org/maven2/org.springframework/spring-core/4.2.0.RELEASE/org/springframework/core/io/support/SpringFactoriesLoader.java#SpringFactoriesLoader.0FACTORIES_RESOURCE_LOCATION" target="_blank" rel="noopener">SpringFactoriesLoader.java</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;SpringFactoriesLoader是Springframework框架中经常用到的一个类，在看SpringBoot源码前需要先了解一下它的作用以及工作原理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作
      
    
    </summary>
    
      <category term="Spring" scheme="http://wfwblog.cn/categories/Spring/"/>
    
    
      <category term="java" scheme="http://wfwblog.cn/tags/java/"/>
    
      <category term="Spring" scheme="http://wfwblog.cn/tags/Spring/"/>
    
      <category term="SpringFactoriesLoader" scheme="http://wfwblog.cn/tags/SpringFactoriesLoader/"/>
    
  </entry>
  
  <entry>
    <title>理解Java中的ClassLoader</title>
    <link href="http://wfwblog.cn/2018/03/22/%E7%90%86%E8%A7%A3Java%E4%B8%AD%E7%9A%84ClassLoader/"/>
    <id>http://wfwblog.cn/2018/03/22/理解Java中的ClassLoader/</id>
    <published>2018-03-22T07:20:15.000Z</published>
    <updated>2018-03-22T14:46:02.908Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直不太理解java的类加载器，直到看到一篇通俗易懂的博客，特将自己的理解和实践记录下来。</p></blockquote><h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><h3 id="认识-class文件"><a href="#认识-class文件" class="headerlink" title="认识.class文件"></a>认识.class文件</h3><p>我们写的java代码都是*.java文件，这就是源码。但是jvm是不认识.java文件的，需要用编译器javac将其编译为.class文件，它是一种字节码格式文件。</p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>对于java，主要有三个路径：JAVA_HOME、PATH、CLASSPATH。<br>JAVA_HOME：jdk的目录，这是一个基础目录<br>PATH：这是实际的路径，主要记录jdk的bin目录和jre的bin目录，表示为<code>PATH=%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;%PATH%;</code><br>CLASSPATH：指向jar包的路径，表示为<code>CLASSPATH=.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code></p><h2 id="类加载流程"><a href="#类加载流程" class="headerlink" title="类加载流程"></a>类加载流程</h2><p>java自带三个类加载器：BootstrapClassLoader，ExtentionClassLoader和AppclassLoader</p><ul><li>BootstrapClassLoader：最顶层的加载类，主要加载核心类库，%JRE_HOME%\lib下的rt.jar、resources.jar、charsets.jar和class等。另外需要注意的是可以通过启动jvm时指定-Xbootclasspath和路径来改变Bootstrap ClassLoader的加载目录。比如java -Xbootclasspath/a:path被指定的文件追加到默认的bootstrap路径中。加载路径为：<code>System.getProperty(&quot;sun.boot.class.path&quot;)</code></li><li>ExtentionClassLoader：扩展的类加载器，加载目录%JRE_HOME%\lib\ext目录下的jar包和class文件。还可以加载-D java.ext.dirs选项指定的目录。加载路径为：<code>System.getProperty(&quot;java.ext.dirs&quot;)&quot;)</code></li><li>AppclassLoader：加载当前应用的classpath的所有类。加载路径为：<code>System.getProperty(&quot;java.class.path&quot;)</code></li></ul><p>加载顺序为：<code>BootstrapClassLoader-&gt;ExtentionClassLoader-&gt;AppclassLoader</code></p><h3 id="加载过程——双亲委托"><a href="#加载过程——双亲委托" class="headerlink" title="加载过程——双亲委托"></a>加载过程——双亲委托</h3><p>每个类加载器都有一个父加载器（有一个名为parent的变量，后面源码中会看到，注意不是父类）。一个类加载器查找class和resource时，是通过“委托模式”进行的，它首先判断这个class是不是已经加载成功，如果没有的话它并不是自己进行查找，而是先通过父加载器（如果父加载器为null，则jvm内置的加载器去替代，也就是Bootstrap ClassLoader。），然后递归下去，直到Bootstrap ClassLoader，如果Bootstrap classloader找到了，直接返回，如果没有找到，则一级一级返回，最后到达自身去查找这些对象。这种机制就叫做双亲委托。<br>过程如图所示：<br><img src="/2018/03/22/理解Java中的ClassLoader/loadprocess.png" alt="loadprocess.png"></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ol><li><a href="http://www.grepcode.com/file_/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/sun/misc/Launcher.java/?v=source&amp;disposition=attachment" target="_blank" rel="noopener">Launcher.java</a><br>它是一个java虚拟机的入口应用。<br><img src="/2018/03/22/理解Java中的ClassLoader/launcher.png" alt="launcher.png"><br>从上图可以看到，2中初始化了<code>ExtClassLoader</code>，3中初始化了<code>AppClassLoader</code>，虽然没有看到<code>BootstrapClassLoader</code>，但1获取了其加载jar包的路径。<br><img src="/2018/03/22/理解Java中的ClassLoader/extclassloader.png" alt="extclassloader.png"><br><img src="/2018/03/22/理解Java中的ClassLoader/extdir.png" alt="extdir.png"><br>上图可以看到，ExtClassLoader获取其加载jar包的路径后完成初始化<br><img src="/2018/03/22/理解Java中的ClassLoader/appclassloader.png" alt="appclassloader.png"><br><img src="/2018/03/22/理解Java中的ClassLoader/appclassloaderparent.png" alt="appclassloaderparent.png"><br>上图可以看到，APPClassLoader获取其加载jar包后，用ExtClassLoader作为其父加载器完成初始化。</li><li><a href="http://www.grepcode.com/file_/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/lang/ClassLoader.java/?v=source&amp;disposition=attachment" target="_blank" rel="noopener">ClassLoader.java</a><br>上面提到，父加载器不同与父类，那么父加载器是如何来的？首先看一张类的继承关系图<br><img src="/2018/03/22/理解Java中的ClassLoader/extend.png" alt="extend.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">static class AppClassLoader extends URLClassLoader &#123;&#125;</span><br><span class="line">static class ExtClassLoader extends URLClassLoader &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>类加载器的getParent()方法可以获取父加载器，该方法从<code>ClassLoader</code>继承而来<br><img src="/2018/03/22/理解Java中的ClassLoader/parent.png" alt="parent.png"><br>可以看到该方法实际上就是返回<code>private parent</code>私有变量，那么我们来看一下该私有变量是如何被赋值的：<br><img src="/2018/03/22/理解Java中的ClassLoader/constructor.png" alt="constructor.png"><br><img src="/2018/03/22/理解Java中的ClassLoader/getSystemClassloader.png" alt="getSystemClassloader.png"><br><img src="/2018/03/22/理解Java中的ClassLoader/launcherloader.png" alt="launcherloader.png"><br><img src="/2018/03/22/理解Java中的ClassLoader/loadclass.png" alt="loadclass.png"><br>可以看到，如果类加载器的构造函数传入parent参数，则该类加载器的父加载器即为指定的parent；如果不传入parent参数，由<code>getSystemClassLoader</code>方法获取，则父加载器为AppClassLoader；如果为parent为null，则父加载器为BootstrapClassLoader。</p><ol><li>重要方法——loadclass()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protected Class&lt;?&gt; loadClass(String name,boolean resolve)</span><br><span class="line">              throws ClassNotFoundException</span><br></pre></td></tr></table></figure></li></ol><p><img src="/2018/03/22/理解Java中的ClassLoader/loadclassprocess.png" alt="loadclassprocess.png"><br> 步骤：</p><pre><code>- 首先调用findLoadedClass(String)来检查是否已经加载类；- 如果未加载，则在父加载器上调用loadClass方法。如果父加载器为null，则使用虚拟机的内置类加载器。这也解释了ExtClassLoader的parent为null，但仍然说Bootstrap ClassLoader是它的父加载器；- 如果向上委托父加载器没有加载成功，调用findClass(String)方法查找类。</code></pre><p>另外，要注意的是如果要编写一个classLoader的子类，也就是自定义一个classloader，建议覆盖findClass()方法，而不要直接改写loadClass()方法。</p><h2 id="自定义类加载器——DiskClassLoader"><a href="#自定义类加载器——DiskClassLoader" class="headerlink" title="自定义类加载器——DiskClassLoader"></a>自定义类加载器——DiskClassLoader</h2><p>如上所述，BootstrapClassLoader加载核心类，ExtClassLoader加载扩展类，AppClassLoader加载target目录下的classes，如果我们想加载指定目录下的jar包中的类，可以实现一个自定义类加载器，步骤如下：</p><ul><li>编写一个类继承自ClassLoader抽象类</li><li>复写它的findClass()方法</li><li>在findClass()方法中调用defineClass()</li></ul><ol><li>定义一个类Speak<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Speak &#123;</span><br><span class="line">    public void say()&#123;</span><br><span class="line">        System.out.println(&quot;the classloader speak&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>将该类打成jar包，放到指定目录<code>F:\testLib\lib</code></p><ol><li><p>具体实现自定义类加载器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by killer9527 on 2018/3/21.</span><br><span class="line"> * 自定义从硬盘加载类的类加载器</span><br><span class="line"> * 一个ClassLoader创建时如果没有指定parent，那么它的parent默认就是AppClassLoader。</span><br><span class="line"> */</span><br><span class="line">public class DiskClassLoader extends ClassLoader &#123;</span><br><span class="line">    private String myLibPath;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 保存jar包中的.class文件的二进制字节</span><br><span class="line">     */</span><br><span class="line">    private Map&lt;String, byte[]&gt; clazzMap;</span><br><span class="line"></span><br><span class="line">    public DiskClassLoader(String path) &#123;</span><br><span class="line">        this.myLibPath = path;</span><br><span class="line">        this.clazzMap = new HashMap&lt;&gt;();</span><br><span class="line">        readJarFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class="line">        String fileName = getFileName(name);</span><br><span class="line">        try &#123;</span><br><span class="line">            //1. 首先从classes/*.class文件中直接读取</span><br><span class="line">            File file = new File(Paths.get(this.myLibPath, &quot;classes&quot;).toFile().getAbsolutePath(), fileName);</span><br><span class="line">            FileInputStream fis = new FileInputStream(file);</span><br><span class="line"></span><br><span class="line">            ByteArrayOutputStream bos = new ByteArrayOutputStream();</span><br><span class="line">            int nextByteData;</span><br><span class="line">            while ((nextByteData = fis.read()) != -1) &#123;</span><br><span class="line">                bos.write(nextByteData);</span><br><span class="line">            &#125;</span><br><span class="line">            byte[] data = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">            fis.close();</span><br><span class="line">            bos.close();</span><br><span class="line"></span><br><span class="line">            //将class二进制内容转换成Class对象</span><br><span class="line">            return defineClass(name, data, 0, data.length);</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            //2. 从jar包获取的.class文件中读取（已经存入缓存）</span><br><span class="line">            if (this.clazzMap.containsKey(name)) &#123;</span><br><span class="line">                byte[] data = this.clazzMap.get(name);</span><br><span class="line">                return defineClass(name, data, 0, data.length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return super.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取要加载的class文件名</span><br><span class="line">     *</span><br><span class="line">     * @param name</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String getFileName(String name) &#123;</span><br><span class="line">        int index = name.lastIndexOf(&apos;.&apos;);</span><br><span class="line">        if (index == -1) &#123;</span><br><span class="line">            return name + &quot;.class&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return name.substring(index + 1) + &quot;.class&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读取jar包中的所有.class文件</span><br><span class="line">     */</span><br><span class="line">    private void readJarFile() &#123;</span><br><span class="line">        List&lt;File&gt; list = scanDir();</span><br><span class="line">        for (File f : list) &#123;</span><br><span class="line">            JarFile jar;</span><br><span class="line">            try &#123;</span><br><span class="line">                jar = new JarFile(f);</span><br><span class="line">                readJAR(jar);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 扫描lib下面的所有jar包</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private List&lt;File&gt; scanDir() &#123;</span><br><span class="line">        List&lt;File&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        File[] files = new File(Paths.get(this.myLibPath, &quot;lib&quot;).toFile().getAbsolutePath()).listFiles();</span><br><span class="line">        for (File f : files) &#123;</span><br><span class="line">            if (f.isFile() &amp;&amp; f.getName().endsWith(&quot;.jar&quot;))</span><br><span class="line">                list.add(f);</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读取一个jar包内的class文件，并存在当前加载器的map中</span><br><span class="line">     *</span><br><span class="line">     * @param jar</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    private void readJAR(JarFile jar) throws IOException &#123;</span><br><span class="line">        Enumeration&lt;JarEntry&gt; en = jar.entries();</span><br><span class="line">        while (en.hasMoreElements()) &#123;</span><br><span class="line">            JarEntry je = en.nextElement();</span><br><span class="line">            String name = je.getName();</span><br><span class="line">            if (name.endsWith(&quot;.class&quot;)) &#123;</span><br><span class="line">                String clazzName = name.replace(&quot;.class&quot;, &quot;&quot;).replaceAll(&quot;/&quot;, &quot;.&quot;);</span><br><span class="line">                if (this.findLoadedClass(clazzName) != null) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                InputStream is = jar.getInputStream(je);</span><br><span class="line">                ByteArrayOutputStream bos = new ByteArrayOutputStream();</span><br><span class="line">                int nextByteData;</span><br><span class="line">                while ((nextByteData = is.read()) != -1) &#123;</span><br><span class="line">                    bos.write(nextByteData);</span><br><span class="line">                &#125;</span><br><span class="line">                byte[] data = bos.toByteArray();</span><br><span class="line">                is.close();</span><br><span class="line">                bos.close();</span><br><span class="line">                this.clazzMap.put(clazzName, data);//暂时保存下来</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//测试加载路径为&quot;F:\testLib&quot;的类加载器</span><br><span class="line">        DiskClassLoader firstDiskClassLoader = new DiskClassLoader(&quot;F:\\testLib&quot;);</span><br><span class="line">        Class clazz = firstDiskClassLoader</span><br><span class="line">                .loadClass(&quot;com.wfw.Speak&quot;);</span><br><span class="line">        if (clazz != null) &#123;</span><br><span class="line">            Object object = clazz.newInstance();</span><br><span class="line">            Method setMethod = clazz.getDeclaredMethod(&quot;say&quot;);</span><br><span class="line">            setMethod.invoke(object);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意loadClass的类名需完整，包含包名。</p><h2 id="ContextClassLoader——线程上下文类加载器"><a href="#ContextClassLoader——线程上下文类加载器" class="headerlink" title="ContextClassLoader——线程上下文类加载器"></a>ContextClassLoader——线程上下文类加载器</h2><p><code>ContextClassLoader</code>其实只是一个概念。每个Thread都有一个相关联的ClassLoader，默认是AppClassLoader。并且子线程默认使用父线程的ClassLoader，除非子线程特别设置。<br>测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public void testLoader() throws Exception &#123;</span><br><span class="line">        //测试加载路径为&quot;F:\testLib&quot;的类加载器</span><br><span class="line">        DiskClassLoader firstDiskClassLoader = new DiskClassLoader(&quot;F:\\testLib&quot;);</span><br><span class="line">        Class clazz = firstDiskClassLoader</span><br><span class="line">                .loadClass(&quot;com.wfw.Speak&quot;);</span><br><span class="line">        if (clazz != null) &#123;</span><br><span class="line">            Object object = clazz.newInstance();</span><br><span class="line">            Method setMethod = clazz.getDeclaredMethod(&quot;say&quot;);</span><br><span class="line">            setMethod.invoke(object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //测试加载路径为&quot;F:\testLib\ext&quot;的类加载器</span><br><span class="line">        DiskClassLoader extDistClassLoader = new DiskClassLoader(&quot;F:\\testLib\\ext&quot;);</span><br><span class="line">        Class extClazz = extDistClassLoader.loadClass(&quot;com.wfw.Speak&quot;);</span><br><span class="line">        if (extClazz != null) &#123;</span><br><span class="line">            Object object = extClazz.newInstance();</span><br><span class="line">            Method setMethod = extClazz.getDeclaredMethod(&quot;say&quot;);</span><br><span class="line">            setMethod.invoke(object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //测试Context ClassLoader 线程上下文类加载器</span><br><span class="line">        Thread thread = new Thread(() -&gt; &#123;</span><br><span class="line">            //1. 测试子线程的classloader能否加载父线程中加载的class</span><br><span class="line">            try &#123;</span><br><span class="line">                Class subClazz = Thread.currentThread().getContextClassLoader()</span><br><span class="line">                        .loadClass(&quot;com.wfw.Speak&quot;);</span><br><span class="line">                if (subClazz != null) &#123;</span><br><span class="line">                    Object object = subClazz.newInstance();</span><br><span class="line">                    Method setMethod = subClazz.getDeclaredMethod(&quot;say&quot;);</span><br><span class="line">                    setMethod.invoke(object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            //2. 修改子线程的context classloader</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.currentThread().setContextClassLoader(firstDiskClassLoader);</span><br><span class="line">                Class subReloadedClazz = Thread.currentThread().getContextClassLoader()</span><br><span class="line">                        .loadClass(&quot;com.wfw.Speak&quot;);</span><br><span class="line">                if (subReloadedClazz != null) &#123;</span><br><span class="line">                    Object object = subReloadedClazz.newInstance();</span><br><span class="line">                    Method setMethod = subReloadedClazz.getDeclaredMethod(&quot;say&quot;);</span><br><span class="line">                    setMethod.invoke(object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>子线程的<code>ContextClassLoader</code>是<code>AppClassLoader</code>，<code>AppClassLoader</code>加载不了父线程当中已经加载的<code>Speak.class</code>，通过修改子线程的<code>ContextClassLoader</code>使得子线程成功加载<code>Speak.class</code>。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://blog.csdn.net/briblue/article/details/54973413" target="_blank" rel="noopener">一看你就懂，超详细java中的ClassLoader详解</a></li><li><a href="https://segmentfault.com/a/1190000008669892" target="_blank" rel="noopener">自定义类加载器——从.class和.jar中读取</a></li><li><a href="http://blog.csdn.net/guliangliang/article/details/50427896" target="_blank" rel="noopener">开始使用Java Lambda Expressions</a></li><li><a href="http://www.grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/sun/misc/Launcher.java" target="_blank" rel="noopener">Launcher.java</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一直不太理解java的类加载器，直到看到一篇通俗易懂的博客，特将自己的理解和实践记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概念理解&quot;&gt;&lt;a href=&quot;#概念理解&quot; class=&quot;headerlink&quot; title=&quot;概念理解
      
    
    </summary>
    
      <category term="java基础" scheme="http://wfwblog.cn/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://wfwblog.cn/tags/java/"/>
    
      <category term="classloader" scheme="http://wfwblog.cn/tags/classloader/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot系列（三）——集成MyBatis</title>
    <link href="http://wfwblog.cn/2018/03/20/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E9%9B%86%E6%88%90MyBatis/"/>
    <id>http://wfwblog.cn/2018/03/20/SpringBoot系列（四）——集成MyBatis/</id>
    <published>2018-03-20T01:10:04.000Z</published>
    <updated>2018-03-20T14:36:54.219Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Web服务免不了要跟数据库打交道，基于SpringBoot我们可以很方便地集成MyBatis来对数据库进行操作，本章讲述如何使用<code>mybatis-generator</code>插件生成ORM相关文件以及mybatis的使用。</p></blockquote><h2 id="新建数据库MyBatisDemo"><a href="#新建数据库MyBatisDemo" class="headerlink" title="新建数据库MyBatisDemo"></a>新建数据库MyBatisDemo</h2><p>为了测试，我们建立两张表：<code>User</code>和<code>Department</code>，分别为用户表和部门表。创建脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS=0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for Department</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `Department`;</span><br><span class="line">CREATE TABLE `Department` (</span><br><span class="line">  `id` int(8) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `departmentName` varchar(255) NOT NULL,</span><br><span class="line">  `departmentCulture` text,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=gbk;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for Users</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `Users`;</span><br><span class="line">CREATE TABLE `Users` (</span><br><span class="line">  `id` int(8) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">  `age` int(8) unsigned DEFAULT NULL,</span><br><span class="line">  `sex` varchar(64) DEFAULT NULL,</span><br><span class="line">  `address` varchar(255) DEFAULT &apos;&apos;,</span><br><span class="line">  `departmentId` int(8) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=gbk;</span><br></pre></td></tr></table></figure></p><h2 id="生成entity，dao和mapper文件"><a href="#生成entity，dao和mapper文件" class="headerlink" title="生成entity，dao和mapper文件"></a>生成entity，dao和mapper文件</h2><h3 id="引入mybatis-generator插件的依赖jar包"><a href="#引入mybatis-generator插件的依赖jar包" class="headerlink" title="引入mybatis-generator插件的依赖jar包"></a>引入<code>mybatis-generator</code>插件的依赖jar包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="添加配置文件mybatis-generator-xml"><a href="#添加配置文件mybatis-generator-xml" class="headerlink" title="添加配置文件mybatis-generator.xml"></a>添加配置文件<code>mybatis-generator.xml</code></h3><p>在src/main/resources/config目录下新建<code>mybatis-generator.xml</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!--配置说明：http://blog.csdn.net/isea533/article/details/42102297 --&gt;</span><br><span class="line">    &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;!--是否关闭时间标志true：是 false:否--&gt;</span><br><span class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码，可以提出到单独配置文件中 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL=&quot;jdbc:mysql://10.200.xx.xx:3306/MybatisDemo?characterEncoding=gbk&quot;</span><br><span class="line">                        userId=&quot;username&quot; password=&quot;password&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL和NUMERIC 类型解析为java.math.BigDecimal --&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 生成模型的包名和位置--&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.wfw.entity&quot; targetProject=&quot;src&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 生成映射文件的包名和位置--&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;com.wfw.mapper&quot; targetProject=&quot;src&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 生成DAO(mapper接口)的包名和位置--&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.wfw.dao&quot; targetProject=&quot;src&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 要生成哪些表--&gt;</span><br><span class="line">        &lt;!--tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span><br><span class="line">        &lt;table tableName=&quot;Users&quot; domainObjectName=&quot;Users&quot; enableCountByExample=&quot;false&quot;</span><br><span class="line">               enableUpdateByExample=&quot;false&quot;</span><br><span class="line">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="line">            &lt;!--如果设置为true,那么MBG会使用从数据库元数据获取的列名作为生成的实体对象的属性。 如果为false(默认值)，MGB将会尝试将返回的名称转换为驼峰形式。 在这两种情况下，可以通过元素显示指定，在这种情况下将会忽略这个（useActualColumnNames）属性。--&gt;</span><br><span class="line">            &lt;property name=&quot;useActualColumnNames&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;table tableName=&quot;Department&quot; domainObjectName=&quot;Department&quot; enableCountByExample=&quot;false&quot;</span><br><span class="line">               enableUpdateByExample=&quot;false&quot;</span><br><span class="line">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="line">            &lt;!--如果设置为true,那么MBG会使用从数据库元数据获取的列名作为生成的实体对象的属性。 如果为false(默认值)，MGB将会尝试将返回的名称转换为驼峰形式。 在这两种情况下，可以通过元素显示指定，在这种情况下将会忽略这个（useActualColumnNames）属性。--&gt;</span><br><span class="line">            &lt;property name=&quot;useActualColumnNames&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!--解决字段类型为text等会默认产生XXXXWithBlobs的方法问题http://blog.csdn.net/maoliangfei2011/article/details/52231463--&gt;</span><br><span class="line">            &lt;columnOverride column=&quot;departmentCulture&quot; javaType=&quot;java.lang.String&quot; jdbcType=&quot;VARCHAR&quot;/&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure></p><p>详细配置及说明见<strong>参考文章1</strong>。</p><h3 id="pom-xml中添加插件依赖及配置文件地址"><a href="#pom-xml中添加插件依赖及配置文件地址" class="headerlink" title="pom.xml中添加插件依赖及配置文件地址"></a>pom.xml中添加插件依赖及配置文件地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.5&lt;/version&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.45&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.5&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;Generate MyBatis Artifacts&lt;/id&gt;</span><br><span class="line">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;generate&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">        &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">        &lt;configurationFile&gt;src/main/resources/config/mybatis-generator.xml&lt;/configurationFile&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>需要添加插件版本，即<code>&lt;version&gt;1.3.5&lt;/version&gt;</code>，需要与插件引入的<code>mybatis-generator-core</code>依赖包的版本一致</li><li>插件需要依赖包<code>mysql-connector-java</code>和<code>mybatis-generator-core</code></li><li><code>configurationFile</code>元素配置第一步创建的配置文件地址。<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><img src="/2018/03/20/SpringBoot系列（四）——集成MyBatis/generator.png" alt="generator.png"><br>可以看到在src/com/wfw目录下产生三个目录：dao，entity和mapper，不直接把生成的文件放到java目录下的原因：如果修改表结构需要重新生成文件，则会覆盖已经修改的文件，因此单独生成到src/com/wfw目录下，然后拷贝到对应目录即可。<br>则我们现在的目录结构为：<br><img src="/2018/03/20/SpringBoot系列（四）——集成MyBatis/category.png" alt="category.png"></li></ul><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="application-properties中配置数据库及mybatis的mapper目录"><a href="#application-properties中配置数据库及mybatis的mapper目录" class="headerlink" title="application.properties中配置数据库及mybatis的mapper目录"></a>application.properties中配置数据库及mybatis的mapper目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># mysql数据库相关配置</span><br><span class="line">spring.datasource.url=jdbc:mysql://10.200.xx.xx:3306/MybatisDemo</span><br><span class="line">spring.datasource.username=username</span><br><span class="line">spring.datasource.password=password</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line"># mybatis相关配置</span><br><span class="line">mybatis.mapperLocations=classpath:com/wfw/mapper/*.xml</span><br><span class="line"># 控制台输出sql日志信息</span><br><span class="line">mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><p>注意：如果不配置mysql数据库相关，则SpringBoot启动失败，如果不进行mybatis的mapper目录相关配置，则会出现<code>Invalid bound statement (not found)</code>的异常</p><h3 id="配置pom-xml的build元素"><a href="#配置pom-xml的build元素" class="headerlink" title="配置pom.xml的build元素"></a>配置pom.xml的build元素</h3><p>build元素中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">        &lt;includes&gt;</span><br><span class="line">            &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">        &lt;/includes&gt;</span><br><span class="line">        &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">    &lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><p>这是因为我们的mapper.xml文件放在java/com/wfw/mapper包下，而默认build的时候.xml文件没有被build到target/classes/com/wfw/mapper目录下，我们上一步中配置的<code>mybatis.mapperLocations=classpath:com/wfw/mapper/*.xml</code>找不到相关的mapper.xml文件，也会出现<code>Invalid bound statement (not found)</code>的异常。</p><h3 id="数据访问层接口添加注解"><a href="#数据访问层接口添加注解" class="headerlink" title="数据访问层接口添加注解"></a>数据访问层接口添加注解</h3><ol><li><p>在生成的<code>UsersMapper</code>,<code>DepartmentMapper</code>接口添加注解@Mapper和@Component。<br>为了测试，<code>UsersMapper</code>接口中添加两个接口方法，这个两个接口方法需要我们在<code>UsersMapper.xml</code>文件中通过实现</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDTO&gt; listUsers(@Param(value = &quot;from&quot;) int from,</span><br><span class="line">                        @Param(value = &quot;size&quot;) int size);</span><br><span class="line"></span><br><span class="line">int countUsers();</span><br></pre></td></tr></table></figure><p> 注意：@Param指定该变量在mapper.xml文件中被引用的名称，引用方式为#{value}</p></li><li><p>在<code>UsersMapper.xml</code>文件中添加其实现</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=&quot;UserDtoResultMap&quot; type=&quot;com.wfw.dto.user.UserDTO&quot;&gt;&lt;/resultMap&gt;</span><br><span class="line">&lt;select id=&quot;listUsers&quot; resultMap=&quot;UserDtoResultMap&quot;&gt;</span><br><span class="line">    select Users.`name` as userName, Department.departmentName as department</span><br><span class="line">      from Users inner join Department on Department.id = Users.departmentId</span><br><span class="line">      limit #&#123;from&#125;, #&#123;size&#125;;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;select id=&quot;countUsers&quot; resultType=&quot;java.lang.Integer&quot;&gt;</span><br><span class="line">    select count(*) from Users;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p> 需要注意resultMap和resultType的区别。</p></li></ol><h3 id="Service层接口定义及实现"><a href="#Service层接口定义及实现" class="headerlink" title="Service层接口定义及实现"></a>Service层接口定义及实现</h3><ol><li><p>定义Service层接口</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line">    List&lt;UserDTO&gt; listUsers(int pageIndex, int pageSize);</span><br><span class="line">    int countUsers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现Service层接口，需要添加<code>@Service</code>注解，从而能够在Controller层使用时自动注入。在Service实现时，我们展示数据访问接口的自动注入（使用<code>@Autowired</code>注解）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UsersMapper usersMapper;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;UserDTO&gt; listUsers(int pageIndex, int pageSize) &#123;</span><br><span class="line">        int from = (pageIndex - 1) * pageSize;</span><br><span class="line">        return this.usersMapper.listUsers(from, pageSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int countUsers() &#123;</span><br><span class="line">        return this.usersMapper.countUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Controller层注入Service接口"><a href="#Controller层注入Service接口" class="headerlink" title="Controller层注入Service接口"></a>Controller层注入Service接口</h3><p>在UserController层中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private UserService userService;</span><br><span class="line"></span><br><span class="line">@RequestMapping(path = &quot;/listUsers&quot;, method = RequestMethod.POST)</span><br><span class="line">@ApiOperation(value = &quot;获取用户信息列表&quot;)</span><br><span class="line">ListUsersResponseVO listUsers(@RequestBody ListUsersRequestVO request)&#123;</span><br><span class="line">    ListUsersResponseVO response = new ListUsersResponseVO();</span><br><span class="line">    response.setData(this.userService.listUsers(request.getPageIndex(), request.getPageSize()));</span><br><span class="line">    response.setTotal(this.userService.countUsers());</span><br><span class="line">    response.setResult(true);</span><br><span class="line">    response.setMessage(&quot;OK&quot;);</span><br><span class="line">    return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://blog.csdn.net/isea533/article/details/42102297" target="_blank" rel="noopener">MyBatis-generator 详解</a></li><li><a href="https://www.cnblogs.com/liaojie970/p/8034525.html" target="_blank" rel="noopener">Invalid bound statement (not found)错误的可能原因</a></li><li><a href="http://www.mybatis.org/mybatis-3/zh/java-api.html" target="_blank" rel="noopener">mybatis中文参考文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Web服务免不了要跟数据库打交道，基于SpringBoot我们可以很方便地集成MyBatis来对数据库进行操作，本章讲述如何使用&lt;code&gt;mybatis-generator&lt;/code&gt;插件生成ORM相关文件以及mybatis的使用。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="微服务" scheme="http://wfwblog.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringBoot" scheme="http://wfwblog.cn/tags/SpringBoot/"/>
    
      <category term="Mybatis" scheme="http://wfwblog.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>SpSpringBoot系列（二t系列（三）——日志记录</title>
    <link href="http://wfwblog.cn/2018/03/16/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/"/>
    <id>http://wfwblog.cn/2018/03/16/SpringBoot系列（三）——日志记录/</id>
    <published>2018-03-16T07:48:47.000Z</published>
    <updated>2018-03-18T03:05:58.083Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日志在项目开发过程中及服务部署后对于解决问题起着至关重要的作用，本章介绍如何在SpringBoot中使用logback将日志记录到文件或RabbitMQ中。</p></blockquote><h3 id="引入logback"><a href="#引入logback" class="headerlink" title="引入logback"></a>引入logback</h3><p>在pom.xml文件中，添加包引用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-rabbit&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>使用默认版本。</p><h3 id="添加配置文件logback-xml"><a href="#添加配置文件logback-xml" class="headerlink" title="添加配置文件logback.xml"></a>添加配置文件logback.xml</h3><ol><li><p>在resources/config目录下添加日志配置文件logback.xml</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration  scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;</span><br><span class="line">    &lt;contextName&gt;logback-SpringBootDemoSingle&lt;/contextName&gt;</span><br><span class="line">    &lt;property name=&quot;log.file&quot; value=&quot;logback.log&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;FilePath&quot; value=&quot;/data1/logs/dev/SpringBootDemoSingle&quot; /&gt;</span><br><span class="line">    &lt;!--输出到控制台--&gt;</span><br><span class="line">    &lt;appender name=&quot;Console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--输出到文件并且切分日志文件--&gt;</span><br><span class="line">    &lt;appender name=&quot;ErrorFile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;param name=&quot;encoding&quot; value=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;param name=&quot;file&quot; value=&quot;$&#123;FilePath&#125;/fileERROR/$&#123;log.file&#125;&quot; /&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;FilePath&#125;/fileERROR/logback.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class="line">            &lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=&quot;InfoFile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;param name=&quot;encoding&quot; value=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;param name=&quot;file&quot; value=&quot;$&#123;FilePath&#125;/fileINFO/$&#123;log.file&#125;&quot; /&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;FilePath&#125;/fileINFO/logback.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class="line">            &lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=&quot;amqp&quot; class=&quot;org.springframework.amqp.rabbit.logback.AmqpAppender&quot;&gt;</span><br><span class="line">        &lt;layout&gt;</span><br><span class="line">            &lt;pattern&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                &quot;time&quot;: &quot;%date&quot;,</span><br><span class="line">                &quot;thread&quot;: &quot;%thread&quot;,</span><br><span class="line">                &quot;level&quot;: &quot;%level&quot;,</span><br><span class="line">                &quot;class&quot;: &quot;%logger&quot;,</span><br><span class="line">                &quot;message&quot;: &quot;%message&quot;,</span><br><span class="line">                &quot;system&quot;: &quot;SpringBootDemoSingle&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/pattern&gt;</span><br><span class="line">        &lt;/layout&gt;</span><br><span class="line">        &lt;host&gt;10.200.xx.xx&lt;/host&gt;</span><br><span class="line">        &lt;port&gt;5672&lt;/port&gt;</span><br><span class="line">        &lt;virtualHost&gt;/&lt;/virtualHost&gt;</span><br><span class="line">        &lt;username&gt;username&lt;/username&gt;</span><br><span class="line">        &lt;password&gt;password&lt;/password&gt;</span><br><span class="line">        &lt;exchangeType&gt;topic&lt;/exchangeType&gt;</span><br><span class="line">        &lt;exchangeName&gt;rd6.log&lt;/exchangeName&gt;</span><br><span class="line">        &lt;applicationId&gt;SpringBootDemoSingle&lt;/applicationId&gt;</span><br><span class="line">        &lt;routingKeyPattern&gt;routeKey&lt;/routingKeyPattern&gt;</span><br><span class="line">        &lt;contentType&gt;application/json&lt;/contentType&gt;</span><br><span class="line">        &lt;maxSenderRetries&gt;2&lt;/maxSenderRetries&gt;</span><br><span class="line">        &lt;declareExchange&gt;true&lt;/declareExchange&gt;</span><br><span class="line">        &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;info&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;InfoFile&quot;/&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;amqp&quot;/&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;error&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;ErrorFile&quot; /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;info&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;Console&quot; /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p> 注意：输出到控制台的等级控制要放到最后<br> 该配置文件将日志输出到文件和RabbitMQ中。具体配置见<strong>参考文章3</strong>。</p></li><li>application.properties中配置logback的配置文件目录 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 日志配置文件</span><br><span class="line">logging.config=classpath:config/logback.xml</span><br></pre></td></tr></table></figure></li></ol><h3 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h3><p>在代码中记录日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoggerFactory.getLogger(LogInterceptor.class).error(&quot;error test&quot;);</span><br></pre></td></tr></table></figure></p><h3 id="使用拦截器记录每个接口的耗时"><a href="#使用拦截器记录每个接口的耗时" class="headerlink" title="使用拦截器记录每个接口的耗时"></a>使用拦截器记录每个接口的耗时</h3><ol><li><p>定义日志记录拦截器</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class LogInterceptor implements HandlerInterceptor&#123;</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(LogInterceptor.class);</span><br><span class="line">    /**</span><br><span class="line">     * controller 执行之前调用</span><br><span class="line">     * @param request</span><br><span class="line">     * @param response</span><br><span class="line">     * @param handler</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        long startTime = System.currentTimeMillis();  //记录起始时间</span><br><span class="line">        request.setAttribute(&quot;startTime&quot;, startTime);</span><br><span class="line">        logger.error(&quot;error test&quot;);</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * controller 执行之后，且页面渲染之前调用</span><br><span class="line">     * @param request</span><br><span class="line">     * @param response</span><br><span class="line">     * @param handler</span><br><span class="line">     * @param modelAndView</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        // You can add attributes in the modelAndView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 页面渲染之后调用，一般用于资源清理操作</span><br><span class="line">     * @param request</span><br><span class="line">     * @param response</span><br><span class="line">     * @param handler</span><br><span class="line">     * @param ex</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception &#123;</span><br><span class="line">        long startTime = (long)request.getAttribute(&quot;startTime&quot;);  //获取起始时间</span><br><span class="line">        long endTime = System.currentTimeMillis();</span><br><span class="line">        long timeTaken = endTime - startTime;</span><br><span class="line">        String requestUrl = request.getRequestURL().toString();</span><br><span class="line">        logger.info(&quot;调用接口：&quot; + requestUrl + &quot;，耗时&quot; + timeTaken);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>WebMvcConfig.java</code>中注册拦截器<br> 上一章我们在解决json序列化的时候已经override过<code>configureMessageConverters</code>个方法，拦截器的注册是在<code>addInterceptors</code>方法中：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        //LogInterceptor拦截器应用于所有URLs</span><br><span class="line">        registry.addInterceptor(new LogInterceptor());</span><br><span class="line"></span><br><span class="line">        //登录拦截器，不拦截登录接口和swagger静态资源</span><br><span class="line">        registry.addInterceptor(new LoginInterceptor())</span><br><span class="line">                .excludePathPatterns(&quot;/user/login&quot;,</span><br><span class="line">                        &quot;/swagger-resources/**&quot;, &quot;/swagger-ui.html&quot;, &quot;/v2/api-docs&quot;);</span><br><span class="line"></span><br><span class="line">        //addPathPatterns和excludePathPatterns分别用于指定路由和排除路由</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 注意：此外为了测试，写了一个用户登录的拦截器。<br>再进行一下接口的调用测试，你会发现每个接口的耗时都被记录到了日志中。</p></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://einverne.github.io/post/2017/08/spring-interceptor-vs-filter.html#fn:top" target="_blank" rel="noopener">Spring中拦截器和过滤器区别 </a></li><li><a href="https://o7planning.org/en/11689/spring-boot-interceptors-tutorial" target="_blank" rel="noopener">SpringBoot中拦截器的使用</a></li><li><a href="http://tengj.top/2017/04/05/springboot7/" target="_blank" rel="noopener">默认日志logback配置解析</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;日志在项目开发过程中及服务部署后对于解决问题起着至关重要的作用，本章介绍如何在SpringBoot中使用logback将日志记录到文件或RabbitMQ中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;引入logback&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="微服务" scheme="http://wfwblog.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringBoot" scheme="http://wfwblog.cn/tags/SpringBoot/"/>
    
      <category term="微服务" scheme="http://wfwblog.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot系列（二）——集成Swagger</title>
    <link href="http://wfwblog.cn/2018/03/15/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%9B%86%E6%88%90Swagger/"/>
    <id>http://wfwblog.cn/2018/03/15/SpringBoot系列（二）——集成Swagger/</id>
    <published>2018-03-15T13:43:40.000Z</published>
    <updated>2018-03-16T07:50:59.982Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>现在开发项目很多都采用前后端分离的模式，后端提供Restful接口，前端进行对接。提供详细的接口说明问题可以简化前后端对接步骤，提高工作效率，而Swagger为我们提供了自动生成接口说明文档的功能，且提供了可视化ui，非常方便。本文介绍如何在SpringBoot中集成Swagger及相关的优化配置。</p></blockquote><h2 id="引入Swagger"><a href="#引入Swagger" class="headerlink" title="引入Swagger"></a>引入Swagger</h2><ol><li><p>pom.xml文件添加第三方jar包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加配置文件<br>在包config下，新建文件<code>SwaggerConfig.java</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Docket restfulApi()&#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .genericModelSubstitutes(DeferredResult.class)</span><br><span class="line">                .useDefaultResponseMessages(true)</span><br><span class="line">                .forCodeGeneration(true)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.wfw.controller&quot;))</span><br><span class="line">                .build().globalOperationParameters(GetHeader())</span><br><span class="line">                .apiInfo(initApiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private List&lt;Parameter&gt; GetHeader() &#123;</span><br><span class="line">        ParameterBuilder token = new ParameterBuilder();</span><br><span class="line">        List&lt;Parameter&gt; parameters = new ArrayList&lt;&gt;();</span><br><span class="line">        token.name(&quot;X-Request-Token&quot;).description(&quot;Token&quot;).modelRef(new ModelRef(&quot;string&quot;)).parameterType(&quot;header&quot;).required(false).build();</span><br><span class="line">        parameters.add(token.build());</span><br><span class="line">        return parameters;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ApiInfo initApiInfo() &#123;</span><br><span class="line">        ApiInfo apiInfo = new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;SpringBoot Demo后端WebAPI&quot;)</span><br><span class="line">                .description(initContextInfo())</span><br><span class="line">                .version(&quot;1.0&quot;)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        return apiInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String initContextInfo() &#123;</span><br><span class="line">        StringBuffer sb = new StringBuffer();</span><br><span class="line">        sb.append(&quot;REST API 设计在细节上有很多自己独特的需要注意的技巧，并且对开发人员在构架设计能力上比传统 API 有着更高的要求。&quot;).append(&quot;&lt;br/&gt;&quot;)</span><br><span class="line">                .append(&quot;以下是本项目的API文档&quot;);</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>@Configuration表明该类为IOC容器的配置类。且该配置类为Swagger中每个接口的header提供了一个名为<code>X-Request-Token</code>的参数，便于传递token参数。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们介绍常用的注解，详细使用说明见<strong>参考文章1</strong></p><ul><li><p>在Controller上使用@Api注释该Controller的相关信息，例如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Api(value = &quot;GreetingController&quot;, description = &quot;GreetingController描述&quot;)</span><br><span class="line">public class GreetingController extends BaseController &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在接口方法上使用@ApiOperation注释该接口的说明信息，例如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = &quot;使用Get方法greeting&quot;)</span><br><span class="line">    public GreetingResponseVO greetingByGet(@RequestParam(value=&quot;name&quot;, defaultValue=&quot;World&quot;) String name)&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用@ApiModel和@ApiModelProperty对数据模型结构进行说明，例如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@ApiModel(value = &quot;GreetingResponseVO&quot;, description = &quot;Greeting响应&quot;)</span><br><span class="line">public class GreetingResponseVO extends BaseResponseVO &#123;</span><br><span class="line">    @ApiModelProperty(value = &quot;id&quot;)</span><br><span class="line">    private long id;</span><br><span class="line">    @ApiModelProperty(value = &quot;内容&quot;)</span><br><span class="line">    private String content;</span><br><span class="line"></span><br><span class="line">    public long getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(long id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getContent() &#123;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setContent(String content) &#123;</span><br><span class="line">        this.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动服务，浏览器中：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></p></li></ul><h2 id="解决Swagger参数无法传输换行字符串的问题"><a href="#解决Swagger参数无法传输换行字符串的问题" class="headerlink" title="解决Swagger参数无法传输换行字符串的问题"></a>解决Swagger参数无法传输换行字符串的问题</h2><p>如果直接拷贝了一长串换行文本传入接口参数中，会提示如下错误：</p><blockquote><p>org.codehaus.jackson.JsonParseException: Illegal unquoted character ((CTRL-CHAR, code 9)): has to be escaped using backslash to be included in string value<br>at [Source: java.io.StringReader@10cfc2e3; line: 1, column: 2461]<br>这是因为传输的json参数中含有转义字符，而框架使用jackson未对其进行转换。</p></blockquote><p>解决方法：</p><ol><li><p>pom.xml引入第三方jar包</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.15&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>包config中添加配置类<code>WebMvcConfig</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class="line">        FastJsonHttpMessageConverter fastConverter = new FastJsonHttpMessageConverter();</span><br><span class="line">        FastJsonConfig fastJsonConfig = new FastJsonConfig();</span><br><span class="line"></span><br><span class="line">        fastJsonConfig.setSerializerFeatures(</span><br><span class="line">                SerializerFeature.PrettyFormat</span><br><span class="line">        );</span><br><span class="line">        fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line"></span><br><span class="line">        converters.add(fastConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.jianshu.com/p/12f4394462d5" target="_blank" rel="noopener">swagger常用注解说明</a></li><li><a href="http://blog.csdn.net/f429629227/article/details/74506212" target="_blank" rel="noopener">springboot接收JSON时发生转义字符绑定对象失败</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;现在开发项目很多都采用前后端分离的模式，后端提供Restful接口，前端进行对接。提供详细的接口说明问题可以简化前后端对接步骤，提高工作效率，而Swagger为我们提供了自动生成接口说明文档的功能，且提供了可视化ui，非常方便。本文介绍如何在Spr
      
    
    </summary>
    
      <category term="微服务" scheme="http://wfwblog.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringBoot" scheme="http://wfwblog.cn/tags/SpringBoot/"/>
    
      <category term="微服务" scheme="http://wfwblog.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Swagger" scheme="http://wfwblog.cn/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot系列（一）——搭建SpringBoot框架</title>
    <link href="http://wfwblog.cn/2018/03/12/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BASpringBoot%E6%A1%86%E6%9E%B6/"/>
    <id>http://wfwblog.cn/2018/03/12/SpringBoot系列（一）——搭建SpringBoot框架/</id>
    <published>2018-03-12T14:22:02.000Z</published>
    <updated>2018-04-03T08:06:56.314Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SpringBoot可以使你快速构建基于Spring的应用服务，它集成了Spring平台和第三方库，功能可插拔，将很多配置做了默认处理（习惯优于配置），只需要很少的Spring配置。本文对SpringBoot做简要介绍，并基于SpringBoot快速构建Web服务。</p></blockquote><h2 id="一、SpringBoot特点"><a href="#一、SpringBoot特点" class="headerlink" title="一、SpringBoot特点"></a>一、SpringBoot特点</h2><ul><li>快速构建独立运行的Spring服务</li><li>内嵌tomcat，无需部署war包</li><li>提供<code>spring-boot-starter-*</code>的POMs简化maven配置</li><li>自动配置Spring</li></ul><h2 id="二、快速搭建Web服务"><a href="#二、快速搭建Web服务" class="headerlink" title="二、快速搭建Web服务"></a>二、快速搭建Web服务</h2><p>环境配置：开发工具为Intellij IDEA，Java8，Maven3.5</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>File &gt;&gt; New &gt;&gt; Project &gt;&gt; Spring Initializer<br>选择next，注意Type选择<code>Maven Project(Generate a maven based project archive)</code><br>选择next，SpringBoot版本选择2.0.0，勾选Web<br>然后next，Finish即完成构建。</p><p>可以看到项目是一个空框架，基本没有代码，主要包含以下内容：</p><ul><li>SpringBootDemoSingleApplication.java：一个带有main方法的类，启动应用程序的入口</li><li>SpringBootDemoSingleApplicationTests.java：一个空的Junit测试类，它加载了一个使用Spring Boot字典配置功能的Spring应用程序上下文</li><li>application.properties：SpringBoot的配置文件，如果需要修改SpringBoot的默认配置，则需要在此文件中进行修改</li><li>pom.xml：maven配置文件，用于添加引用包</li></ul><h3 id="配置pom-xml"><a href="#配置pom-xml" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.wfw&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springbootdemosingle&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;SpringBootDemoSingle&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;SpringBoot-demo&lt;/finalName&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">                &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**/**&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">                &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;skipTests&gt;true&lt;/skipTests&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>自己稍微做了一些修改，构建jar包过程中忽略单元测试。</p><ol><li><p><code>parent</code>配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   &lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure><p> 即SpringBoot父级依赖，它是一个特殊的starter，用来指定其他starter的Maven默认依赖版本。可以去本地maven仓库的子目录<code>repository\org\springframework\boot\spring-boot-dependencies\2.0.0.RELEASE</code>下查看<code>spring-boot-dependencies-2.0.0.RELEASE.pom</code>文件，该POMs文件使用<code>properties</code>和<code>dependencyManagement</code>控制第三方库的默认引用版本[^参考文章9]。如果不想使用默认版本，可以在自己项目的POMs文件中指定相应jar包的版本号</p></li><li><code>spring-boot-starter-xxx</code>起步依赖<br>SpringBoot提供了很多”开箱即用“的依赖模块，都是以spring-boot-starter-xxx作为命名的。起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。很多起步依赖的命名都暗示了它们提供的某种或者某类功能。</li><li><p>SpringBoot Maven插件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p> 把项目打包成一个可执行的超级JAR（uber-JAR）,包括把应用程序的所有依赖打入JAR文件内，并为JAR添加一个描述文件，其中的内容能让你用java -jar来运行应用程序。</p></li></ol><h3 id="构建Restful风格接口"><a href="#构建Restful风格接口" class="headerlink" title="构建Restful风格接口"></a>构建Restful风格接口</h3><ol><li><p>创建如下结构的目录<br><img src="/2018/03/12/SpringBoot系列（一）——搭建SpringBoot框架/category.png" alt="category.png"><br>各目录结构说明：</p><ul><li>config: 用于写配置</li><li>controller：Controller层</li><li>dao：数据访问层相关接口定义</li><li>dto：数据模型</li><li>entity：ORM映射模型</li><li>filter：过滤器</li><li>mapper：ORM映射文件</li><li>service：业务逻辑层接口定义及实现</li><li>vo：数据展示模型</li></ul></li><li><p>创建名为<code>controller</code>的package，添加<code>GreetingController</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(path = &quot;/greeting&quot;)</span><br><span class="line">@Api(value = &quot;GreetingController&quot;, description = &quot;GreetingController描述&quot;)</span><br><span class="line">public class GreetingController extends BaseController &#123;</span><br><span class="line">    private static final String template = &quot;Hello, %s!&quot;;</span><br><span class="line">    private final AtomicLong counter = new AtomicLong();</span><br><span class="line"></span><br><span class="line">    @RequestMapping(path=&quot;greetingByGet&quot;, method= RequestMethod.GET)</span><br><span class="line">    @ApiOperation(value = &quot;使用Get方法greeting&quot;)</span><br><span class="line">    public GreetingResponseVO greetingByGet(@RequestParam(value=&quot;name&quot;, defaultValue=&quot;World&quot;) String name)&#123;</span><br><span class="line">        GreetingResponseVO response = new GreetingResponseVO();</span><br><span class="line">        response.setId(counter.incrementAndGet());</span><br><span class="line">        response.setContent(String.format(template, name));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(path = &quot;greetingByPost&quot;, method = RequestMethod.POST)</span><br><span class="line">    @ApiOperation(value = &quot;使用Post方法greeting&quot;)</span><br><span class="line">    public GreetingResponseVO greetingByPost(@RequestBody GreetingRequestVO request)&#123;</span><br><span class="line">        GreetingResponseVO response = new GreetingResponseVO();</span><br><span class="line">        response.setId(counter.incrementAndGet());</span><br><span class="line">        response.setContent(String.format(template, request.getName()));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 相关注解说明：</p><ul><li>@RequestMapping：指定http的路由</li><li>@RestController：指定该Controller下所有的Post方法响应以json格式返回，它是@Controller和@ResponseBody的组合</li><li>@RequestBody：以json格式接收http参数</li><li>@RequestParam：从get方法的url中获取参数</li><li>@Api和@ApiOperation：Swagger的相关注解</li></ul></li><li><p>运行<br>使用SpringBoot内置的tomcat运行jar包的方式，通过扫描<code>SpringBootDemoSingleApplication</code>中的<code>main</code>方法为入口启动程序。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringBootDemoSingleApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringBootDemoSingleApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> @SpringBootApplication非常方便地提供了以下注解：</p><ul><li>@Configuration：将<code>SpringBootDemoSingleApplication</code>标记为应用程序上下文的bean定义类</li><li>@EnableAutoConfiguration：告诉SpringBoot在启动时根据classpath配置，其他beans和各种属性配置添加beans</li><li>@EnableWebMvc：SpringBoot在classpath中检测到<code>spring-webmvc</code>时自动添加了@EnableWebMvc，它将程序标记为Web服务并执行关键步骤，比如设置<code>DispatcherServlet</code></li><li><p>@ComponentScan：告诉Spring寻找其他组件，配置和hello中的服务，使其寻找Controller。将标注了元信息Annotation的bean定义类批量采集到Spring的IOC容器中，如果不指定其basePackages属性，则Spring框架默认会从声明@ComponentScan所在类的package进行扫描，即<code>com.wfw</code></p><p>使用maven编译：<code>mvnw clean package</code><br>执行jar包：java -jar target/SpringBoot-demo.jar</p><p>或者直接在Intellij IEEA中启动<br><img src="/2018/03/12/SpringBoot系列（一）——搭建SpringBoot框架/start.png" alt="start.png"></p></li></ul></li></ol><h2 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h2><p>搭建好SpringBoot后，会自动生成一个全局的配置文件<code>application.properties</code>。也可以自定义配置文件，例如我们在resources目录下新建目录config用于存放我们的自定义配置文件。可以定义一个配置类，用于IoC容器注册和收集我们的配置项。</p><h3 id="自定义配置及引用"><a href="#自定义配置及引用" class="headerlink" title="自定义配置及引用"></a>自定义配置及引用</h3><ol><li><p>创建自定义配置文件<br>假设我们自定义的配置文件config1.properties和config2.properties内容分别为：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># config1.properties内容</span><br><span class="line">config1.username=killer9527</span><br><span class="line"># config2.properties内容</span><br><span class="line">config2.password=123456</span><br></pre></td></tr></table></figure></li><li><p>定义配置类<br>然后我们可以在包config中定义一个配置类<code>ConfigurationConfig.java</code>，内容如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@PropertySources(&#123;</span><br><span class="line">        @PropertySource(&quot;classpath:config/config1.properties&quot;),</span><br><span class="line">        @PropertySource(&quot;classpath:config/config2.properties&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">public class ConfigurationConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用配置项<br>比如在Controller中使用，则可以定义一变量</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private Environment env;</span><br></pre></td></tr></table></figure></li></ol><p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">env.getProperty(&quot;config1.username&quot;)</span><br><span class="line">env.getProperty(&quot;config2.password&quot;)</span><br></pre></td></tr></table></figure></p><p>需要注意的是</p><blockquote><p>Properties added in this way have lower priority than any added by<br>using the default locations (such as application.properties), system properties, environment variables, or the command line</p></blockquote><h3 id="配置随机值"><a href="#配置随机值" class="headerlink" title="配置随机值"></a>配置随机值</h3><p>配置文件中${random} 可以用来生成各种不同类型的随机值，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my.secret=$&#123;random.value&#125;</span><br><span class="line">my.number=$&#123;random.int&#125;</span><br><span class="line">my.bignumber=$&#123;random.long&#125;</span><br><span class="line">my.uuid=$&#123;random.uuid&#125;</span><br><span class="line">my.number.less.than.ten=$&#123;random.int(10)&#125;</span><br><span class="line">my.number.in.range=$&#123;random.int[1024,65536]&#125;</span><br></pre></td></tr></table></figure></p><h3 id="命令行参数配置"><a href="#命令行参数配置" class="headerlink" title="命令行参数配置"></a>命令行参数配置</h3><p>比如：<code>java -jar xx.jar --server.port=9090</code>。命令行中连续的两个减号–就是对application.properties中的属性值进行赋值的标识。</p><h3 id="Profile-多环境配置"><a href="#Profile-多环境配置" class="headerlink" title="Profile-多环境配置"></a>Profile-多环境配置</h3><p>开发过程中，我们针对不同的开发环境相应的会有不同的配置，如果各种开发环境都使用同一个配置文件，那么我们每次发布时，都需要修改相应的配置，很繁琐。SpringBoot的profile针对这个问题专门实现了多环境配置选择配置文件的功能，多环境配置文件名需要满足application-{profile}.properties的格式，其中{profile}对应你的环境标识。具体实现步骤如下：</p><ol><li><p>创建各种开发环境配置文件<br>我们分三个环境：develop，release和online，分别对应的配置文件为<code>application-develop.properties</code>，<code>application-release.properties</code>和<code>application-online.properties</code>，为了测试，内容分别为：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># application-develop.properties内容</span><br><span class="line">server.port=8080</span><br><span class="line">profile.property=develop</span><br><span class="line"># application-release.properties内容</span><br><span class="line">server.port=8081</span><br><span class="line">profile.property=release</span><br><span class="line"># application-online.properties内容</span><br><span class="line">server.port=8082</span><br><span class="line">profile.property=online</span><br></pre></td></tr></table></figure></li><li><p>在<code>application.properties</code>中通过配置<code>spring.profiles.active</code>变量选择配置文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># application.properties内容</span><br><span class="line">spring.profiles.active=online</span><br></pre></td></tr></table></figure><p> 也可以通过命令行参数配置<code>spring.profiles.active</code>变量来实现配置的选择</p></li></ol><p>你可以启动SpringBoot，看看需要用哪个端口访问。</p><h2 id="SpringBoot核心注解说明"><a href="#SpringBoot核心注解说明" class="headerlink" title="SpringBoot核心注解说明"></a>SpringBoot核心注解说明</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p>它用于标记JavaConfig形式的Spring Ioc容器的配置类。配置类与基于XML配置功能相对应。</p><ol><li><p>表达形式<br> 基于XML配置的方式：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span><br><span class="line">       default-lazy-init=&quot;true&quot;&gt;</span><br><span class="line">    &lt;!--bean定义--&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p> 而基于JavaConfig的配置类配置方式：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class MockConfiguration&#123;</span><br><span class="line">    //bean定义</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册bean定义方式<br> 基于XML配置的方式：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;mockService&quot; class=&quot;..MockServiceImpl&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p> 而基于JavaConfig的配置类配置方式：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class MockConfiguration&#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public MockService mockService()&#123;</span><br><span class="line">        return new MockServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 任何一个标注了@Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。</p></li><li><p>依赖注入实现方式<br> 基于XML配置的方式：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;mockService&quot; class=&quot;..MockServiceImpl&quot;&gt;</span><br><span class="line">    &lt;propery name =&quot;dependencyService&quot; ref=&quot;dependencyService&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;dependencyService&quot; class=&quot;DependencyServiceImpl&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p> 而基于JavaConfig的配置类配置方式：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class MockConfiguration&#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public MockService mockService()&#123;</span><br><span class="line">        return new MockServiceImpl(dependencyService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DependencyService dependencyService()&#123;</span><br><span class="line">        return new DependencyServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果一个bean的定义依赖其他bean,则直接调用对应的JavaConfig类中依赖bean的创建方法就可以了。</p></li></ol><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>@ComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义，最终将这些bean定义加载到IoC容器中。<br>我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。</p><blockquote><p>SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages。</p></blockquote><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>借助@Import的支持，将所有符合自动配置条件的bean定义加载到IoC容器。</p><p>个人理解，@Configuration负责bean定义，@ComponentScan负责扫描，@EnableAutoConfiguration负责实现将bean定义加载到IoC容器。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://tengj.top/2017/04/24/springboot0/" target="_blank" rel="noopener">Spring Boot干货系列总纲</a></li><li><a href="http://blog.didispace.com/categories/Spring-Boot/page/4/" target="_blank" rel="noopener">程序猿DD-Spring Boot系列</a></li><li><a href="http://www.ityouknow.com/spring-boot" target="_blank" rel="noopener">纯洁的微笑-Sping Boot系列文章</a></li><li><a href="http://blog.csdn.net/column/details/spring-boot.html" target="_blank" rel="noopener">CSDN-小单博客Spring Boot专栏</a></li><li><a href="http://blog.720ui.com/columns/springboot_all/" target="_blank" rel="noopener">梁桂钊的博客-Spring Boot 揭秘与实战</a></li><li><a href="http://412887952-qq-com.iteye.com/category/356333" target="_blank" rel="noopener">林祥纤博客系列-从零开始学Spring Boot</a></li><li><a href="http://www.jianshu.com/p/7e2e5e7b32ab" target="_blank" rel="noopener">杜琪关于Spring Boot的博客集合</a></li><li><a href="http://www.bysocket.com/?page_id=1639" target="_blank" rel="noopener">泥瓦匠BYSocket的Spring Boot系列</a></li><li><a href="http://blog.csdn.net/liutengteng130/article/details/46991829" target="_blank" rel="noopener">Maven中dependencies与dependencyManagement的区别</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="noopener">application.properties常见配置属性</a></li><li><a href="https://www.cnblogs.com/zhao1949/p/5652167.html" target="_blank" rel="noopener">关于XML文档的xmlns、xmlns:xsi和xsi:schemaLocation</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;SpringBoot可以使你快速构建基于Spring的应用服务，它集成了Spring平台和第三方库，功能可插拔，将很多配置做了默认处理（习惯优于配置），只需要很少的Spring配置。本文对SpringBoot做简要介绍，并基于SpringBoot快
      
    
    </summary>
    
      <category term="微服务" scheme="http://wfwblog.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringBoot" scheme="http://wfwblog.cn/tags/SpringBoot/"/>
    
      <category term="微服务" scheme="http://wfwblog.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+Github持续集成</title>
    <link href="http://wfwblog.cn/2018/02/28/Jenkins-Github%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>http://wfwblog.cn/2018/02/28/Jenkins-Github持续集成/</id>
    <published>2018-02-28T06:05:37.000Z</published>
    <updated>2018-03-05T14:36:10.626Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Github作为代码仓储可以控制代码的版本迭代，而Jenkins是一种持续集成工具，可用于代码的编译和发布，当push代码到GitHub仓库之后，我们希望能够自动触发Jenkins从GitHub拉取代码，然后进行编译和发布。</p></blockquote><h2 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h2><ol><li>安装java环境<code>yum install java</code></li><li>下载Jenkins：<code>wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war</code>并修改权限<code>chmod +x jenkins.war</code></li><li><p>编写启动脚本<code>jenkins_start.sh</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">NAME=&quot;jenkins.war&quot;</span><br><span class="line">echo $NAME</span><br><span class="line">ID=`ps -ef | grep &quot;$NAME&quot; | grep -v &quot;grep&quot; | awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">echo $ID</span><br><span class="line">echo &quot;---------------&quot;</span><br><span class="line">for id in $ID</span><br><span class="line">do</span><br><span class="line">kill -9 $id</span><br><span class="line">echo &quot;killed $id&quot;</span><br><span class="line">done</span><br><span class="line">echo &quot;---------------&quot;</span><br><span class="line">nohup java -jar jenkins.war --httpPort=8008 &amp;</span><br></pre></td></tr></table></figure><p> 添加启动权限：<code>chmod +x jenkins_start.sh</code></p></li><li><p>开启8008端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8008/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>设置成开机启动（未成功。。）</p><ul><li>修改<code>/etc/rc.d/rc.local</code>文件，添加启动脚本的目录</li><li><code>chmod +x /etc/rc.d/rc.local</code></li></ul></li></ol><h2 id="集成GitHub"><a href="#集成GitHub" class="headerlink" title="集成GitHub"></a>集成GitHub</h2><h3 id="安装GitHub插件"><a href="#安装GitHub插件" class="headerlink" title="安装GitHub插件"></a>安装GitHub插件</h3><p>系统管理-&gt;管理插件-&gt;可选插件，过滤条件“github plugin”，选中“github plugin”，直接安装。可能已经安装过了</p><h3 id="配置GitHub插件"><a href="#配置GitHub插件" class="headerlink" title="配置GitHub插件"></a>配置GitHub插件</h3><p>系统管理-&gt;系统设置-&gt;GitHub-&gt;Add GitHub Server</p><ol><li>Github中生成<code>access token</code><br>Settings &gt;&gt; Developer settings &gt;&gt; Personal access tokens<br>需要勾选的scopes：<code>repo</code>和<code>admin:repo_hook</code></li><li>添加Credentials<br><img src="/2018/02/28/Jenkins-Github持续集成/addCredentials.png" alt="addCredentials.png"><br>kind选择<code>Secret text</code>，并填写Secret<br><img src="/2018/02/28/Jenkins-Github持续集成/token.png" alt="token"></li><li>使用<code>Test connection</code>测试<br><img src="/2018/02/28/Jenkins-Github持续集成/test.png" alt="test.png"></li></ol><h3 id="创建一个自由风格任务"><a href="#创建一个自由风格任务" class="headerlink" title="创建一个自由风格任务"></a>创建一个自由风格任务</h3><ol><li>创建新任务，选择自由风格的任务</li><li>选择GitHub project，填写Project url</li><li>源码管理，选择Git，Add Credentials（使用GitHub的用户名和密码），选择<code>githubweb</code>源码浏览器，并填写项目url</li></ol><h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><p>勾选<code>GitHub hook trigger for GITScm polling</code></p><h3 id="使用shell将blog自动发布到指定目录（只能在Jenkins所在服务器）"><a href="#使用shell将blog自动发布到指定目录（只能在Jenkins所在服务器）" class="headerlink" title="使用shell将blog自动发布到指定目录（只能在Jenkins所在服务器）"></a>使用shell将blog自动发布到指定目录（只能在Jenkins所在服务器）</h3><p>构建 &gt;&gt; 增加构建步骤 &gt;&gt; Execute shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo $JENKINS_HOME</span><br><span class="line">cd $JENKINS_HOME</span><br><span class="line">cd workspace</span><br><span class="line">ls</span><br><span class="line">cp -rf hexo-blog /data/nginx_github</span><br><span class="line">echo &quot;deploy success!&quot;</span><br></pre></td></tr></table></figure></p><h3 id="配置GitHub仓库的Webhooks"><a href="#配置GitHub仓库的Webhooks" class="headerlink" title="配置GitHub仓库的Webhooks"></a>配置GitHub仓库的Webhooks</h3><p>进入要监控的仓库，Settings &gt;&gt; Webhooks，<code>Add webhook</code></p><p>完成以上步骤之后，如果对被监控的仓库有push操作，则会触发Jenkins从git上拉取代码并进行build。则程序会发布到指定目录<code>/data/nginx_github</code>，然后就可以通过配置nginx访问了。</p><h2 id="Maven编译并远程发布"><a href="#Maven编译并远程发布" class="headerlink" title="Maven编译并远程发布"></a>Maven编译并远程发布</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ol><li><p>Jenkins服务器和目标计算机上配置SSH（root账号登录）<br>id_rsa.pub里面的内容是需要附加到你要远程连接的服务器上的用户的家目录下的.ssh目录下的authorized_keys的。在认证时，客户端会使用私钥对服务器发来的一些数据进行加密。而服务器端使用公钥钥解密，如果成功就直接认证通过。</p><ul><li>生成ssh的公钥和私钥：<code>ssh-keygen -t rsa</code>，会提示输入：密钥存放位置（直接回车，默认在<code>/root/.ssh/</code>目录）、密码短语、重复密码短语。完成后在<code>/root/.ssh/</code>目录下生成了2个文件：<code>id_rsa</code>为私钥，<code>id_rsa.pub</code>为公钥</li><li>导入公钥：<code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></li><li><p>设置正确的文件和文件夹权限</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 0600  ~/.ssh</span><br></pre></td></tr></table></figure></li><li><p>修改SSH配置文件，支持使用证书登录：<code>vim /etc/ssh/sshd_config</code>，修改对应项的配置</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">StrictModes no</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>重启ssh服务：<code>systemctl restart sshd.service</code></p></li><li>测试：ssh localhost</li></ul></li><li>将Jenkins服务器上的公钥内容添加到目标计算机的authorized_keys中。</li><li>安装Publish Over SSH插件并配置<ul><li>系统管理 &gt;&gt; 管理插件 &gt;&gt; 可选插件，直接安装</li><li>系统管理 &gt;&gt; 系统配置，找到Publish over SSH的配置<ul><li>Jenkins SSH Key配置<ul><li>Passphrase：生成密钥时的密码</li><li>Path to key：ssh的私钥路径，一般为<code>/root/.ssh/id_rsa</code></li><li>Key：私钥内容（如果指定了私钥路径，则可为空）</li></ul></li><li>SSH Servers配置<ul><li>Name：要部署的目标计算机名称（可任意指定）</li><li>Hostname：目标计算机地址</li><li>Username：目标计算机的登录用户名</li><li>Remote Directory：要发布到的目录<br>目的是让Jenkins所在服务器和程序要部署的服务器之间可以通过ssh进行免密码访问。</li></ul></li></ul></li></ul></li><li>安装Maven Integration插件和配置<br>只有安装了该插件，新建任务的时候才可以选择<code>构建一个maven项目</code><br>系统管理 &gt;&gt; 全局工具配置，<strong>安装和配置jdk和maven</strong></li></ol><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>选择构建maven项目</p><ol><li>源码管理，选择Git，填写<code>Repository URL</code>，选择<code>Credentials</code>，指定Branch</li><li>构建触发器，选择<code>GitHub hook trigger for GITScm polling</code></li><li>Build，Root POM：<code>SpringBootDemoSingle/pom.xml</code></li><li><p>Post Steps，选择<code>Run only if build succeeds</code>，Add post-build step选择<code>Send files or execute commands over SSH</code>，配置如图<br> <img src="/2018/02/28/Jenkins-Github持续集成/sshpublish.png" alt="sshpublish.png"><br> start.sh的内容为：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">NAME=SprintbootDemo</span><br><span class="line">echo $NAME</span><br><span class="line">ID=`ps -ef | grep &quot;$NAME&quot; | grep -v &quot;grep&quot; | awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">echo $ID</span><br><span class="line">echo &quot;---------------&quot;</span><br><span class="line">for id in $ID</span><br><span class="line">do</span><br><span class="line">kill -9 $id</span><br><span class="line">echo &quot;killed $id&quot;</span><br><span class="line">done</span><br><span class="line">echo &quot;---------------&quot;</span><br><span class="line">if [ -f &quot;SpringBoot-demo-start.jar&quot; ]; then</span><br><span class="line">rm -f SpringBoot-demo-start.jar</span><br><span class="line">mv SpringBoot-demo.jar SpringBoot-demo-start.jar</span><br><span class="line">fi</span><br><span class="line">chmod +x SpringBoot-demo-start.jar</span><br><span class="line">nohup java -jar SpringBoot-demo-start.jar --name=$NAME --server.port=8088 &amp;</span><br></pre></td></tr></table></figure></li><li><p>验证：<code>curl http://localhost:8080/swagger-ui.html</code></p></li></ol><h2 id="管理节点"><a href="#管理节点" class="headerlink" title="管理节点"></a>管理节点</h2><p>当Jenkins需要处理多个任务时，进行分布式处理很有必要。比如可以部署一个专用于发布java项目的节点，一个专用于发布.net项目的节点或者一个专用于发布node项目的节点。</p><ol><li>创建节点<br>系统管理 &gt;&gt; 管理节点 &gt;&gt; 新建节点，指定节点名称<code>node1</code>，选中<code>固定代理</code>，OK。</li><li>节点配置，如下图<br><img src="/2018/02/28/Jenkins-Github持续集成/slave-node.png" alt="slave-node.png"></li><li>结果如图<br><img src="/2018/02/28/Jenkins-Github持续集成/nodes.png" alt="nodes.png"></li><li>使用<br>在创建job时，在general中通过标签选择使用的节点，如图<br><img src="/2018/02/28/Jenkins-Github持续集成/nodeuse.png" alt="nodeuse.png"></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://wiki.jenkins.io/display/JENKINS/Github%20Plugin" target="_blank" rel="noopener">Github Plugin</a></li><li><a href="https://www.jianshu.com/p/b2ed4d23a3a9" target="_blank" rel="noopener">Jenkins+Github持续集成</a></li><li><a href="http://blog.51cto.com/jiangzm/1878941" target="_blank" rel="noopener">Jenkins+GIT+Maven+Shell 实现项目一键发布</a></li><li><a href="http://blog.51cto.com/jiangzm/1881907" target="_blank" rel="noopener">jenkins gulp 持续集成环境搭建</a></li><li><a href="https://segmentfault.com/a/1190000002895521" target="_blank" rel="noopener">Jenkins+Git+Maven+Shell+Tomcat持续集成经典教程</a></li><li><a href="https://www.jianshu.com/p/b524b151d35f" target="_blank" rel="noopener">Jenkins使用简易教程</a></li><li><a href="https://my.oschina.net/liting/blog/600098" target="_blank" rel="noopener">CentOS7 SSH使用证书登录</a></li><li><a href="http://blog.csdn.net/qq1436248562/article/details/45854779" target="_blank" rel="noopener">linux下ssh和Xshell通过密钥登陆总结</a></li><li><a href="http://www.javatang.com/archives/2017/01/13/23291453.html" target="_blank" rel="noopener">使用Jenkins实现自动构建Maven项目</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Github作为代码仓储可以控制代码的版本迭代，而Jenkins是一种持续集成工具，可用于代码的编译和发布，当push代码到GitHub仓库之后，我们希望能够自动触发Jenkins从GitHub拉取代码，然后进行编译和发布。&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
      <category term="CI" scheme="http://wfwblog.cn/categories/CI/"/>
    
    
      <category term="Jenkins" scheme="http://wfwblog.cn/tags/Jenkins/"/>
    
      <category term="Github" scheme="http://wfwblog.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Nginx安装与配置</title>
    <link href="http://wfwblog.cn/2018/02/26/Nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://wfwblog.cn/2018/02/26/Nginx安装与配置/</id>
    <published>2018-02-26T07:27:44.000Z</published>
    <updated>2018-02-28T03:52:59.502Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nginx是一个Http服务器，与传统的服务器不同，Nginx不依赖多线程处理请求，它采用高扩展性的事件驱动型的架构，性能好，稳定，配置简单且资源消耗小。本文介绍nginx的安装与配置。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装环境：CentOS7</p><ol><li><p>安装Nginx仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure></li><li><p>安装Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure></li><li><p>启动Nginx</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><p> 注意nginx默认使用80端口启动，如果启动失败，可以查看80端口是否被占用，如果占用，则杀死进程</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp | grep 80</span><br><span class="line">ps pid</span><br><span class="line">kill pid</span><br></pre></td></tr></table></figure><p> 其中pid为进程id</p></li><li><p>如果有防火墙，需要运行如下命令运行http和https访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=http </span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://server_domain_name_or_IP/</span><br></pre></td></tr></table></figure><p> <img src="/2018/02/26/Nginx安装与配置/nginxtest.png" alt="nginxtest.png"></p></li><li><p>配置成开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></li><li><p>重新加载配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li></ol><h2 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h2><p>Nginx有一个主进程（master process）和很多工作进程（worker processes）。主进程用来读取配置并维护工作进程，工作进程处理请求。</p><h2 id="Nginx配置介绍"><a href="#Nginx配置介绍" class="headerlink" title="Nginx配置介绍"></a>Nginx配置介绍</h2><h3 id="配置文件的结构及指令介绍"><a href="#配置文件的结构及指令介绍" class="headerlink" title="配置文件的结构及指令介绍"></a>配置文件的结构及指令介绍</h3><p>Nginx有各种模块组成，而模块则由配置文件中的各种指令（directives）控制。<code>Directives</code>又分为<code>simple directives</code>和<code>block directives</code>。<br><code>simple directive</code>结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name parameter;</span><br></pre></td></tr></table></figure></p><p><code>block directive</code>结构与<code>simple directive</code>类似，不过不是以<code>;</code>结尾，而是以<code>{}</code>结尾，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /documents/ &#123;</span><br><span class="line">    [ configuration C ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果<code>{}</code>中有其他<code>directives</code>，我们称之为<code>context</code>。<br><code>#</code>后面为注释</p><ul><li><p><strong>location——根据request URI设置配置</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法:location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">location @name &#123; ... &#125;</span><br><span class="line">默认值:—</span><br><span class="line">Context:server, location</span><br></pre></td></tr></table></figure><ul><li><code>~*</code>（大小写不敏感 ）或<code>~</code>（大小写敏感）——正则匹配</li><li><code>^~</code>或无修饰——前缀匹配</li><li><p><code>=</code>——精确匹配<br>匹配过程：首先进行精确匹配，匹配到此停止；然后使用uri进行前缀匹配，匹配出最长的的location，并记录，假设为location_prefix_longest，如果前缀匹配用<code>^~</code>修饰，则匹配到此停止；再然后进行正则匹配检查，假设匹配到的第一个location为location_reg_first，则使用location_reg_first中的配置，如果没有匹配到，则使用location_prefix_longest中的配置。<br>举例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">    [ configuration A ]</span><br><span class="line">&#125;</span><br><span class="line">location / &#123;</span><br><span class="line">    [ configuration B ]</span><br><span class="line">&#125;</span><br><span class="line">location /documents/ &#123;</span><br><span class="line">    [ configuration C ]</span><br><span class="line">&#125;</span><br><span class="line">location ^~ /images/ &#123;</span><br><span class="line">    [ configuration D ]</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">    [ configuration E ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/</code>请求匹配configuration A，<code>/index.html</code>匹配configuration B，在<code>/documents/document.html</code>匹配configuration C，<code>/images/1.gif</code>匹配configuration D，<code>/documents/1.jpg</code>匹配configuration E。<br><code>@</code>定义了一个命名location，它用于请求重定向。不能嵌套且不能包含嵌套locations。</p></li></ul></li></ul><h3 id="默认服务器根目录"><a href="#默认服务器根目录" class="headerlink" title="默认服务器根目录"></a>默认服务器根目录</h3><p>默认服务器根目录为<code>/usr/share/nginx/html</code>，我们在安装nginx步骤进行验证时看到的页面所相关的文件就放置在该目录下，默认服务的配置文件为<code>/etc/nginx/nginx.conf.default</code></p><h3 id="Nginx全局配置文件"><a href="#Nginx全局配置文件" class="headerlink" title="Nginx全局配置文件"></a>Nginx全局配置文件</h3><p>Nginx的全局配置文件为<code>/etc/nginx/nginx.conf</code>，注意它的内容中有一条包含配置<code>include /etc/nginx/conf.d/*.conf;</code>，表明它将<code>/etc/nginx/conf.d</code>目录下所有以<code>.conf</code>结尾的配置文件包含进来，实现配置的扩展。</p><h3 id="在-etc-nginx-conf-d-中添加配置"><a href="#在-etc-nginx-conf-d-中添加配置" class="headerlink" title="在/etc/nginx/conf.d/中添加配置"></a>在/etc/nginx/conf.d/中添加配置</h3><ol><li><p><a href="https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/" target="_blank" rel="noopener">避免使用if指令</a><br> if指令是为rewrite模块设计的（location模块中只有rewrite或return），其他应用不推荐使用。例如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if ($request_method = POST ) &#123;</span><br><span class="line">  return 405;</span><br><span class="line">&#125;</span><br><span class="line">if ($args ~ post=140)&#123;</span><br><span class="line">  rewrite ^ http://example.com/ permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 使用<code>try_files</code>判断文件是否存在。</p></li><li><p>访问静态内容</p><ul><li>创建目录/data/nginx_www，并添加index.html文件，创建/data/nginx_image，并添加图片<br>songhuiqiao.jpeg</li><li><p><code>cd /etc/nginx/conf.d</code>并创建配置文件<code>static_content.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    server &#123;</span><br><span class="line">    listen 8001;</span><br><span class="line">    server_name static_content;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /data/nginx_www;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /nginx_images/ &#123;</span><br><span class="line">        root /data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新加载nginx配置<code>nginx -s reload</code></p></li><li>开放8001端口<code>firewall-cmd --zone=public --add-port=8001/tcp --permanent</code></li><li>重启防火墙<code>systemctl restart firewalld</code></li><li>访问<code>http://ip:8001/</code>和<code>http://ip:8001/nginx_images/songhuiqiao.jpeg</code>，则分别访问的是<code>/data/nginx_www/index.html</code>静态文件和<code>/data/nginx_images/songhuiqiao.jpeg</code>静态文件</li></ul></li><li><p>配置为代理服务器<br> Nginx收到请求后，将请求转发给被代理的服务器，获取到响应之后返给客户端。</p><ul><li>创建目录/data/nginx_proxied，并添加index.html文件</li><li><p><code>cd /etc/nginx/conf.d</code>并修改配置文件<code>static_content.conf</code>为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    server &#123;</span><br><span class="line">    listen 8001;</span><br><span class="line">    server_name static_content;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /data/nginx_www;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /nginx_images/ &#123;</span><br><span class="line">        root /data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /nginx_proxied/ &#123;</span><br><span class="line">        proxy_pass http://localhost:8002;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即对uri前缀为<code>/nginx_proxied/</code>的请求做代理，被代理地址为<code>http://localhost:8002</code></p></li><li><p>配置被代理服务<br><code>cd /etc/nginx/conf.d</code>并创建配置文件<code>proxied_server.conf</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8002;</span><br><span class="line">    root /data/nginx_proxied;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /nginx_proxied/ &#123;</span><br><span class="line">        root /data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新加载nginx配置文件<code>nginx -s reload</code></p></li><li>访问<code>http:ip:8001/nginx_proxied/</code></li></ul></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7" target="_blank" rel="noopener">how-to-install-nginx-on-centos-7</a></li><li><a href="https://www.nginx.com/resources/wiki/start/#pre-canned-configurations" target="_blank" rel="noopener">Pre-canned Configurations</a></li><li><a href="http://nginx.org/en/docs/beginners_guide.html" target="_blank" rel="noopener">Nginx Beginners’ Guide</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Nginx是一个Http服务器，与传统的服务器不同，Nginx不依赖多线程处理请求，它采用高扩展性的事件驱动型的架构，性能好，稳定，配置简单且资源消耗小。本文介绍nginx的安装与配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装&quot;&gt;
      
    
    </summary>
    
      <category term="服务器" scheme="http://wfwblog.cn/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="nginx" scheme="http://wfwblog.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建自己的博客（三）</title>
    <link href="http://wfwblog.cn/2018/02/24/Hexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://wfwblog.cn/2018/02/24/Hexo-Github搭建自己的博客（三）/</id>
    <published>2018-02-24T09:35:42.000Z</published>
    <updated>2018-02-26T01:56:30.211Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本地搭建好hexo系统后，我们可以将其部署到GitHub上，使用Github Pages访问我们的博客。</p></blockquote><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><ol><li>创建repository<br>在GitHub中New一个repository，注意仓库的名称需要跟我们的GitHub用户名一致（GitHub Pages要求）</li><li>为仓库增加deploy key，否则发布过程会出现发布失败<ul><li>生成本地ssh key，<a href="http://blog.csdn.net/keyboardota/article/details/7603630" target="_blank" rel="noopener">方法</a></li><li>拷贝.ssh/id_rsa.pub文件内的所有内容，进入repository，点击settings，点击Deploy keys，将拷贝的内容Add deploy key</li></ul></li><li>修改站点配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol><p>repo也可以配置为https的形式，但是我在发布过程中总是提示我版本不对，因此改用ssh发布</p><ol><li><p>安装发布插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git  --save</span><br></pre></td></tr></table></figure></li><li><p>发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li><li><p>测试<br>访问<a href="https://yourname.github.io/" target="_blank" rel="noopener">https://yourname.github.io/</a></p></li></ol><h3 id="定制域名"><a href="#定制域名" class="headerlink" title="定制域名"></a>定制域名</h3><p>如果我们想自己申请域名作为自己的博客地址，可以使用GitHub Pages的Custom domain功能。</p><ol><li>申请域名<br>我是在腾讯云上申请的，然后需要配置我们域名的解析<br><img src="/2018/02/24/Hexo-Github搭建自己的博客（三）/dns.png" alt="dns"><br>注意记录类型选择CNAME，记录值填写仓库名称即可，表明是域名绑定域名</li><li>配置GitHub Pages<br>进入repository的Settings，找到GitHub Pages，并配置custom domain<br><img src="/2018/02/24/Hexo-Github搭建自己的博客（三）/githubpages.png" alt="githubpages.png"><br>点击Save后，在Code中会增加CNAME文件，内容即为我们的自定义域名。</li><li>hexo中增加CNAME文件<br>由于每次Deploy后CNAME文件都会被删掉，因此需要在站点目录下的source中新增CNAME文件，内容为自定义域名<br><img src="/2018/02/24/Hexo-Github搭建自己的博客（三）/cname.png" alt="cname.png"></li><li>测试<br>访问自定义域名</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本地搭建好hexo系统后，我们可以将其部署到GitHub上，使用Github Pages访问我们的博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;部署到GitHub&quot;&gt;&lt;a href=&quot;#部署到GitHub&quot; class=&quot;header
      
    
    </summary>
    
      <category term="工具" scheme="http://wfwblog.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="http://wfwblog.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="http://wfwblog.cn/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建自己的博客（二）</title>
    <link href="http://wfwblog.cn/2018/02/23/Hexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://wfwblog.cn/2018/02/23/Hexo-Github搭建自己的博客（二）/</id>
    <published>2018-02-23T10:26:04.000Z</published>
    <updated>2018-02-28T14:42:11.446Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo支持各种主题风格，默认使用Landscape主题，本章我们介绍如何使用Next主题美化我们的博客</p></blockquote><p>在Hexo中有两份主要的配置文件，其名称都是_config.yml。 其中，一份位于站点根目录下，主要包含Hexo本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为<strong>站点配置文件</strong>， 后者称为<strong>主题配置文件</strong>。</p><a id="more"></a><h2 id="更换theme"><a href="#更换theme" class="headerlink" title="更换theme"></a>更换theme</h2><ol><li>下载Next主题<br>Hexo官网可以下载<a href="https://hexo.io/themes/" target="_blank" rel="noopener">各种主题</a>，从中找到<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next主题的地址</a>，直接下载zip</li><li>配置主题<br>将下载的zip文件解压至Hexo/blog/themes下，重命名为hexo-theme-next。</li><li><p>使用主题<br>打开站点配置文件，修改theme配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: hexo-theme-next</span><br></pre></td></tr></table></figure></li><li><p>验证主题<br>Git Bash命令界面下，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo server -p 4001</span><br></pre></td></tr></table></figure></li></ol><p>浏览器中访问<a href="http://localhost:4001" target="_blank" rel="noopener">http://localhost:4001</a><br>出现如下界面则更换主题成功<br><img src="/2018/02/23/Hexo-Github搭建自己的博客（二）/hexohelloworld.png" alt="hexohelloworld"></p><h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><p>Next主题主要通过修改主题配置文件和站点配置文件设定自己的博客。</p><h3 id="选择scheme"><a href="#选择scheme" class="headerlink" title="选择scheme"></a>选择scheme</h3><p>修改主题配置文件，检索Scheme Settings<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure></p><h3 id="设置博客language"><a href="#设置博客language" class="headerlink" title="设置博客language"></a>设置博客language</h3><p>修改站点配置文件，检索language<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure></p><h3 id="设置博客菜单项"><a href="#设置博客菜单项" class="headerlink" title="设置博客菜单项"></a>设置博客菜单项</h3><p>修改主题配置文件，检索Menu Settings<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  archives: /archives/ || archive</span><br></pre></td></tr></table></figure></p><p>菜单内容的设置格式是：item name: link || icon name，我只保留了主页，分类，标签，归档。搜索菜单会通过集成第三方服务实现。<br>需要注意的是，添加categories和tags页面之前，这两个按钮都是无效的，后续会有介绍。</p><h3 id="设置侧栏"><a href="#设置侧栏" class="headerlink" title="设置侧栏"></a>设置侧栏</h3><p>修改主题配置文件，检索position<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  position: left</span><br><span class="line">  display: post</span><br><span class="line">  offset: 12</span><br><span class="line">  b2t: false</span><br><span class="line">  scrollpercent: false</span><br><span class="line">  onmobile: false</span><br></pre></td></tr></table></figure></p><p>我配置的居左显示，在文章页面（拥有目录列表）时显示</p><h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>将头像放置主题目录下的source/uploads/ （目录若不存在则新建uploads）<br>修改主题配置文件，搜索Sidebar Avatar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: /uploads/pic.jpg</span><br></pre></td></tr></table></figure></p><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>NexT坚持将复杂的细节隐藏，提供尽量少并且简便的设置，保持最大限度的易用性。</p><h3 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h3><ol><li><p>安装hexo-generator-feed<br>Git Bash下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件，检索rss</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rss:</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: &apos; &apos;</span><br></pre></td></tr></table></figure></li></ol><h3 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h3><p>只有添加了标签页面，侧栏中我们配置的「标签」菜单才能点击并响应</p><ol><li><p>站点目录下（即blog目录），Git Bash中</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p> 则会在source/tags中新建index.md</p></li><li><p>设置页面类型<br> 修改步骤1创建中的index.md</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2018-02-22 22:18:27</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p> 其中<code>comments: false</code>是去掉标签页面的评论服务（如果集成了评论服务）</p></li><li>文章中的头部添加tags <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo+Github搭建自己的博客（二）</span><br><span class="line">date: 2018-02-23 18:26:04</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">  - Next</span><br></pre></td></tr></table></figure></li></ol><h3 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h3><p>类似于添加标签页面</p><ol><li><p>站点目录下（即blog目录），Git Bash中</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p> 则会在source/categories中新建index.md</p></li><li><p>设置页面类型<br> 修改步骤1创建中的index.md</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2018-02-22 22:37:03</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p> 其中<code>comments: false</code>是去掉分类页面的评论服务（如果集成了评论服务）</p></li><li>文章中的头部添加categories <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo+Github搭建自己的博客（二）</span><br><span class="line">date: 2018-02-23 18:26:04</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">  - Next</span><br><span class="line">categories: 工具</span><br></pre></td></tr></table></figure></li></ol><h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><p>包括：全局字体，标题字体，文章字体，Logo字体和代码字体<br>修改主题配置文件，检索Font Settings<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # 外链字体库地址，例如 //fonts.googleapis.com (默认值)</span><br><span class="line">  # 预览：https://fonts.google.com/</span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  # 全局字体，应用在 body 元素上</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lato</span><br><span class="line">    size: 14</span><br><span class="line"></span><br><span class="line">  # 标题字体 (h1, h2, h3, h4, h5, h6)</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family: Roboto Slab</span><br><span class="line"></span><br><span class="line">  # 文章字体</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family: Microsoft YaHei</span><br><span class="line">    size: 14</span><br><span class="line"></span><br><span class="line">  # Logo 字体</span><br><span class="line">  logo:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lobster Two</span><br><span class="line">    size: 24</span><br><span class="line"></span><br><span class="line">  # 代码字体，应用于 code 以及代码块</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family: Monospaced</span><br><span class="line">    size: 13</span><br></pre></td></tr></table></figure></p><p>这是我的字体配置，<a href="https://fonts.google.com/" target="_blank" rel="noopener">更多字体</a></p><h3 id="侧边栏设置社交链接"><a href="#侧边栏设置社交链接" class="headerlink" title="侧边栏设置社交链接"></a>侧边栏设置社交链接</h3><p>修改主题配置文件，检索social<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/yourname || github</span><br><span class="line">  E-Mail: mailto:youremail || envelope</span><br></pre></td></tr></table></figure></p><h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><p>修改主题配置文件，检索reward_comment<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reward_comment: 多谢支持，共同进步！</span><br><span class="line">wechatpay: /uploads/微信打赏.jpg</span><br><span class="line">alipay: /uploads/支付宝打赏.jpg</span><br></pre></td></tr></table></figure></p><h3 id="添加友情链接"><a href="#添加友情链接" class="headerlink" title="添加友情链接"></a>添加友情链接</h3><p>修改主题配置文件，检索links_title<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">links_icon: link</span><br><span class="line">links_title: 友情链接</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  酷壳: https://coolshell.cn/</span><br><span class="line">  SegmentFault: https://segmentfault.com/</span><br><span class="line">  DigitalOcean: https://www.digitalocean.com/community</span><br><span class="line">  伯乐在线: http://python.jobbole.com/</span><br></pre></td></tr></table></figure></p><h3 id="设置「阅读全文」"><a href="#设置「阅读全文」" class="headerlink" title="设置「阅读全文」"></a>设置「阅读全文」</h3><p>首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面。有三种方法：</p><ol><li>在文章中使用 <code>&lt;!-- more --&gt;</code>手动进行截断</li><li>在文章的 front-matter 中添加 description，并提供文章摘录</li><li>自动形成摘要<br>在出题配置文件中，检索auto_excerpt<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure></li></ol><h3 id="文章中插入图片且可放大查看"><a href="#文章中插入图片且可放大查看" class="headerlink" title="文章中插入图片且可放大查看"></a>文章中插入图片且可放大查看</h3><ol><li>修改主题配置文件，检索<code>post_asset_folder</code>，将其置为true</li><li>安装hexo-asset-image插件：<code>npm install hexo-asset-image --save</code>。此后使用命令<code>hexo new &quot;博客名称&quot;</code>则会在source/_post文件夹里面就会出现一个“博客名称.md”的文件和一个“博客名称”的文件夹。</li><li><a href="https://github.com/theme-next/theme-next-fancybox" target="_blank" rel="noopener">安装fancybox插件</a>，并修改主题配置文件，检索<code>fancybox</code>并将其置为true。</li><li>文中插入图片：在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，<code>![你想输入的替代文字](xxxx/图片名.jpg)</code></li></ol><h2 id="第三方服务集成"><a href="#第三方服务集成" class="headerlink" title="第三方服务集成"></a>第三方服务集成</h2><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>基于来必力的免费city版本搭建。</p><ol><li>首先登录<a href="https://livere.com" target="_blank" rel="noopener">来必力官网</a>，在管理页面获取来必力的City版，获取安装代码，从自己的安装代码中获得data-uid，如图：<br><img src="/2018/02/23/Hexo-Github搭建自己的博客（二）/uid.png" alt="uid"></li><li>修改主题配置文件，检索livere_uid<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">livere_uid: your_uid</span><br></pre></td></tr></table></figure></li></ol><p>另外还可以<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">基于Gitment搭建评论系统</a>，不过我在搭建过程中初始化评论页面的时候遇到“Error: Validation Failed”，没解决因此放弃了。。</p><h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><ol><li>注册登录<a href="https://tongji.baidu.com" target="_blank" rel="noopener">百度统计</a></li><li>添加网站：将自己的博客地址添加到自有网站中，点击左侧栏“代码获取”，获取下图中标识的统计id<br><img src="/2018/02/23/Hexo-Github搭建自己的博客（二）/tongjiid.png" alt="tongjiid.png"></li><li>修改主题配置文件，检索baidu_analytics<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidu_analytics: your_baidu_id</span><br></pre></td></tr></table></figure></li></ol><h3 id="阅读次数统计（后面有更简单方式）"><a href="#阅读次数统计（后面有更简单方式）" class="headerlink" title="阅读次数统计（后面有更简单方式）"></a>阅读次数统计（后面有更简单方式）</h3><ol><li>注册登录<a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a>，创建应用，点击应用，创建Class，Class名称为Counter，选择无限制</li><li>设置中，点击“应用Key”，获取AppId，AppKey</li><li>修改主题配置文件，检索leancloud_visitors<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: your_app_id</span><br><span class="line">  app_key: your_app_key</span><br></pre></td></tr></table></figure></li></ol><h3 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h3><ol><li><p>安装检索插件，站点根目录下Git Bash执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><p>修改站点配置文件<br>添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件，启用本地搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他个性化配置"><a href="#其他个性化配置" class="headerlink" title="其他个性化配置"></a>其他个性化配置</h2><h3 id="修改文章底部带-的标签"><a href="#修改文章底部带-的标签" class="headerlink" title="修改文章底部带#的标签"></a>修改文章底部带#的标签</h3><p>修改模板<code>/themes/hexo-theme-next/layout/_macro/post.swig</code>，搜索<code>rel=&quot;tag&quot;&gt;#</code>，将 <code>#</code>换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h3 id="在每篇文章末尾统一添加“本文结束”标记"><a href="#在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="在每篇文章末尾统一添加“本文结束”标记"></a>在每篇文章末尾统一添加“本文结束”标记</h3><ol><li><p><code>/themes/hexo-theme-next/layout/_macro/</code>目录下新建<code>page-end-tag.swig</code>文件，内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>/themes/hexo-theme-next/layout/_macro/post.swig</code>文件，搜索<code>END POST BODY</code>，在其后面添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.page_end_tag.enabled and not is_index %&#125;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&#123;% include &apos;page-end-tag.swig&apos; %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑主题配置文件，添加内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure></li></ol><h3 id="网站底部添加访问量和博客阅读次数统计"><a href="#网站底部添加访问量和博客阅读次数统计" class="headerlink" title="网站底部添加访问量和博客阅读次数统计"></a>网站底部添加访问量和博客阅读次数统计</h3><p>编辑主题配置文件，检索busuanzi_count<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure></p><h3 id="在文章底部增加版权信息"><a href="#在文章底部增加版权信息" class="headerlink" title="在文章底部增加版权信息"></a>在文章底部增加版权信息</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>修改主题配置文件，检索post_copyright<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  license: &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 4.0&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><h4 id="方法二——自定义"><a href="#方法二——自定义" class="headerlink" title="方法二——自定义"></a>方法二——自定义</h4><ol><li><p><code>/themes/hexo-theme-next/layout/_macro/</code>目录下新建<code>my-copyright.swig</code>文件，内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line">&lt;div class=&quot;my_post_copyright&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;span class=&quot;copy-path&quot;  title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot;  aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    var clipboard = new Clipboard(&apos;.fa-clipboard&apos;);</span><br><span class="line">    $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class="line">      clipboard.on(&apos;success&apos;, function()&#123;</span><br><span class="line">        swal(&#123;   </span><br><span class="line">          title: &quot;&quot;,   </span><br><span class="line">          text: &apos;复制成功&apos;,</span><br><span class="line">          icon: &quot;success&quot;, </span><br><span class="line">          showConfirmButton: true</span><br><span class="line">          &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>在目录<code>/themes/hexo-theme-next/source/css/_common/components/post/</code>下添加<code>my-post-copyright.styl</code>，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: 85%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;margin:0;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #b5b5b5;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: #a3d2a3;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>/themes/hexo-theme-next/layout/_macro/post.swig</code>文件，搜索<code>END POST BODY</code>，在其后面（如果已经添加了文章结束标志则在其后）添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if not is_index %&#125;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&#123;% include &apos;my-copyright.swig&apos; %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>/themes/hexo-theme-next/source/css/_common/components/post/post.styl</code>文件，在最后一行添加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;my-post-copyright&quot;</span><br></pre></td></tr></table></figure></li><li><p>修改站点配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: http://wfwblog.cn</span><br></pre></td></tr></table></figure></li><li><p>在文章头部添加copyright</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo+Github搭建自己的博客（二）</span><br><span class="line">date: 2018-02-23 18:26:04</span><br><span class="line">tags:</span><br><span class="line">  - Hexo  </span><br><span class="line">  - Next</span><br><span class="line">categories: 工具</span><br><span class="line">copyright: true</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next主题使用介绍</a><br><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">Next主题个性化配置教程</a><br><a href="http://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="noopener">hexo生成博文插入图片</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hexo支持各种主题风格，默认使用Landscape主题，本章我们介绍如何使用Next主题美化我们的博客&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Hexo中有两份主要的配置文件，其名称都是_config.yml。 其中，一份位于站点根目录下，主要包含Hexo本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。&lt;br&gt;为了描述方便，在以下说明中，将前者称为&lt;strong&gt;站点配置文件&lt;/strong&gt;， 后者称为&lt;strong&gt;主题配置文件&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://wfwblog.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="http://wfwblog.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="http://wfwblog.cn/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建自己的博客（一）</title>
    <link href="http://wfwblog.cn/2018/02/23/Hexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://wfwblog.cn/2018/02/23/Hexo-Github搭建自己的博客（一）/</id>
    <published>2018-02-23T07:41:49.000Z</published>
    <updated>2018-02-26T01:56:18.714Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在查阅资料时，我发现有些人的博客风格简洁而清晰，很喜欢，因此学习基于Hexo+GitHub搭建了一套自己的博客系统，记录如下</p></blockquote><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>主要完成以下工作：</p><ul><li>安装Git</li><li>安装node.js</li><li>安装Hexo</li></ul><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ol><li><a href="https://github.com/git-for-windows/git/tags" target="_blank" rel="noopener">下载Git</a><br>我使用的v1.9.5，网上说高版本会有问题，未验证</li><li>安装<br>注意在步骤2中，选择配置Git环境变量的选项，即：Use Git from the Windows Command Prompt</li><li>验证<br>在cmd下，执行命令<code>git --version</code></li></ol><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><ol><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载node.js</a><br>我使用的v6.3.1</li><li>安装</li><li>验证<br>在cmd下，执行命令<code>node -v</code></li></ol><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>使用npm命令安装</p><ol><li>新建Hexo文件夹，进入Hexo，任意位置点击鼠标右键，选择Git Bash（已经安装Git），步骤2和步骤3命令均在Git bash中执行</li><li>使用淘宝npm镜像：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>（需要等待一段时间）</li><li>安装hexo：<code>cnpm install -g hexo-cli</code></li><li>验证：cmd下，执行命令<code>hexo -v</code></li></ol><h2 id="运行Hexo"><a href="#运行Hexo" class="headerlink" title="运行Hexo"></a>运行Hexo</h2><p>Git Bash命令界面中，执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">cnpm install</span><br><span class="line">hexo server -p 4001</span><br></pre></td></tr></table></figure></p><p>注意：hexo默认使用4000端口，但是如果4000端口被占用，则会一直没有响应，因此在启动的时候我指定hexo使用4001端口</p><p>浏览器中输入<a href="http://localhost:4001" target="_blank" rel="noopener">http://localhost:4001</a><br>看到如下页面表明你已经成功了<br><img src="/2018/02/23/Hexo-Github搭建自己的博客（一）/helloworldblog.png" alt="helloworld"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在查阅资料时，我发现有些人的博客风格简洁而清晰，很喜欢，因此学习基于Hexo+GitHub搭建了一套自己的博客系统，记录如下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;header
      
    
    </summary>
    
      <category term="工具" scheme="http://wfwblog.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="http://wfwblog.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
