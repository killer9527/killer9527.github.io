<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Siri咔咔</title>
  
  <subtitle>学而时习之</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wfwblog.cn/"/>
  <updated>2018-03-15T14:27:15.112Z</updated>
  <id>http://wfwblog.cn/</id>
  
  <author>
    <name>siri-kk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot系列（二）——集成Swagger</title>
    <link href="http://wfwblog.cn/2018/03/15/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%9B%86%E6%88%90Swagger/"/>
    <id>http://wfwblog.cn/2018/03/15/SpringBoot系列（二）——集成Swagger/</id>
    <published>2018-03-15T13:43:40.000Z</published>
    <updated>2018-03-15T14:27:15.112Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>现在开发项目很多都采用前后端分离的模式，后端提供Restful接口，前端进行对接。提供详细的接口说明问题可以简化前后端对接步骤，提高工作效率，而Swagger为我们提供了自动生成接口说明文档的功能，且提供了可视化ui，非常方便。本文介绍如何在SpringBoot中集成Swagger及相关的优化配置。</p></blockquote><h2 id="引入Swagger"><a href="#引入Swagger" class="headerlink" title="引入Swagger"></a>引入Swagger</h2><ol><li><p>pom.xml文件添加第三方jar包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加配置文件<br>在包config下，新建文件<code>SwaggerConfig.java</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Docket restfulApi()&#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .genericModelSubstitutes(DeferredResult.class)</span><br><span class="line">                .useDefaultResponseMessages(true)</span><br><span class="line">                .forCodeGeneration(true)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.wfw.controller&quot;))</span><br><span class="line">                .build().globalOperationParameters(GetHeader())</span><br><span class="line">                .apiInfo(initApiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private List&lt;Parameter&gt; GetHeader() &#123;</span><br><span class="line">        ParameterBuilder token = new ParameterBuilder();</span><br><span class="line">        List&lt;Parameter&gt; parameters = new ArrayList&lt;&gt;();</span><br><span class="line">        token.name(&quot;X-Request-Token&quot;).description(&quot;Token&quot;).modelRef(new ModelRef(&quot;string&quot;)).parameterType(&quot;header&quot;).required(false).build();</span><br><span class="line">        parameters.add(token.build());</span><br><span class="line">        return parameters;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ApiInfo initApiInfo() &#123;</span><br><span class="line">        ApiInfo apiInfo = new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;SpringBoot Demo后端WebAPI&quot;)</span><br><span class="line">                .description(initContextInfo())</span><br><span class="line">                .version(&quot;1.0&quot;)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        return apiInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String initContextInfo() &#123;</span><br><span class="line">        StringBuffer sb = new StringBuffer();</span><br><span class="line">        sb.append(&quot;REST API 设计在细节上有很多自己独特的需要注意的技巧，并且对开发人员在构架设计能力上比传统 API 有着更高的要求。&quot;).append(&quot;&lt;br/&gt;&quot;)</span><br><span class="line">                .append(&quot;以下是本项目的API文档&quot;);</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>@Configuration表明该类为IOC容器的配置类。且该配置类为Swagger中每个接口的header提供了一个名为<code>X-Request-Token</code>的参数，便于传递token参数。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们介绍常用的注解，详细使用说明见<strong>参考文章1</strong></p><ul><li><p>在Controller上使用@Api注释该Controller的相关信息，例如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Api(value = &quot;GreetingController&quot;, description = &quot;GreetingController描述&quot;)</span><br><span class="line">public class GreetingController extends BaseController &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在接口方法上使用@ApiOperation注释该接口的说明信息，例如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = &quot;使用Get方法greeting&quot;)</span><br><span class="line">    public GreetingResponseVO greetingByGet(@RequestParam(value=&quot;name&quot;, defaultValue=&quot;World&quot;) String name)&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用@ApiModel和@ApiModelProperty对数据模型结构进行说明，例如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@ApiModel(value = &quot;GreetingResponseVO&quot;, description = &quot;Greeting响应&quot;)</span><br><span class="line">public class GreetingResponseVO extends BaseResponseVO &#123;</span><br><span class="line">    @ApiModelProperty(value = &quot;id&quot;)</span><br><span class="line">    private long id;</span><br><span class="line">    @ApiModelProperty(value = &quot;内容&quot;)</span><br><span class="line">    private String content;</span><br><span class="line"></span><br><span class="line">    public long getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(long id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getContent() &#123;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setContent(String content) &#123;</span><br><span class="line">        this.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动服务，浏览器中：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></p></li></ul><h2 id="解决Swagger参数无法传输换行字符串的问题"><a href="#解决Swagger参数无法传输换行字符串的问题" class="headerlink" title="解决Swagger参数无法传输换行字符串的问题"></a>解决Swagger参数无法传输换行字符串的问题</h2><p>如果直接拷贝了一长串换行文本传入接口参数中，会提示如下错误：</p><blockquote><p>org.codehaus.jackson.JsonParseException: Illegal unquoted character ((CTRL-CHAR, code 9)): has to be escaped using backslash to be included in string value<br>at [Source: java.io.StringReader@10cfc2e3; line: 1, column: 2461]<br>这是因为传输的json参数中含有转义字符，而框架使用jackson未对其进行转换。</p></blockquote><p>解决方法：</p><ol><li><p>pom.xml引入第三方jar包</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.15&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>包config中添加配置类<code>JsonConfig</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class JsonConfig implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class="line">        FastJsonHttpMessageConverter fastConverter = new FastJsonHttpMessageConverter();</span><br><span class="line">        FastJsonConfig fastJsonConfig = new FastJsonConfig();</span><br><span class="line"></span><br><span class="line">        fastJsonConfig.setSerializerFeatures(</span><br><span class="line">                SerializerFeature.PrettyFormat</span><br><span class="line">        );</span><br><span class="line">        fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line"></span><br><span class="line">        converters.add(fastConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.jianshu.com/p/12f4394462d5" target="_blank" rel="noopener">swagger常用注解说明</a></li><li><a href="http://blog.csdn.net/f429629227/article/details/74506212" target="_blank" rel="noopener">springboot接收JSON时发生转义字符绑定对象失败</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;现在开发项目很多都采用前后端分离的模式，后端提供Restful接口，前端进行对接。提供详细的接口说明问题可以简化前后端对接步骤，提高工作效率，而Swagger为我们提供了自动生成接口说明文档的功能，且提供了可视化ui，非常方便。本文介绍如何在Spr
      
    
    </summary>
    
      <category term="微服务" scheme="http://wfwblog.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringBoot" scheme="http://wfwblog.cn/tags/SpringBoot/"/>
    
      <category term="微服务" scheme="http://wfwblog.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot系列（一）——搭建SpringBoot框架</title>
    <link href="http://wfwblog.cn/2018/03/12/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BASpringBoot%E6%A1%86%E6%9E%B6/"/>
    <id>http://wfwblog.cn/2018/03/12/SpringBoot系列（一）——搭建SpringBoot框架/</id>
    <published>2018-03-12T14:22:02.000Z</published>
    <updated>2018-03-13T14:16:12.771Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SpringBoot可以使你快速构建基于Spring的应用服务，它集成了Spring平台和第三方库，功能可插拔，将很多配置做了默认处理（习惯优于配置），只需要很少的Spring配置。本文对SpringBoot做简要介绍，并基于SpringBoot快速构建Web服务。</p></blockquote><h2 id="一、SpringBoot特点"><a href="#一、SpringBoot特点" class="headerlink" title="一、SpringBoot特点"></a>一、SpringBoot特点</h2><ul><li>快速构建独立运行的Spring服务</li><li>内嵌tomcat，无需部署war包</li><li>提供<code>spring-boot-starter-*</code>的POMs简化maven配置</li><li>自动配置Spring</li></ul><h2 id="二、快速搭建Web服务"><a href="#二、快速搭建Web服务" class="headerlink" title="二、快速搭建Web服务"></a>二、快速搭建Web服务</h2><p>环境配置：开发工具为Intellij IDEA，Java8，Maven3.5</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>File &gt;&gt; New &gt;&gt; Project &gt;&gt; Spring Initializer<br>选择next，注意Type选择<code>Maven Project(Generate a maven based project archive)</code><br>选择next，SpringBoot版本选择2.0.0，勾选Web<br>然后next，Finish即完成构建。</p><p>可以看到项目是一个空框架，基本没有代码，主要包含以下内容：</p><ul><li>SpringBootDemoSingleApplication.java：一个带有main方法的类，启动应用程序的入口</li><li>SpringBootDemoSingleApplicationTests.java：一个空的Junit测试类，它加载了一个使用Spring Boot字典配置功能的Spring应用程序上下文</li><li>application.properties：SpringBoot的配置文件，如果需要修改SpringBoot的默认配置，则需要在此文件中进行修改</li><li>pom.xml：maven配置文件，用于添加引用包</li></ul><h3 id="配置pom-xml"><a href="#配置pom-xml" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.wfw&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springbootdemosingle&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;SpringBootDemoSingle&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;SpringBoot-demo&lt;/finalName&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;skipTests&gt;true&lt;/skipTests&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>自己稍微做了一些修改，构建jar包过程中忽略单元测试。</p><ol><li><p><code>parent</code>配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   &lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure><p> 即SpringBoot父级依赖，它是一个特殊的starter，用来指定其他starter的Maven默认依赖版本。可以去本地maven仓库的子目录<code>repository\org\springframework\boot\spring-boot-dependencies\2.0.0.RELEASE</code>下查看<code>spring-boot-dependencies-2.0.0.RELEASE.pom</code>文件，该POMs文件使用<code>properties</code>和<code>dependencyManagement</code>控制第三方库的默认引用版本[^参考文章9]。如果不想使用默认版本，可以在自己项目的POMs文件中指定相应jar包的版本号</p></li><li><code>spring-boot-starter-xxx</code>起步依赖<br>SpringBoot提供了很多”开箱即用“的依赖模块，都是以spring-boot-starter-xxx作为命名的。起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。很多起步依赖的命名都暗示了它们提供的某种或者某类功能。</li><li><p>SpringBoot Maven插件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p> 把项目打包成一个可执行的超级JAR（uber-JAR）,包括把应用程序的所有依赖打入JAR文件内，并为JAR添加一个描述文件，其中的内容能让你用java -jar来运行应用程序。</p></li></ol><h3 id="构建Restful风格接口"><a href="#构建Restful风格接口" class="headerlink" title="构建Restful风格接口"></a>构建Restful风格接口</h3><ol><li><p>创建如下结构的目录<br><img src="/2018/03/12/SpringBoot系列（一）——搭建SpringBoot框架/category.png" alt="category.png"><br>各目录结构说明：</p><ul><li>config: 用于写配置</li><li>controller：Controller层</li><li>dao：数据访问层相关接口定义</li><li>dto：数据模型</li><li>entity：ORM映射模型</li><li>filter：过滤器</li><li>mapper：ORM映射文件</li><li>service：业务逻辑层接口定义及实现</li><li>vo：数据展示模型</li></ul></li><li><p>创建名为<code>controller</code>的package，添加<code>GreetingController</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(path = &quot;/greeting&quot;)</span><br><span class="line">@Api(value = &quot;GreetingController&quot;, description = &quot;GreetingController描述&quot;)</span><br><span class="line">public class GreetingController extends BaseController &#123;</span><br><span class="line">    private static final String template = &quot;Hello, %s!&quot;;</span><br><span class="line">    private final AtomicLong counter = new AtomicLong();</span><br><span class="line"></span><br><span class="line">    @RequestMapping(path=&quot;greetingByGet&quot;, method= RequestMethod.GET)</span><br><span class="line">    @ApiOperation(value = &quot;使用Get方法greeting&quot;)</span><br><span class="line">    public GreetingResponseVO greetingByGet(@RequestParam(value=&quot;name&quot;, defaultValue=&quot;World&quot;) String name)&#123;</span><br><span class="line">        GreetingResponseVO response = new GreetingResponseVO();</span><br><span class="line">        response.setId(counter.incrementAndGet());</span><br><span class="line">        response.setContent(String.format(template, name));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(path = &quot;greetingByPost&quot;, method = RequestMethod.POST)</span><br><span class="line">    @ApiOperation(value = &quot;使用Post方法greeting&quot;)</span><br><span class="line">    public GreetingResponseVO greetingByPost(@RequestBody GreetingRequestVO request)&#123;</span><br><span class="line">        GreetingResponseVO response = new GreetingResponseVO();</span><br><span class="line">        response.setId(counter.incrementAndGet());</span><br><span class="line">        response.setContent(String.format(template, request.getName()));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 相关注解说明：</p><ul><li>@RequestMapping：指定http的路由</li><li>@RestController：指定该Controller下所有的Post方法响应以json格式返回，它是@Controller和@ResponseBody的组合</li><li>@RequestBody：以json格式接收http参数</li><li>@RequestParam：从get方法的url中获取参数</li><li>@Api和@ApiOperation：Swagger的相关注解</li></ul></li><li><p>运行<br>使用SpringBoot内置的tomcat运行jar包的方式，通过扫描<code>SpringBootDemoSingleApplication</code>中的<code>main</code>方法为入口启动程序。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringBootDemoSingleApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringBootDemoSingleApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> @SpringBootApplication非常方便地提供了以下注解：</p><ul><li>@Configuration：将<code>SpringBootDemoSingleApplication</code>标记为应用程序上下文的bean定义类</li><li>@EnableAutoConfiguration：告诉SpringBoot在启动时根据classpath配置，其他beans和各种属性配置添加beans</li><li>@EnableWebMvc：SpringBoot在classpath中检测到<code>spring-webmvc</code>时自动添加了@EnableWebMvc，它将程序标记为Web服务并执行关键步骤，比如设置<code>DispatcherServlet</code></li><li><p>@ComponentScan：告诉Spring寻找其他组件，配置和hello中的服务，使其寻找Controller。将标注了元信息Annotation的bean定义类批量采集到Spring的IOC容器中，如果不指定其basePackages属性，则Spring框架默认会从声明@ComponentScan所在类的package进行扫描，即<code>com.wfw</code></p><p>使用maven编译：<code>mvnw clean package</code><br>执行jar包：java -jar target/SpringBoot-demo.jar</p><p>或者直接在Intellij IEEA中启动<br><img src="/2018/03/12/SpringBoot系列（一）——搭建SpringBoot框架/start.png" alt="start.png"></p></li></ul></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://tengj.top/2017/04/24/springboot0/" target="_blank" rel="noopener">Spring Boot干货系列总纲</a></li><li><a href="http://blog.didispace.com/categories/Spring-Boot/page/4/" target="_blank" rel="noopener">程序猿DD-Spring Boot系列</a></li><li><a href="http://www.ityouknow.com/spring-boot" target="_blank" rel="noopener">纯洁的微笑-Sping Boot系列文章</a></li><li><a href="http://blog.csdn.net/column/details/spring-boot.html" target="_blank" rel="noopener">CSDN-小单博客Spring Boot专栏</a></li><li><a href="http://blog.720ui.com/columns/springboot_all/" target="_blank" rel="noopener">梁桂钊的博客-Spring Boot 揭秘与实战</a></li><li><a href="http://412887952-qq-com.iteye.com/category/356333" target="_blank" rel="noopener">林祥纤博客系列-从零开始学Spring Boot</a></li><li><a href="http://www.jianshu.com/p/7e2e5e7b32ab" target="_blank" rel="noopener">杜琪关于Spring Boot的博客集合</a></li><li><a href="http://www.bysocket.com/?page_id=1639" target="_blank" rel="noopener">泥瓦匠BYSocket的Spring Boot系列</a></li><li><a href="http://blog.csdn.net/liutengteng130/article/details/46991829" target="_blank" rel="noopener">Maven中dependencies与dependencyManagement的区别</a></li></ol><p>[^]: </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;SpringBoot可以使你快速构建基于Spring的应用服务，它集成了Spring平台和第三方库，功能可插拔，将很多配置做了默认处理（习惯优于配置），只需要很少的Spring配置。本文对SpringBoot做简要介绍，并基于SpringBoot快
      
    
    </summary>
    
      <category term="微服务" scheme="http://wfwblog.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringBoot" scheme="http://wfwblog.cn/tags/SpringBoot/"/>
    
      <category term="微服务" scheme="http://wfwblog.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+Github持续集成</title>
    <link href="http://wfwblog.cn/2018/02/28/Jenkins-Github%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>http://wfwblog.cn/2018/02/28/Jenkins-Github持续集成/</id>
    <published>2018-02-28T06:05:37.000Z</published>
    <updated>2018-03-05T14:36:10.626Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Github作为代码仓储可以控制代码的版本迭代，而Jenkins是一种持续集成工具，可用于代码的编译和发布，当push代码到GitHub仓库之后，我们希望能够自动触发Jenkins从GitHub拉取代码，然后进行编译和发布。</p></blockquote><h2 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h2><ol><li>安装java环境<code>yum install java</code></li><li>下载Jenkins：<code>wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war</code>并修改权限<code>chmod +x jenkins.war</code></li><li><p>编写启动脚本<code>jenkins_start.sh</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">NAME=&quot;jenkins.war&quot;</span><br><span class="line">echo $NAME</span><br><span class="line">ID=`ps -ef | grep &quot;$NAME&quot; | grep -v &quot;grep&quot; | awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">echo $ID</span><br><span class="line">echo &quot;---------------&quot;</span><br><span class="line">for id in $ID</span><br><span class="line">do</span><br><span class="line">kill -9 $id</span><br><span class="line">echo &quot;killed $id&quot;</span><br><span class="line">done</span><br><span class="line">echo &quot;---------------&quot;</span><br><span class="line">nohup java -jar jenkins.war --httpPort=8008 &amp;</span><br></pre></td></tr></table></figure><p> 添加启动权限：<code>chmod +x jenkins_start.sh</code></p></li><li><p>开启8008端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8008/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>设置成开机启动（未成功。。）</p><ul><li>修改<code>/etc/rc.d/rc.local</code>文件，添加启动脚本的目录</li><li><code>chmod +x /etc/rc.d/rc.local</code></li></ul></li></ol><h2 id="集成GitHub"><a href="#集成GitHub" class="headerlink" title="集成GitHub"></a>集成GitHub</h2><h3 id="安装GitHub插件"><a href="#安装GitHub插件" class="headerlink" title="安装GitHub插件"></a>安装GitHub插件</h3><p>系统管理-&gt;管理插件-&gt;可选插件，过滤条件“github plugin”，选中“github plugin”，直接安装。可能已经安装过了</p><h3 id="配置GitHub插件"><a href="#配置GitHub插件" class="headerlink" title="配置GitHub插件"></a>配置GitHub插件</h3><p>系统管理-&gt;系统设置-&gt;GitHub-&gt;Add GitHub Server</p><ol><li>Github中生成<code>access token</code><br>Settings &gt;&gt; Developer settings &gt;&gt; Personal access tokens<br>需要勾选的scopes：<code>repo</code>和<code>admin:repo_hook</code></li><li>添加Credentials<br><img src="/2018/02/28/Jenkins-Github持续集成/addCredentials.png" alt="addCredentials.png"><br>kind选择<code>Secret text</code>，并填写Secret<br><img src="/2018/02/28/Jenkins-Github持续集成/token.png" alt="token"></li><li>使用<code>Test connection</code>测试<br><img src="/2018/02/28/Jenkins-Github持续集成/test.png" alt="test.png"></li></ol><h3 id="创建一个自由风格任务"><a href="#创建一个自由风格任务" class="headerlink" title="创建一个自由风格任务"></a>创建一个自由风格任务</h3><ol><li>创建新任务，选择自由风格的任务</li><li>选择GitHub project，填写Project url</li><li>源码管理，选择Git，Add Credentials（使用GitHub的用户名和密码），选择<code>githubweb</code>源码浏览器，并填写项目url</li></ol><h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><p>勾选<code>GitHub hook trigger for GITScm polling</code></p><h3 id="使用shell将blog自动发布到指定目录（只能在Jenkins所在服务器）"><a href="#使用shell将blog自动发布到指定目录（只能在Jenkins所在服务器）" class="headerlink" title="使用shell将blog自动发布到指定目录（只能在Jenkins所在服务器）"></a>使用shell将blog自动发布到指定目录（只能在Jenkins所在服务器）</h3><p>构建 &gt;&gt; 增加构建步骤 &gt;&gt; Execute shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo $JENKINS_HOME</span><br><span class="line">cd $JENKINS_HOME</span><br><span class="line">cd workspace</span><br><span class="line">ls</span><br><span class="line">cp -rf hexo-blog /data/nginx_github</span><br><span class="line">echo &quot;deploy success!&quot;</span><br></pre></td></tr></table></figure></p><h3 id="配置GitHub仓库的Webhooks"><a href="#配置GitHub仓库的Webhooks" class="headerlink" title="配置GitHub仓库的Webhooks"></a>配置GitHub仓库的Webhooks</h3><p>进入要监控的仓库，Settings &gt;&gt; Webhooks，<code>Add webhook</code></p><p>完成以上步骤之后，如果对被监控的仓库有push操作，则会触发Jenkins从git上拉取代码并进行build。则程序会发布到指定目录<code>/data/nginx_github</code>，然后就可以通过配置nginx访问了。</p><h2 id="Maven编译并远程发布"><a href="#Maven编译并远程发布" class="headerlink" title="Maven编译并远程发布"></a>Maven编译并远程发布</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ol><li><p>Jenkins服务器和目标计算机上配置SSH（root账号登录）<br>id_rsa.pub里面的内容是需要附加到你要远程连接的服务器上的用户的家目录下的.ssh目录下的authorized_keys的。在认证时，客户端会使用私钥对服务器发来的一些数据进行加密。而服务器端使用公钥钥解密，如果成功就直接认证通过。</p><ul><li>生成ssh的公钥和私钥：<code>ssh-keygen -t rsa</code>，会提示输入：密钥存放位置（直接回车，默认在<code>/root/.ssh/</code>目录）、密码短语、重复密码短语。完成后在<code>/root/.ssh/</code>目录下生成了2个文件：<code>id_rsa</code>为私钥，<code>id_rsa.pub</code>为公钥</li><li>导入公钥：<code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></li><li><p>设置正确的文件和文件夹权限</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 0600  ~/.ssh</span><br></pre></td></tr></table></figure></li><li><p>修改SSH配置文件，支持使用证书登录：<code>vim /etc/ssh/sshd_config</code>，修改对应项的配置</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">StrictModes no</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>重启ssh服务：<code>systemctl restart sshd.service</code></p></li><li>测试：ssh localhost</li></ul></li><li>将Jenkins服务器上的公钥内容添加到目标计算机的authorized_keys中。</li><li>安装Publish Over SSH插件并配置<ul><li>系统管理 &gt;&gt; 管理插件 &gt;&gt; 可选插件，直接安装</li><li>系统管理 &gt;&gt; 系统配置，找到Publish over SSH的配置<ul><li>Jenkins SSH Key配置<ul><li>Passphrase：生成密钥时的密码</li><li>Path to key：ssh的私钥路径，一般为<code>/root/.ssh/id_rsa</code></li><li>Key：私钥内容（如果指定了私钥路径，则可为空）</li></ul></li><li>SSH Servers配置<ul><li>Name：要部署的目标计算机名称（可任意指定）</li><li>Hostname：目标计算机地址</li><li>Username：目标计算机的登录用户名</li><li>Remote Directory：要发布到的目录<br>目的是让Jenkins所在服务器和程序要部署的服务器之间可以通过ssh进行免密码访问。</li></ul></li></ul></li></ul></li><li>安装Maven Integration插件和配置<br>只有安装了该插件，新建任务的时候才可以选择<code>构建一个maven项目</code><br>系统管理 &gt;&gt; 全局工具配置，<strong>安装和配置jdk和maven</strong></li></ol><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>选择构建maven项目</p><ol><li>源码管理，选择Git，填写<code>Repository URL</code>，选择<code>Credentials</code>，指定Branch</li><li>构建触发器，选择<code>GitHub hook trigger for GITScm polling</code></li><li>Build，Root POM：<code>SpringBootDemoSingle/pom.xml</code></li><li><p>Post Steps，选择<code>Run only if build succeeds</code>，Add post-build step选择<code>Send files or execute commands over SSH</code>，配置如图<br> <img src="/2018/02/28/Jenkins-Github持续集成/sshpublish.png" alt="sshpublish.png"><br> start.sh的内容为：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">NAME=SprintbootDemo</span><br><span class="line">echo $NAME</span><br><span class="line">ID=`ps -ef | grep &quot;$NAME&quot; | grep -v &quot;grep&quot; | awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">echo $ID</span><br><span class="line">echo &quot;---------------&quot;</span><br><span class="line">for id in $ID</span><br><span class="line">do</span><br><span class="line">kill -9 $id</span><br><span class="line">echo &quot;killed $id&quot;</span><br><span class="line">done</span><br><span class="line">echo &quot;---------------&quot;</span><br><span class="line">if [ -f &quot;SpringBoot-demo-start.jar&quot; ]; then</span><br><span class="line">rm -f SpringBoot-demo-start.jar</span><br><span class="line">mv SpringBoot-demo.jar SpringBoot-demo-start.jar</span><br><span class="line">fi</span><br><span class="line">chmod +x SpringBoot-demo-start.jar</span><br><span class="line">nohup java -jar SpringBoot-demo-start.jar --name=$NAME --server.port=8088 &amp;</span><br></pre></td></tr></table></figure></li><li><p>验证：<code>curl http://localhost:8080/swagger-ui.html</code></p></li></ol><h2 id="管理节点"><a href="#管理节点" class="headerlink" title="管理节点"></a>管理节点</h2><p>当Jenkins需要处理多个任务时，进行分布式处理很有必要。比如可以部署一个专用于发布java项目的节点，一个专用于发布.net项目的节点或者一个专用于发布node项目的节点。</p><ol><li>创建节点<br>系统管理 &gt;&gt; 管理节点 &gt;&gt; 新建节点，指定节点名称<code>node1</code>，选中<code>固定代理</code>，OK。</li><li>节点配置，如下图<br><img src="/2018/02/28/Jenkins-Github持续集成/slave-node.png" alt="slave-node.png"></li><li>结果如图<br><img src="/2018/02/28/Jenkins-Github持续集成/nodes.png" alt="nodes.png"></li><li>使用<br>在创建job时，在general中通过标签选择使用的节点，如图<br><img src="/2018/02/28/Jenkins-Github持续集成/nodeuse.png" alt="nodeuse.png"></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://wiki.jenkins.io/display/JENKINS/Github%20Plugin" target="_blank" rel="noopener">Github Plugin</a></li><li><a href="https://www.jianshu.com/p/b2ed4d23a3a9" target="_blank" rel="noopener">Jenkins+Github持续集成</a></li><li><a href="http://blog.51cto.com/jiangzm/1878941" target="_blank" rel="noopener">Jenkins+GIT+Maven+Shell 实现项目一键发布</a></li><li><a href="http://blog.51cto.com/jiangzm/1881907" target="_blank" rel="noopener">jenkins gulp 持续集成环境搭建</a></li><li><a href="https://segmentfault.com/a/1190000002895521" target="_blank" rel="noopener">Jenkins+Git+Maven+Shell+Tomcat持续集成经典教程</a></li><li><a href="https://www.jianshu.com/p/b524b151d35f" target="_blank" rel="noopener">Jenkins使用简易教程</a></li><li><a href="https://my.oschina.net/liting/blog/600098" target="_blank" rel="noopener">CentOS7 SSH使用证书登录</a></li><li><a href="http://blog.csdn.net/qq1436248562/article/details/45854779" target="_blank" rel="noopener">linux下ssh和Xshell通过密钥登陆总结</a></li><li><a href="http://www.javatang.com/archives/2017/01/13/23291453.html" target="_blank" rel="noopener">使用Jenkins实现自动构建Maven项目</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Github作为代码仓储可以控制代码的版本迭代，而Jenkins是一种持续集成工具，可用于代码的编译和发布，当push代码到GitHub仓库之后，我们希望能够自动触发Jenkins从GitHub拉取代码，然后进行编译和发布。&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
      <category term="CI" scheme="http://wfwblog.cn/categories/CI/"/>
    
    
      <category term="Jenkins" scheme="http://wfwblog.cn/tags/Jenkins/"/>
    
      <category term="Github" scheme="http://wfwblog.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Nginx安装与配置</title>
    <link href="http://wfwblog.cn/2018/02/26/Nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://wfwblog.cn/2018/02/26/Nginx安装与配置/</id>
    <published>2018-02-26T07:27:44.000Z</published>
    <updated>2018-02-28T03:52:59.502Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nginx是一个Http服务器，与传统的服务器不同，Nginx不依赖多线程处理请求，它采用高扩展性的事件驱动型的架构，性能好，稳定，配置简单且资源消耗小。本文介绍nginx的安装与配置。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装环境：CentOS7</p><ol><li><p>安装Nginx仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure></li><li><p>安装Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure></li><li><p>启动Nginx</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><p> 注意nginx默认使用80端口启动，如果启动失败，可以查看80端口是否被占用，如果占用，则杀死进程</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp | grep 80</span><br><span class="line">ps pid</span><br><span class="line">kill pid</span><br></pre></td></tr></table></figure><p> 其中pid为进程id</p></li><li><p>如果有防火墙，需要运行如下命令运行http和https访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=http </span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://server_domain_name_or_IP/</span><br></pre></td></tr></table></figure><p> <img src="/2018/02/26/Nginx安装与配置/nginxtest.png" alt="nginxtest.png"></p></li><li><p>配置成开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></li><li><p>重新加载配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li></ol><h2 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h2><p>Nginx有一个主进程（master process）和很多工作进程（worker processes）。主进程用来读取配置并维护工作进程，工作进程处理请求。</p><h2 id="Nginx配置介绍"><a href="#Nginx配置介绍" class="headerlink" title="Nginx配置介绍"></a>Nginx配置介绍</h2><h3 id="配置文件的结构及指令介绍"><a href="#配置文件的结构及指令介绍" class="headerlink" title="配置文件的结构及指令介绍"></a>配置文件的结构及指令介绍</h3><p>Nginx有各种模块组成，而模块则由配置文件中的各种指令（directives）控制。<code>Directives</code>又分为<code>simple directives</code>和<code>block directives</code>。<br><code>simple directive</code>结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name parameter;</span><br></pre></td></tr></table></figure></p><p><code>block directive</code>结构与<code>simple directive</code>类似，不过不是以<code>;</code>结尾，而是以<code>{}</code>结尾，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /documents/ &#123;</span><br><span class="line">    [ configuration C ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果<code>{}</code>中有其他<code>directives</code>，我们称之为<code>context</code>。<br><code>#</code>后面为注释</p><ul><li><p><strong>location——根据request URI设置配置</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法:location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">location @name &#123; ... &#125;</span><br><span class="line">默认值:—</span><br><span class="line">Context:server, location</span><br></pre></td></tr></table></figure><ul><li><code>~*</code>（大小写不敏感 ）或<code>~</code>（大小写敏感）——正则匹配</li><li><code>^~</code>或无修饰——前缀匹配</li><li><p><code>=</code>——精确匹配<br>匹配过程：首先进行精确匹配，匹配到此停止；然后使用uri进行前缀匹配，匹配出最长的的location，并记录，假设为location_prefix_longest，如果前缀匹配用<code>^~</code>修饰，则匹配到此停止；再然后进行正则匹配检查，假设匹配到的第一个location为location_reg_first，则使用location_reg_first中的配置，如果没有匹配到，则使用location_prefix_longest中的配置。<br>举例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">    [ configuration A ]</span><br><span class="line">&#125;</span><br><span class="line">location / &#123;</span><br><span class="line">    [ configuration B ]</span><br><span class="line">&#125;</span><br><span class="line">location /documents/ &#123;</span><br><span class="line">    [ configuration C ]</span><br><span class="line">&#125;</span><br><span class="line">location ^~ /images/ &#123;</span><br><span class="line">    [ configuration D ]</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">    [ configuration E ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/</code>请求匹配configuration A，<code>/index.html</code>匹配configuration B，在<code>/documents/document.html</code>匹配configuration C，<code>/images/1.gif</code>匹配configuration D，<code>/documents/1.jpg</code>匹配configuration E。<br><code>@</code>定义了一个命名location，它用于请求重定向。不能嵌套且不能包含嵌套locations。</p></li></ul></li></ul><h3 id="默认服务器根目录"><a href="#默认服务器根目录" class="headerlink" title="默认服务器根目录"></a>默认服务器根目录</h3><p>默认服务器根目录为<code>/usr/share/nginx/html</code>，我们在安装nginx步骤进行验证时看到的页面所相关的文件就放置在该目录下，默认服务的配置文件为<code>/etc/nginx/nginx.conf.default</code></p><h3 id="Nginx全局配置文件"><a href="#Nginx全局配置文件" class="headerlink" title="Nginx全局配置文件"></a>Nginx全局配置文件</h3><p>Nginx的全局配置文件为<code>/etc/nginx/nginx.conf</code>，注意它的内容中有一条包含配置<code>include /etc/nginx/conf.d/*.conf;</code>，表明它将<code>/etc/nginx/conf.d</code>目录下所有以<code>.conf</code>结尾的配置文件包含进来，实现配置的扩展。</p><h3 id="在-etc-nginx-conf-d-中添加配置"><a href="#在-etc-nginx-conf-d-中添加配置" class="headerlink" title="在/etc/nginx/conf.d/中添加配置"></a>在/etc/nginx/conf.d/中添加配置</h3><ol><li><p><a href="https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/" target="_blank" rel="noopener">避免使用if指令</a><br> if指令是为rewrite模块设计的（location模块中只有rewrite或return），其他应用不推荐使用。例如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if ($request_method = POST ) &#123;</span><br><span class="line">  return 405;</span><br><span class="line">&#125;</span><br><span class="line">if ($args ~ post=140)&#123;</span><br><span class="line">  rewrite ^ http://example.com/ permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 使用<code>try_files</code>判断文件是否存在。</p></li><li><p>访问静态内容</p><ul><li>创建目录/data/nginx_www，并添加index.html文件，创建/data/nginx_image，并添加图片<br>songhuiqiao.jpeg</li><li><p><code>cd /etc/nginx/conf.d</code>并创建配置文件<code>static_content.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    server &#123;</span><br><span class="line">    listen 8001;</span><br><span class="line">    server_name static_content;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /data/nginx_www;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /nginx_images/ &#123;</span><br><span class="line">        root /data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新加载nginx配置<code>nginx -s reload</code></p></li><li>开放8001端口<code>firewall-cmd --zone=public --add-port=8001/tcp --permanent</code></li><li>重启防火墙<code>systemctl restart firewalld</code></li><li>访问<code>http://ip:8001/</code>和<code>http://ip:8001/nginx_images/songhuiqiao.jpeg</code>，则分别访问的是<code>/data/nginx_www/index.html</code>静态文件和<code>/data/nginx_images/songhuiqiao.jpeg</code>静态文件</li></ul></li><li><p>配置为代理服务器<br> Nginx收到请求后，将请求转发给被代理的服务器，获取到响应之后返给客户端。</p><ul><li>创建目录/data/nginx_proxied，并添加index.html文件</li><li><p><code>cd /etc/nginx/conf.d</code>并修改配置文件<code>static_content.conf</code>为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    server &#123;</span><br><span class="line">    listen 8001;</span><br><span class="line">    server_name static_content;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /data/nginx_www;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /nginx_images/ &#123;</span><br><span class="line">        root /data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /nginx_proxied/ &#123;</span><br><span class="line">        proxy_pass http://localhost:8002;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即对uri前缀为<code>/nginx_proxied/</code>的请求做代理，被代理地址为<code>http://localhost:8002</code></p></li><li><p>配置被代理服务<br><code>cd /etc/nginx/conf.d</code>并创建配置文件<code>proxied_server.conf</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8002;</span><br><span class="line">    root /data/nginx_proxied;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /nginx_proxied/ &#123;</span><br><span class="line">        root /data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新加载nginx配置文件<code>nginx -s reload</code></p></li><li>访问<code>http:ip:8001/nginx_proxied/</code></li></ul></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7" target="_blank" rel="noopener">how-to-install-nginx-on-centos-7</a></li><li><a href="https://www.nginx.com/resources/wiki/start/#pre-canned-configurations" target="_blank" rel="noopener">Pre-canned Configurations</a></li><li><a href="http://nginx.org/en/docs/beginners_guide.html" target="_blank" rel="noopener">Nginx Beginners’ Guide</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Nginx是一个Http服务器，与传统的服务器不同，Nginx不依赖多线程处理请求，它采用高扩展性的事件驱动型的架构，性能好，稳定，配置简单且资源消耗小。本文介绍nginx的安装与配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装&quot;&gt;
      
    
    </summary>
    
      <category term="服务器" scheme="http://wfwblog.cn/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="nginx" scheme="http://wfwblog.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建自己的博客（三）</title>
    <link href="http://wfwblog.cn/2018/02/24/Hexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://wfwblog.cn/2018/02/24/Hexo-Github搭建自己的博客（三）/</id>
    <published>2018-02-24T09:35:42.000Z</published>
    <updated>2018-02-26T01:56:30.211Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本地搭建好hexo系统后，我们可以将其部署到GitHub上，使用Github Pages访问我们的博客。</p></blockquote><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><ol><li>创建repository<br>在GitHub中New一个repository，注意仓库的名称需要跟我们的GitHub用户名一致（GitHub Pages要求）</li><li>为仓库增加deploy key，否则发布过程会出现发布失败<ul><li>生成本地ssh key，<a href="http://blog.csdn.net/keyboardota/article/details/7603630" target="_blank" rel="noopener">方法</a></li><li>拷贝.ssh/id_rsa.pub文件内的所有内容，进入repository，点击settings，点击Deploy keys，将拷贝的内容Add deploy key</li></ul></li><li>修改站点配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol><p>repo也可以配置为https的形式，但是我在发布过程中总是提示我版本不对，因此改用ssh发布</p><ol><li><p>安装发布插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git  --save</span><br></pre></td></tr></table></figure></li><li><p>发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li><li><p>测试<br>访问<a href="https://yourname.github.io/" target="_blank" rel="noopener">https://yourname.github.io/</a></p></li></ol><h3 id="定制域名"><a href="#定制域名" class="headerlink" title="定制域名"></a>定制域名</h3><p>如果我们想自己申请域名作为自己的博客地址，可以使用GitHub Pages的Custom domain功能。</p><ol><li>申请域名<br>我是在腾讯云上申请的，然后需要配置我们域名的解析<br><img src="/2018/02/24/Hexo-Github搭建自己的博客（三）/dns.png" alt="dns"><br>注意记录类型选择CNAME，记录值填写仓库名称即可，表明是域名绑定域名</li><li>配置GitHub Pages<br>进入repository的Settings，找到GitHub Pages，并配置custom domain<br><img src="/2018/02/24/Hexo-Github搭建自己的博客（三）/githubpages.png" alt="githubpages.png"><br>点击Save后，在Code中会增加CNAME文件，内容即为我们的自定义域名。</li><li>hexo中增加CNAME文件<br>由于每次Deploy后CNAME文件都会被删掉，因此需要在站点目录下的source中新增CNAME文件，内容为自定义域名<br><img src="/2018/02/24/Hexo-Github搭建自己的博客（三）/cname.png" alt="cname.png"></li><li>测试<br>访问自定义域名</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本地搭建好hexo系统后，我们可以将其部署到GitHub上，使用Github Pages访问我们的博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;部署到GitHub&quot;&gt;&lt;a href=&quot;#部署到GitHub&quot; class=&quot;header
      
    
    </summary>
    
      <category term="工具" scheme="http://wfwblog.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="http://wfwblog.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="http://wfwblog.cn/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建自己的博客（二）</title>
    <link href="http://wfwblog.cn/2018/02/23/Hexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://wfwblog.cn/2018/02/23/Hexo-Github搭建自己的博客（二）/</id>
    <published>2018-02-23T10:26:04.000Z</published>
    <updated>2018-02-28T14:42:11.446Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo支持各种主题风格，默认使用Landscape主题，本章我们介绍如何使用Next主题美化我们的博客</p></blockquote><p>在Hexo中有两份主要的配置文件，其名称都是_config.yml。 其中，一份位于站点根目录下，主要包含Hexo本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为<strong>站点配置文件</strong>， 后者称为<strong>主题配置文件</strong>。</p><a id="more"></a><h2 id="更换theme"><a href="#更换theme" class="headerlink" title="更换theme"></a>更换theme</h2><ol><li>下载Next主题<br>Hexo官网可以下载<a href="https://hexo.io/themes/" target="_blank" rel="noopener">各种主题</a>，从中找到<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next主题的地址</a>，直接下载zip</li><li>配置主题<br>将下载的zip文件解压至Hexo/blog/themes下，重命名为hexo-theme-next。</li><li><p>使用主题<br>打开站点配置文件，修改theme配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: hexo-theme-next</span><br></pre></td></tr></table></figure></li><li><p>验证主题<br>Git Bash命令界面下，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo server -p 4001</span><br></pre></td></tr></table></figure></li></ol><p>浏览器中访问<a href="http://localhost:4001" target="_blank" rel="noopener">http://localhost:4001</a><br>出现如下界面则更换主题成功<br><img src="/2018/02/23/Hexo-Github搭建自己的博客（二）/hexohelloworld.png" alt="hexohelloworld"></p><h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><p>Next主题主要通过修改主题配置文件和站点配置文件设定自己的博客。</p><h3 id="选择scheme"><a href="#选择scheme" class="headerlink" title="选择scheme"></a>选择scheme</h3><p>修改主题配置文件，检索Scheme Settings<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure></p><h3 id="设置博客language"><a href="#设置博客language" class="headerlink" title="设置博客language"></a>设置博客language</h3><p>修改站点配置文件，检索language<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure></p><h3 id="设置博客菜单项"><a href="#设置博客菜单项" class="headerlink" title="设置博客菜单项"></a>设置博客菜单项</h3><p>修改主题配置文件，检索Menu Settings<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  archives: /archives/ || archive</span><br></pre></td></tr></table></figure></p><p>菜单内容的设置格式是：item name: link || icon name，我只保留了主页，分类，标签，归档。搜索菜单会通过集成第三方服务实现。<br>需要注意的是，添加categories和tags页面之前，这两个按钮都是无效的，后续会有介绍。</p><h3 id="设置侧栏"><a href="#设置侧栏" class="headerlink" title="设置侧栏"></a>设置侧栏</h3><p>修改主题配置文件，检索position<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  position: left</span><br><span class="line">  display: post</span><br><span class="line">  offset: 12</span><br><span class="line">  b2t: false</span><br><span class="line">  scrollpercent: false</span><br><span class="line">  onmobile: false</span><br></pre></td></tr></table></figure></p><p>我配置的居左显示，在文章页面（拥有目录列表）时显示</p><h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>将头像放置主题目录下的source/uploads/ （目录若不存在则新建uploads）<br>修改主题配置文件，搜索Sidebar Avatar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: /uploads/pic.jpg</span><br></pre></td></tr></table></figure></p><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>NexT坚持将复杂的细节隐藏，提供尽量少并且简便的设置，保持最大限度的易用性。</p><h3 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h3><ol><li><p>安装hexo-generator-feed<br>Git Bash下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件，检索rss</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rss:</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: &apos; &apos;</span><br></pre></td></tr></table></figure></li></ol><h3 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h3><p>只有添加了标签页面，侧栏中我们配置的「标签」菜单才能点击并响应</p><ol><li><p>站点目录下（即blog目录），Git Bash中</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p> 则会在source/tags中新建index.md</p></li><li><p>设置页面类型<br> 修改步骤1创建中的index.md</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2018-02-22 22:18:27</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p> 其中<code>comments: false</code>是去掉标签页面的评论服务（如果集成了评论服务）</p></li><li>文章中的头部添加tags <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo+Github搭建自己的博客（二）</span><br><span class="line">date: 2018-02-23 18:26:04</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">  - Next</span><br></pre></td></tr></table></figure></li></ol><h3 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h3><p>类似于添加标签页面</p><ol><li><p>站点目录下（即blog目录），Git Bash中</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p> 则会在source/categories中新建index.md</p></li><li><p>设置页面类型<br> 修改步骤1创建中的index.md</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2018-02-22 22:37:03</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p> 其中<code>comments: false</code>是去掉分类页面的评论服务（如果集成了评论服务）</p></li><li>文章中的头部添加categories <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo+Github搭建自己的博客（二）</span><br><span class="line">date: 2018-02-23 18:26:04</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">  - Next</span><br><span class="line">categories: 工具</span><br></pre></td></tr></table></figure></li></ol><h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><p>包括：全局字体，标题字体，文章字体，Logo字体和代码字体<br>修改主题配置文件，检索Font Settings<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # 外链字体库地址，例如 //fonts.googleapis.com (默认值)</span><br><span class="line">  # 预览：https://fonts.google.com/</span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  # 全局字体，应用在 body 元素上</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lato</span><br><span class="line">    size: 14</span><br><span class="line"></span><br><span class="line">  # 标题字体 (h1, h2, h3, h4, h5, h6)</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family: Roboto Slab</span><br><span class="line"></span><br><span class="line">  # 文章字体</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family: Microsoft YaHei</span><br><span class="line">    size: 14</span><br><span class="line"></span><br><span class="line">  # Logo 字体</span><br><span class="line">  logo:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lobster Two</span><br><span class="line">    size: 24</span><br><span class="line"></span><br><span class="line">  # 代码字体，应用于 code 以及代码块</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family: Monospaced</span><br><span class="line">    size: 13</span><br></pre></td></tr></table></figure></p><p>这是我的字体配置，<a href="https://fonts.google.com/" target="_blank" rel="noopener">更多字体</a></p><h3 id="侧边栏设置社交链接"><a href="#侧边栏设置社交链接" class="headerlink" title="侧边栏设置社交链接"></a>侧边栏设置社交链接</h3><p>修改主题配置文件，检索social<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/yourname || github</span><br><span class="line">  E-Mail: mailto:youremail || envelope</span><br></pre></td></tr></table></figure></p><h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><p>修改主题配置文件，检索reward_comment<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reward_comment: 多谢支持，共同进步！</span><br><span class="line">wechatpay: /uploads/微信打赏.jpg</span><br><span class="line">alipay: /uploads/支付宝打赏.jpg</span><br></pre></td></tr></table></figure></p><h3 id="添加友情链接"><a href="#添加友情链接" class="headerlink" title="添加友情链接"></a>添加友情链接</h3><p>修改主题配置文件，检索links_title<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">links_icon: link</span><br><span class="line">links_title: 友情链接</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  酷壳: https://coolshell.cn/</span><br><span class="line">  SegmentFault: https://segmentfault.com/</span><br><span class="line">  DigitalOcean: https://www.digitalocean.com/community</span><br><span class="line">  伯乐在线: http://python.jobbole.com/</span><br></pre></td></tr></table></figure></p><h3 id="设置「阅读全文」"><a href="#设置「阅读全文」" class="headerlink" title="设置「阅读全文」"></a>设置「阅读全文」</h3><p>首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面。有三种方法：</p><ol><li>在文章中使用 <code>&lt;!-- more --&gt;</code>手动进行截断</li><li>在文章的 front-matter 中添加 description，并提供文章摘录</li><li>自动形成摘要<br>在出题配置文件中，检索auto_excerpt<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure></li></ol><h3 id="文章中插入图片且可放大查看"><a href="#文章中插入图片且可放大查看" class="headerlink" title="文章中插入图片且可放大查看"></a>文章中插入图片且可放大查看</h3><ol><li>修改主题配置文件，检索<code>post_asset_folder</code>，将其置为true</li><li>安装hexo-asset-image插件：<code>npm install hexo-asset-image --save</code>。此后使用命令<code>hexo new &quot;博客名称&quot;</code>则会在source/_post文件夹里面就会出现一个“博客名称.md”的文件和一个“博客名称”的文件夹。</li><li><a href="https://github.com/theme-next/theme-next-fancybox" target="_blank" rel="noopener">安装fancybox插件</a>，并修改主题配置文件，检索<code>fancybox</code>并将其置为true。</li><li>文中插入图片：在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，<code>![你想输入的替代文字](xxxx/图片名.jpg)</code></li></ol><h2 id="第三方服务集成"><a href="#第三方服务集成" class="headerlink" title="第三方服务集成"></a>第三方服务集成</h2><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>基于来必力的免费city版本搭建。</p><ol><li>首先登录<a href="https://livere.com" target="_blank" rel="noopener">来必力官网</a>，在管理页面获取来必力的City版，获取安装代码，从自己的安装代码中获得data-uid，如图：<br><img src="/2018/02/23/Hexo-Github搭建自己的博客（二）/uid.png" alt="uid"></li><li>修改主题配置文件，检索livere_uid<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">livere_uid: your_uid</span><br></pre></td></tr></table></figure></li></ol><p>另外还可以<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">基于Gitment搭建评论系统</a>，不过我在搭建过程中初始化评论页面的时候遇到“Error: Validation Failed”，没解决因此放弃了。。</p><h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><ol><li>注册登录<a href="https://tongji.baidu.com" target="_blank" rel="noopener">百度统计</a></li><li>添加网站：将自己的博客地址添加到自有网站中，点击左侧栏“代码获取”，获取下图中标识的统计id<br><img src="/2018/02/23/Hexo-Github搭建自己的博客（二）/tongjiid.png" alt="tongjiid.png"></li><li>修改主题配置文件，检索baidu_analytics<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidu_analytics: your_baidu_id</span><br></pre></td></tr></table></figure></li></ol><h3 id="阅读次数统计（后面有更简单方式）"><a href="#阅读次数统计（后面有更简单方式）" class="headerlink" title="阅读次数统计（后面有更简单方式）"></a>阅读次数统计（后面有更简单方式）</h3><ol><li>注册登录<a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a>，创建应用，点击应用，创建Class，Class名称为Counter，选择无限制</li><li>设置中，点击“应用Key”，获取AppId，AppKey</li><li>修改主题配置文件，检索leancloud_visitors<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: your_app_id</span><br><span class="line">  app_key: your_app_key</span><br></pre></td></tr></table></figure></li></ol><h3 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h3><ol><li><p>安装检索插件，站点根目录下Git Bash执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><p>修改站点配置文件<br>添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件，启用本地搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他个性化配置"><a href="#其他个性化配置" class="headerlink" title="其他个性化配置"></a>其他个性化配置</h2><h3 id="修改文章底部带-的标签"><a href="#修改文章底部带-的标签" class="headerlink" title="修改文章底部带#的标签"></a>修改文章底部带#的标签</h3><p>修改模板<code>/themes/hexo-theme-next/layout/_macro/post.swig</code>，搜索<code>rel=&quot;tag&quot;&gt;#</code>，将 <code>#</code>换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h3 id="在每篇文章末尾统一添加“本文结束”标记"><a href="#在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="在每篇文章末尾统一添加“本文结束”标记"></a>在每篇文章末尾统一添加“本文结束”标记</h3><ol><li><p><code>/themes/hexo-theme-next/layout/_macro/</code>目录下新建<code>page-end-tag.swig</code>文件，内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>/themes/hexo-theme-next/layout/_macro/post.swig</code>文件，搜索<code>END POST BODY</code>，在其后面添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.page_end_tag.enabled and not is_index %&#125;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&#123;% include &apos;page-end-tag.swig&apos; %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑主题配置文件，添加内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure></li></ol><h3 id="网站底部添加访问量和博客阅读次数统计"><a href="#网站底部添加访问量和博客阅读次数统计" class="headerlink" title="网站底部添加访问量和博客阅读次数统计"></a>网站底部添加访问量和博客阅读次数统计</h3><p>编辑主题配置文件，检索busuanzi_count<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure></p><h3 id="在文章底部增加版权信息"><a href="#在文章底部增加版权信息" class="headerlink" title="在文章底部增加版权信息"></a>在文章底部增加版权信息</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>修改主题配置文件，检索post_copyright<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  license: &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 4.0&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><h4 id="方法二——自定义"><a href="#方法二——自定义" class="headerlink" title="方法二——自定义"></a>方法二——自定义</h4><ol><li><p><code>/themes/hexo-theme-next/layout/_macro/</code>目录下新建<code>my-copyright.swig</code>文件，内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line">&lt;div class=&quot;my_post_copyright&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;span class=&quot;copy-path&quot;  title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot;  aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    var clipboard = new Clipboard(&apos;.fa-clipboard&apos;);</span><br><span class="line">    $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class="line">      clipboard.on(&apos;success&apos;, function()&#123;</span><br><span class="line">        swal(&#123;   </span><br><span class="line">          title: &quot;&quot;,   </span><br><span class="line">          text: &apos;复制成功&apos;,</span><br><span class="line">          icon: &quot;success&quot;, </span><br><span class="line">          showConfirmButton: true</span><br><span class="line">          &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>在目录<code>/themes/hexo-theme-next/source/css/_common/components/post/</code>下添加<code>my-post-copyright.styl</code>，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: 85%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;margin:0;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #b5b5b5;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: #a3d2a3;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>/themes/hexo-theme-next/layout/_macro/post.swig</code>文件，搜索<code>END POST BODY</code>，在其后面（如果已经添加了文章结束标志则在其后）添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if not is_index %&#125;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&#123;% include &apos;my-copyright.swig&apos; %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>/themes/hexo-theme-next/source/css/_common/components/post/post.styl</code>文件，在最后一行添加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;my-post-copyright&quot;</span><br></pre></td></tr></table></figure></li><li><p>修改站点配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: http://wfwblog.cn</span><br></pre></td></tr></table></figure></li><li><p>在文章头部添加copyright</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo+Github搭建自己的博客（二）</span><br><span class="line">date: 2018-02-23 18:26:04</span><br><span class="line">tags:</span><br><span class="line">  - Hexo  </span><br><span class="line">  - Next</span><br><span class="line">categories: 工具</span><br><span class="line">copyright: true</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next主题使用介绍</a><br><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">Next主题个性化配置教程</a><br><a href="http://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="noopener">hexo生成博文插入图片</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hexo支持各种主题风格，默认使用Landscape主题，本章我们介绍如何使用Next主题美化我们的博客&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Hexo中有两份主要的配置文件，其名称都是_config.yml。 其中，一份位于站点根目录下，主要包含Hexo本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。&lt;br&gt;为了描述方便，在以下说明中，将前者称为&lt;strong&gt;站点配置文件&lt;/strong&gt;， 后者称为&lt;strong&gt;主题配置文件&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://wfwblog.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="http://wfwblog.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="http://wfwblog.cn/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建自己的博客（一）</title>
    <link href="http://wfwblog.cn/2018/02/23/Hexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://wfwblog.cn/2018/02/23/Hexo-Github搭建自己的博客（一）/</id>
    <published>2018-02-23T07:41:49.000Z</published>
    <updated>2018-02-26T01:56:18.714Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在查阅资料时，我发现有些人的博客风格简洁而清晰，很喜欢，因此学习基于Hexo+GitHub搭建了一套自己的博客系统，记录如下</p></blockquote><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>主要完成以下工作：</p><ul><li>安装Git</li><li>安装node.js</li><li>安装Hexo</li></ul><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ol><li><a href="https://github.com/git-for-windows/git/tags" target="_blank" rel="noopener">下载Git</a><br>我使用的v1.9.5，网上说高版本会有问题，未验证</li><li>安装<br>注意在步骤2中，选择配置Git环境变量的选项，即：Use Git from the Windows Command Prompt</li><li>验证<br>在cmd下，执行命令<code>git --version</code></li></ol><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><ol><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载node.js</a><br>我使用的v6.3.1</li><li>安装</li><li>验证<br>在cmd下，执行命令<code>node -v</code></li></ol><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>使用npm命令安装</p><ol><li>新建Hexo文件夹，进入Hexo，任意位置点击鼠标右键，选择Git Bash（已经安装Git），步骤2和步骤3命令均在Git bash中执行</li><li>使用淘宝npm镜像：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>（需要等待一段时间）</li><li>安装hexo：<code>cnpm install -g hexo-cli</code></li><li>验证：cmd下，执行命令<code>hexo -v</code></li></ol><h2 id="运行Hexo"><a href="#运行Hexo" class="headerlink" title="运行Hexo"></a>运行Hexo</h2><p>Git Bash命令界面中，执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">cnpm install</span><br><span class="line">hexo server -p 4001</span><br></pre></td></tr></table></figure></p><p>注意：hexo默认使用4000端口，但是如果4000端口被占用，则会一直没有响应，因此在启动的时候我指定hexo使用4001端口</p><p>浏览器中输入<a href="http://localhost:4001" target="_blank" rel="noopener">http://localhost:4001</a><br>看到如下页面表明你已经成功了<br><img src="/2018/02/23/Hexo-Github搭建自己的博客（一）/helloworldblog.png" alt="helloworld"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在查阅资料时，我发现有些人的博客风格简洁而清晰，很喜欢，因此学习基于Hexo+GitHub搭建了一套自己的博客系统，记录如下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;header
      
    
    </summary>
    
      <category term="工具" scheme="http://wfwblog.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="http://wfwblog.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
