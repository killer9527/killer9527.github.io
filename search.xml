<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SpringBoot系列（三）——集成MyBatis]]></title>
    <url>%2F2018%2F03%2F20%2FSpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E9%9B%86%E6%88%90MyBatis%2F</url>
    <content type="text"><![CDATA[Web服务免不了要跟数据库打交道，基于SpringBoot我们可以很方便地集成MyBatis来对数据库进行操作，本章讲述如何使用mybatis-generator插件生成ORM相关文件以及mybatis的使用。 新建数据库MyBatisDemo为了测试，我们建立三张表：User，Department和RelUserDepartment，分别为用户表，部门表和用户部门关联表。创建脚本如下：1234567891011121314151617181920212223242526SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for Department-- ----------------------------DROP TABLE IF EXISTS `Department`;CREATE TABLE `Department` ( `id` int(8) unsigned NOT NULL AUTO_INCREMENT, `departmentName` varchar(255) NOT NULL, `departmentCulture` text, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=gbk;-- ------------------------------ Table structure for Users-- ----------------------------DROP TABLE IF EXISTS `Users`;CREATE TABLE `Users` ( `id` int(8) unsigned NOT NULL AUTO_INCREMENT, `name` varchar(255) NOT NULL DEFAULT &apos;&apos;, `age` int(8) unsigned DEFAULT NULL, `sex` varchar(64) DEFAULT NULL, `address` varchar(255) DEFAULT &apos;&apos;, `departmentId` int(8) NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=gbk; 生成entity，dao和mapper文件引入mybatis-generator插件的jar包123456789101112131415161718&lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;1.3.5&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt; 添加配置文件mybatis-generator.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;!--配置说明：http://blog.csdn.net/isea533/article/details/42102297 --&gt; &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;commentGenerator&gt; &lt;!--是否关闭时间标志true：是 false:否--&gt; &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt; &lt;!-- 是否去除自动生成的注释 true：是 false:否 --&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt; &lt;/commentGenerator&gt; &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码，可以提出到单独配置文件中 --&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://10.200.xx.xx:3306/MybatisDemo?characterEncoding=gbk&quot; userId=&quot;username&quot; password=&quot;password&quot;&gt; &lt;/jdbcConnection&gt; &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL和NUMERIC 类型解析为java.math.BigDecimal --&gt; &lt;javaTypeResolver&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt; &lt;/javaTypeResolver&gt; &lt;!-- 生成模型的包名和位置--&gt; &lt;javaModelGenerator targetPackage=&quot;com.wfw.entity&quot; targetProject=&quot;src&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt; &lt;!-- 从数据库返回的值被清理前后的空格 --&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt; &lt;/javaModelGenerator&gt; &lt;!-- 生成映射文件的包名和位置--&gt; &lt;sqlMapGenerator targetPackage=&quot;com.wfw.mapper&quot; targetProject=&quot;src&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 生成DAO(mapper接口)的包名和位置--&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.wfw.dao&quot; targetProject=&quot;src&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;/javaClientGenerator&gt; &lt;!-- 要生成哪些表--&gt; &lt;!--tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt; &lt;table tableName=&quot;Users&quot; domainObjectName=&quot;Users&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;!--如果设置为true,那么MBG会使用从数据库元数据获取的列名作为生成的实体对象的属性。 如果为false(默认值)，MGB将会尝试将返回的名称转换为驼峰形式。 在这两种情况下，可以通过元素显示指定，在这种情况下将会忽略这个（useActualColumnNames）属性。--&gt; &lt;property name=&quot;useActualColumnNames&quot; value=&quot;true&quot;/&gt; &lt;/table&gt; &lt;table tableName=&quot;Department&quot; domainObjectName=&quot;Department&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;!--如果设置为true,那么MBG会使用从数据库元数据获取的列名作为生成的实体对象的属性。 如果为false(默认值)，MGB将会尝试将返回的名称转换为驼峰形式。 在这两种情况下，可以通过元素显示指定，在这种情况下将会忽略这个（useActualColumnNames）属性。--&gt; &lt;property name=&quot;useActualColumnNames&quot; value=&quot;true&quot;/&gt; &lt;!--解决字段类型为text等会默认产生XXXXWithBlobs的方法问题http://blog.csdn.net/maoliangfei2011/article/details/52231463--&gt; &lt;columnOverride column=&quot;departmentCulture&quot; javaType=&quot;java.lang.String&quot; jdbcType=&quot;VARCHAR&quot;/&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; pom.xml中添加插件依赖及配置文件地址12345678910111213141516171819202122232425262728293031&lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.5&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.45&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;1.3.5&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;Generate MyBatis Artifacts&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;generate&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;configuration&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;configurationFile&gt;src/main/resources/config/mybatis-generator.xml&lt;/configurationFile&gt; &lt;/configuration&gt;&lt;/plugin&gt; generate可以看到在src/com/wfw目录下产生三个目录：dao，entity和mapper，不直接把生成的文件放到java目录下的原因：如果修改表结构需要重新生成文件，则会覆盖已经修改的文件，因此单独生成到src/com/wfw目录下，然后拷贝到对应目录即可。则我们现在的目录结构为： 依赖注入application.properties中配置数据库及mybatis的mapper目录123456789# mysql数据库相关配置spring.datasource.url=jdbc:mysql://10.200.xx.xx:3306/MybatisDemospring.datasource.username=usernamespring.datasource.password=passwordspring.datasource.driver-class-name=com.mysql.jdbc.Driver# mybatis相关配置mybatis.mapperLocations=classpath:com/wfw/mapper/*.xmlmybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl 注意：如果不配置mysql数据库相关，则SpringBoot启动失败，如果不进行mybatis的mapper目录相关配置，则会出现Invalid bound statement (not found)的异常 配置pom.xml的build元素build元素中添加123456789&lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt;&lt;/resources&gt; 这是因为我们的mapper.xml文件放在java/com/wfw/mapper包下，而默认build的时候.xml文件没有被build到target/classes/com/wfw/mapper目录下，我们上一步中配置的mybatis.mapperLocations=classpath:com/wfw/mapper/*.xml找不到相关的mapper.xml文件，也会出现Invalid bound statement (not found)的异常。 数据访问层接口添加注解在生成的UsersMapper,DepartmentMapper接口添加注解@Mapper和@Component。为了测试，UsersMapper接口中添加两个接口，这个两个接口需要我们在UsersMapper.xml文件中实现1234List&lt;UserDTO&gt; listUsers(@Param(value = &quot;from&quot;) int from, @Param(value = &quot;size&quot;) int size);int countUsers(); 在UsersMapper.xml文件中添加其实现123456789&lt;resultMap id=&quot;UserDtoResultMap&quot; type=&quot;com.wfw.dto.user.UserDTO&quot;&gt;&lt;/resultMap&gt;&lt;select id=&quot;listUsers&quot; resultMap=&quot;UserDtoResultMap&quot;&gt; select Users.`name` as userName, Department.departmentName as department from Users inner join Department on Department.id = Users.departmentId limit #&#123;from&#125;, #&#123;size&#125;;&lt;/select&gt;&lt;select id=&quot;countUsers&quot; resultType=&quot;java.lang.Integer&quot;&gt; select count(*) from Users;&lt;/select&gt; Service层接口定义及实现定义Service层接口1234public interface UserService &#123; List&lt;UserDTO&gt; listUsers(int pageIndex, int pageSize); int countUsers();&#125; 实现Service层接口，需要添加@Service注解，从而能够在Controller层使用时自动注入。在Service实现时，我们展示数据访问接口的自动注入（使用@Autowired注解）12345678910111213141516@Servicepublic class UserServiceImpl implements UserService &#123; @Autowired private UsersMapper usersMapper; @Override public List&lt;UserDTO&gt; listUsers(int pageIndex, int pageSize) &#123; int from = (pageIndex - 1) * pageSize; return this.usersMapper.listUsers(from, pageSize); &#125; @Override public int countUsers() &#123; return this.usersMapper.countUsers(); &#125;&#125; Controller层注入Service接口在UserController层中12345678910111213@Autowiredprivate UserService userService;@RequestMapping(path = &quot;/listUsers&quot;, method = RequestMethod.POST)@ApiOperation(value = &quot;获取用户信息列表&quot;)ListUsersResponseVO listUsers(@RequestBody ListUsersRequestVO request)&#123; ListUsersResponseVO response = new ListUsersResponseVO(); response.setData(this.userService.listUsers(request.getPageIndex(), request.getPageSize())); response.setTotal(this.userService.countUsers()); response.setResult(true); response.setMessage(&quot;OK&quot;); return response;&#125; 参考文章 MyBatis-generator 详解 Invalid bound statement (not found)错误的可能原因]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpSpringBoot系列（二t系列（三）——日志记录]]></title>
    <url>%2F2018%2F03%2F16%2FSpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[日志在项目开发过程中及服务部署后对于解决问题起着至关重要的作用，本章介绍如何在SpringBoot中使用logback将日志记录到文件或RabbitMQ中。 引入logback在pom.xml文件中，添加包引用：123456789101112&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt; &lt;artifactId&gt;spring-amqp&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt; &lt;artifactId&gt;spring-rabbit&lt;/artifactId&gt;&lt;/dependency&gt; 使用默认版本。 添加配置文件logback.xml 在resources/config目录下添加日志配置文件logback.xml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt; &lt;contextName&gt;logback-SpringBootDemoSingle&lt;/contextName&gt; &lt;property name=&quot;log.file&quot; value=&quot;logback.log&quot; /&gt; &lt;property name=&quot;FilePath&quot; value=&quot;/data1/logs/dev/SpringBootDemoSingle&quot; /&gt; &lt;!--输出到控制台--&gt; &lt;appender name=&quot;Console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!--输出到文件并且切分日志文件--&gt; &lt;appender name=&quot;ErrorFile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;param name=&quot;encoding&quot; value=&quot;UTF-8&quot; /&gt; &lt;param name=&quot;file&quot; value=&quot;$&#123;FilePath&#125;/fileERROR/$&#123;log.file&#125;&quot; /&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;FilePath&#125;/fileERROR/logback.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;30&lt;/maxHistory&gt; &lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;appender name=&quot;InfoFile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;param name=&quot;encoding&quot; value=&quot;UTF-8&quot; /&gt; &lt;param name=&quot;file&quot; value=&quot;$&#123;FilePath&#125;/fileINFO/$&#123;log.file&#125;&quot; /&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;FilePath&#125;/fileINFO/logback.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;30&lt;/maxHistory&gt; &lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;appender name=&quot;amqp&quot; class=&quot;org.springframework.amqp.rabbit.logback.AmqpAppender&quot;&gt; &lt;layout&gt; &lt;pattern&gt; &#123; &quot;time&quot;: &quot;%date&quot;, &quot;thread&quot;: &quot;%thread&quot;, &quot;level&quot;: &quot;%level&quot;, &quot;class&quot;: &quot;%logger&quot;, &quot;message&quot;: &quot;%message&quot;, &quot;system&quot;: &quot;SpringBootDemoSingle&quot; &#125; &lt;/pattern&gt; &lt;/layout&gt; &lt;host&gt;10.200.xx.xx&lt;/host&gt; &lt;port&gt;5672&lt;/port&gt; &lt;virtualHost&gt;/&lt;/virtualHost&gt; &lt;username&gt;username&lt;/username&gt; &lt;password&gt;password&lt;/password&gt; &lt;exchangeType&gt;topic&lt;/exchangeType&gt; &lt;exchangeName&gt;rd6.log&lt;/exchangeName&gt; &lt;applicationId&gt;SpringBootDemoSingle&lt;/applicationId&gt; &lt;routingKeyPattern&gt;routeKey&lt;/routingKeyPattern&gt; &lt;contentType&gt;application/json&lt;/contentType&gt; &lt;maxSenderRetries&gt;2&lt;/maxSenderRetries&gt; &lt;declareExchange&gt;true&lt;/declareExchange&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;/appender&gt; &lt;root level=&quot;info&quot;&gt; &lt;appender-ref ref=&quot;InfoFile&quot;/&gt; &lt;appender-ref ref=&quot;amqp&quot;/&gt; &lt;/root&gt; &lt;root level=&quot;error&quot;&gt; &lt;appender-ref ref=&quot;ErrorFile&quot; /&gt; &lt;/root&gt; &lt;root level=&quot;info&quot;&gt; &lt;appender-ref ref=&quot;Console&quot; /&gt; &lt;/root&gt;&lt;/configuration&gt; 注意：输出到控制台的等级控制要放到最后 该配置文件将日志输出到文件和RabbitMQ中。具体配置见参考文章3。 application.properties中配置logback的配置文件目录 12# 日志配置文件logging.config=classpath:config/logback.xml 记录日志在代码中记录日志1LoggerFactory.getLogger(LogInterceptor.class).error(&quot;error test&quot;); 使用拦截器记录每个接口的耗时 定义日志记录拦截器 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public class LogInterceptor implements HandlerInterceptor&#123; private Logger logger = LoggerFactory.getLogger(LogInterceptor.class); /** * controller 执行之前调用 * @param request * @param response * @param handler * @return * @throws Exception */ @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; long startTime = System.currentTimeMillis(); //记录起始时间 request.setAttribute(&quot;startTime&quot;, startTime); logger.error(&quot;error test&quot;); return true; &#125; /** * controller 执行之后，且页面渲染之前调用 * @param request * @param response * @param handler * @param modelAndView * @throws Exception */ @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception &#123; // You can add attributes in the modelAndView &#125; /** * 页面渲染之后调用，一般用于资源清理操作 * @param request * @param response * @param handler * @param ex * @throws Exception */ @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception &#123; long startTime = (long)request.getAttribute(&quot;startTime&quot;); //获取起始时间 long endTime = System.currentTimeMillis(); long timeTaken = endTime - startTime; String requestUrl = request.getRequestURL().toString(); logger.info(&quot;调用接口：&quot; + requestUrl + &quot;，耗时&quot; + timeTaken); &#125;&#125; 在WebMvcConfig.java中注册拦截器 上一章我们在解决json序列化的时候已经override过configureMessageConverters个方法，拦截器的注册是在addInterceptors方法中： 123456789101112@Override public void addInterceptors(InterceptorRegistry registry) &#123; //LogInterceptor拦截器应用于所有URLs registry.addInterceptor(new LogInterceptor()); //登录拦截器，不拦截登录接口和swagger静态资源 registry.addInterceptor(new LoginInterceptor()) .excludePathPatterns(&quot;/user/login&quot;, &quot;/swagger-resources/**&quot;, &quot;/swagger-ui.html&quot;, &quot;/v2/api-docs&quot;); //addPathPatterns和excludePathPatterns分别用于指定路由和排除路由 &#125; 注意：此外为了测试，写了一个用户登录的拦截器。再进行一下接口的调用测试，你会发现每个接口的耗时都被记录到了日志中。 参考文章 Spring中拦截器和过滤器区别 SpringBoot中拦截器的使用 默认日志logback配置解析]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot系列（二）——集成Swagger]]></title>
    <url>%2F2018%2F03%2F15%2FSpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%9B%86%E6%88%90Swagger%2F</url>
    <content type="text"><![CDATA[现在开发项目很多都采用前后端分离的模式，后端提供Restful接口，前端进行对接。提供详细的接口说明问题可以简化前后端对接步骤，提高工作效率，而Swagger为我们提供了自动生成接口说明文档的功能，且提供了可视化ui，非常方便。本文介绍如何在SpringBoot中集成Swagger及相关的优化配置。 引入Swagger pom.xml文件添加第三方jar包 12345678910&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.2.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.2.2&lt;/version&gt;&lt;/dependency&gt; 添加配置文件在包config下，新建文件SwaggerConfig.java，内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142@Configuration@EnableSwagger2public class SwaggerConfig &#123; @Bean public Docket restfulApi()&#123; return new Docket(DocumentationType.SWAGGER_2) .genericModelSubstitutes(DeferredResult.class) .useDefaultResponseMessages(true) .forCodeGeneration(true) .select() .apis(RequestHandlerSelectors.basePackage(&quot;com.wfw.controller&quot;)) .build().globalOperationParameters(GetHeader()) .apiInfo(initApiInfo()); &#125; private List&lt;Parameter&gt; GetHeader() &#123; ParameterBuilder token = new ParameterBuilder(); List&lt;Parameter&gt; parameters = new ArrayList&lt;&gt;(); token.name(&quot;X-Request-Token&quot;).description(&quot;Token&quot;).modelRef(new ModelRef(&quot;string&quot;)).parameterType(&quot;header&quot;).required(false).build(); parameters.add(token.build()); return parameters; &#125; private ApiInfo initApiInfo() &#123; ApiInfo apiInfo = new ApiInfoBuilder() .title(&quot;SpringBoot Demo后端WebAPI&quot;) .description(initContextInfo()) .version(&quot;1.0&quot;) .build(); return apiInfo; &#125; private String initContextInfo() &#123; StringBuffer sb = new StringBuffer(); sb.append(&quot;REST API 设计在细节上有很多自己独特的需要注意的技巧，并且对开发人员在构架设计能力上比传统 API 有着更高的要求。&quot;).append(&quot;&lt;br/&gt;&quot;) .append(&quot;以下是本项目的API文档&quot;); return sb.toString(); &#125;&#125; @Configuration表明该类为IOC容器的配置类。且该配置类为Swagger中每个接口的header提供了一个名为X-Request-Token的参数，便于传递token参数。 使用我们介绍常用的注解，详细使用说明见参考文章1 在Controller上使用@Api注释该Controller的相关信息，例如： 123@Api(value = &quot;GreetingController&quot;, description = &quot;GreetingController描述&quot;)public class GreetingController extends BaseController &#123;&#125; 在接口方法上使用@ApiOperation注释该接口的说明信息，例如： 123@ApiOperation(value = &quot;使用Get方法greeting&quot;) public GreetingResponseVO greetingByGet(@RequestParam(value=&quot;name&quot;, defaultValue=&quot;World&quot;) String name)&#123; &#125; 使用@ApiModel和@ApiModelProperty对数据模型结构进行说明，例如： 1234567891011121314151617181920212223@ApiModel(value = &quot;GreetingResponseVO&quot;, description = &quot;Greeting响应&quot;)public class GreetingResponseVO extends BaseResponseVO &#123; @ApiModelProperty(value = &quot;id&quot;) private long id; @ApiModelProperty(value = &quot;内容&quot;) private String content; public long getId() &#123; return id; &#125; public void setId(long id) &#123; this.id = id; &#125; public String getContent() &#123; return content; &#125; public void setContent(String content) &#123; this.content = content; &#125;&#125; 启动服务，浏览器中：http://localhost:8080/swagger-ui.html 解决Swagger参数无法传输换行字符串的问题如果直接拷贝了一长串换行文本传入接口参数中，会提示如下错误： org.codehaus.jackson.JsonParseException: Illegal unquoted character ((CTRL-CHAR, code 9)): has to be escaped using backslash to be included in string valueat [Source: java.io.StringReader@10cfc2e3; line: 1, column: 2461]这是因为传输的json参数中含有转义字符，而框架使用jackson未对其进行转换。 解决方法： pom.xml引入第三方jar包 12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.15&lt;/version&gt;&lt;/dependency&gt; 包config中添加配置类WebMvcConfig，内容如下： 12345678910111213141516@Configurationpublic class WebMvcConfig implements WebMvcConfigurer &#123; @Override public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123; FastJsonHttpMessageConverter fastConverter = new FastJsonHttpMessageConverter(); FastJsonConfig fastJsonConfig = new FastJsonConfig(); fastJsonConfig.setSerializerFeatures( SerializerFeature.PrettyFormat ); fastConverter.setFastJsonConfig(fastJsonConfig); converters.add(fastConverter); &#125;&#125; 参考文章 swagger常用注解说明 springboot接收JSON时发生转义字符绑定对象失败]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>微服务</tag>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot系列（一）——搭建SpringBoot框架]]></title>
    <url>%2F2018%2F03%2F12%2FSpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BASpringBoot%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[SpringBoot可以使你快速构建基于Spring的应用服务，它集成了Spring平台和第三方库，功能可插拔，将很多配置做了默认处理（习惯优于配置），只需要很少的Spring配置。本文对SpringBoot做简要介绍，并基于SpringBoot快速构建Web服务。 一、SpringBoot特点 快速构建独立运行的Spring服务 内嵌tomcat，无需部署war包 提供spring-boot-starter-*的POMs简化maven配置 自动配置Spring 二、快速搭建Web服务环境配置：开发工具为Intellij IDEA，Java8，Maven3.5 创建项目File &gt;&gt; New &gt;&gt; Project &gt;&gt; Spring Initializer选择next，注意Type选择Maven Project(Generate a maven based project archive)选择next，SpringBoot版本选择2.0.0，勾选Web然后next，Finish即完成构建。 可以看到项目是一个空框架，基本没有代码，主要包含以下内容： SpringBootDemoSingleApplication.java：一个带有main方法的类，启动应用程序的入口 SpringBootDemoSingleApplicationTests.java：一个空的Junit测试类，它加载了一个使用Spring Boot字典配置功能的Spring应用程序上下文 application.properties：SpringBoot的配置文件，如果需要修改SpringBoot的默认配置，则需要在此文件中进行修改 pom.xml：maven配置文件，用于添加引用包 配置pom.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.wfw&lt;/groupId&gt; &lt;artifactId&gt;springbootdemosingle&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;SpringBootDemoSingle&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.0.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;SpringBoot-demo&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;skipTests&gt;true&lt;/skipTests&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 自己稍微做了一些修改，构建jar包过程中忽略单元测试。 parent配置 123456 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.0.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt; 即SpringBoot父级依赖，它是一个特殊的starter，用来指定其他starter的Maven默认依赖版本。可以去本地maven仓库的子目录repository\org\springframework\boot\spring-boot-dependencies\2.0.0.RELEASE下查看spring-boot-dependencies-2.0.0.RELEASE.pom文件，该POMs文件使用properties和dependencyManagement控制第三方库的默认引用版本[^参考文章9]。如果不想使用默认版本，可以在自己项目的POMs文件中指定相应jar包的版本号 spring-boot-starter-xxx起步依赖SpringBoot提供了很多”开箱即用“的依赖模块，都是以spring-boot-starter-xxx作为命名的。起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。很多起步依赖的命名都暗示了它们提供的某种或者某类功能。 SpringBoot Maven插件 1234&lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&lt;/plugin&gt; 把项目打包成一个可执行的超级JAR（uber-JAR）,包括把应用程序的所有依赖打入JAR文件内，并为JAR添加一个描述文件，其中的内容能让你用java -jar来运行应用程序。 构建Restful风格接口 创建如下结构的目录各目录结构说明： config: 用于写配置 controller：Controller层 dao：数据访问层相关接口定义 dto：数据模型 entity：ORM映射模型 filter：过滤器 mapper：ORM映射文件 service：业务逻辑层接口定义及实现 vo：数据展示模型 创建名为controller的package，添加GreetingController 12345678910111213141516171819202122232425@RestController@RequestMapping(path = &quot;/greeting&quot;)@Api(value = &quot;GreetingController&quot;, description = &quot;GreetingController描述&quot;)public class GreetingController extends BaseController &#123; private static final String template = &quot;Hello, %s!&quot;; private final AtomicLong counter = new AtomicLong(); @RequestMapping(path=&quot;greetingByGet&quot;, method= RequestMethod.GET) @ApiOperation(value = &quot;使用Get方法greeting&quot;) public GreetingResponseVO greetingByGet(@RequestParam(value=&quot;name&quot;, defaultValue=&quot;World&quot;) String name)&#123; GreetingResponseVO response = new GreetingResponseVO(); response.setId(counter.incrementAndGet()); response.setContent(String.format(template, name)); return response; &#125; @RequestMapping(path = &quot;greetingByPost&quot;, method = RequestMethod.POST) @ApiOperation(value = &quot;使用Post方法greeting&quot;) public GreetingResponseVO greetingByPost(@RequestBody GreetingRequestVO request)&#123; GreetingResponseVO response = new GreetingResponseVO(); response.setId(counter.incrementAndGet()); response.setContent(String.format(template, request.getName())); return response; &#125;&#125; 相关注解说明： @RequestMapping：指定http的路由 @RestController：指定该Controller下所有的Post方法响应以json格式返回，它是@Controller和@ResponseBody的组合 @RequestBody：以json格式接收http参数 @RequestParam：从get方法的url中获取参数 @Api和@ApiOperation：Swagger的相关注解 运行使用SpringBoot内置的tomcat运行jar包的方式，通过扫描SpringBootDemoSingleApplication中的main方法为入口启动程序。 1234567@SpringBootApplicationpublic class SpringBootDemoSingleApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(SpringBootDemoSingleApplication.class, args); &#125;&#125; @SpringBootApplication非常方便地提供了以下注解： @Configuration：将SpringBootDemoSingleApplication标记为应用程序上下文的bean定义类 @EnableAutoConfiguration：告诉SpringBoot在启动时根据classpath配置，其他beans和各种属性配置添加beans @EnableWebMvc：SpringBoot在classpath中检测到spring-webmvc时自动添加了@EnableWebMvc，它将程序标记为Web服务并执行关键步骤，比如设置DispatcherServlet @ComponentScan：告诉Spring寻找其他组件，配置和hello中的服务，使其寻找Controller。将标注了元信息Annotation的bean定义类批量采集到Spring的IOC容器中，如果不指定其basePackages属性，则Spring框架默认会从声明@ComponentScan所在类的package进行扫描，即com.wfw 使用maven编译：mvnw clean package执行jar包：java -jar target/SpringBoot-demo.jar 或者直接在Intellij IEEA中启动 配置文件解析搭建好SpringBoot后，会自动生成一个全局的配置文件application.properties。也可以自定义配置文件，例如我们在resources目录下新建目录config用于存放我们的自定义配置文件。可以定义一个配置类，用于IoC容器注册和收集我们的配置项。 自定义配置及引用 创建自定义配置文件假设我们自定义的配置文件config1.properties和config2.properties内容分别为： 1234# config1.properties内容config1.username=killer9527# config2.properties内容config2.password=123456 定义配置类然后我们可以在包config中定义一个配置类ConfigurationConfig.java，内容如下： 1234567@Configuration@PropertySources(&#123; @PropertySource(&quot;classpath:config/config1.properties&quot;), @PropertySource(&quot;classpath:config/config2.properties&quot;)&#125;)public class ConfigurationConfig &#123;&#125; 引用配置项比如在Controller中使用，则可以定义一变量 12@Autowiredprivate Environment env; 使用12env.getProperty(&quot;config1.username&quot;)env.getProperty(&quot;config2.password&quot;) 需要注意的是 Properties added in this way have lower priority than any added byusing the default locations (such as application.properties), system properties, environment variables, or the command line 配置随机值配置文件中${random} 可以用来生成各种不同类型的随机值，例如：123456my.secret=$&#123;random.value&#125;my.number=$&#123;random.int&#125;my.bignumber=$&#123;random.long&#125;my.uuid=$&#123;random.uuid&#125;my.number.less.than.ten=$&#123;random.int(10)&#125;my.number.in.range=$&#123;random.int[1024,65536]&#125; 命令行参数配置比如：java -jar xx.jar --server.port=9090。命令行中连续的两个减号–就是对application.properties中的属性值进行赋值的标识。 Profile-多环境配置开发过程中，我们针对不同的开发环境相应的会有不同的配置，如果各种开发环境都使用同一个配置文件，那么我们每次发布时，都需要修改相应的配置，很繁琐。SpringBoot的profile针对这个问题专门实现了多环境配置选择配置文件的功能，多环境配置文件名需要满足application-{profile}.properties的格式，其中{profile}对应你的环境标识。具体实现步骤如下： 创建各种开发环境配置文件我们分三个环境：develop，release和online，分别对应的配置文件为application-develop.properties，application-release.properties和application-online.properties，为了测试，内容分别为： 123456789# application-develop.properties内容server.port=8080profile.property=develop# application-release.properties内容server.port=8081profile.property=release# application-online.properties内容server.port=8082profile.property=online 在application.properties中通过配置spring.profiles.active变量选择配置文件 12# application.properties内容spring.profiles.active=online 也可以通过命令行参数配置spring.profiles.active变量来实现配置的选择 你可以启动SpringBoot，看看需要用哪个端口访问。 SpringBoot核心注解说明@Configuration它用于标记JavaConfig形式的Spring Ioc容器的配置类。配置类与基于XML配置功能相对应。 表达形式 基于XML配置的方式： 1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot; default-lazy-init=&quot;true&quot;&gt; &lt;!--bean定义--&gt;&lt;/beans&gt; 而基于JavaConfig的配置类配置方式： 1234@Configurationpublic class MockConfiguration&#123; //bean定义&#125; 注册bean定义方式 基于XML配置的方式： 123&lt;bean id=&quot;mockService&quot; class=&quot;..MockServiceImpl&quot;&gt; ...&lt;/bean&gt; 而基于JavaConfig的配置类配置方式： 1234567@Configurationpublic class MockConfiguration&#123; @Bean public MockService mockService()&#123; return new MockServiceImpl(); &#125;&#125; 任何一个标注了@Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。 依赖注入实现方式 基于XML配置的方式： 1234&lt;bean id=&quot;mockService&quot; class=&quot;..MockServiceImpl&quot;&gt; &lt;propery name =&quot;dependencyService&quot; ref=&quot;dependencyService&quot; /&gt;&lt;/bean&gt;&lt;bean id=&quot;dependencyService&quot; class=&quot;DependencyServiceImpl&quot;&gt;&lt;/bean&gt; 而基于JavaConfig的配置类配置方式： 123456789101112@Configurationpublic class MockConfiguration&#123; @Bean public MockService mockService()&#123; return new MockServiceImpl(dependencyService()); &#125; @Bean public DependencyService dependencyService()&#123; return new DependencyServiceImpl(); &#125;&#125; 如果一个bean的定义依赖其他bean,则直接调用对应的JavaConfig类中依赖bean的创建方法就可以了。 @ComponentScan@ComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义，最终将这些bean定义加载到IoC容器中。我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。 SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages。 @EnableAutoConfiguration借助@Import的支持，将所有符合自动配置条件的bean定义加载到IoC容器。 个人理解，@Configuration负责bean定义，@ComponentScan负责扫描，@EnableAutoConfiguration负责实现将bean定义加载到IoC容器。 参考文章 Spring Boot干货系列总纲 程序猿DD-Spring Boot系列 纯洁的微笑-Sping Boot系列文章 CSDN-小单博客Spring Boot专栏 梁桂钊的博客-Spring Boot 揭秘与实战 林祥纤博客系列-从零开始学Spring Boot 杜琪关于Spring Boot的博客集合 泥瓦匠BYSocket的Spring Boot系列 Maven中dependencies与dependencyManagement的区别 application.properties常见配置属性 关于XML文档的xmlns、xmlns:xsi和xsi:schemaLocation]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins+Github持续集成]]></title>
    <url>%2F2018%2F02%2F28%2FJenkins-Github%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%2F</url>
    <content type="text"><![CDATA[Github作为代码仓储可以控制代码的版本迭代，而Jenkins是一种持续集成工具，可用于代码的编译和发布，当push代码到GitHub仓库之后，我们希望能够自动触发Jenkins从GitHub拉取代码，然后进行编译和发布。 Jenkins安装 安装java环境yum install java 下载Jenkins：wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war并修改权限chmod +x jenkins.war 编写启动脚本jenkins_start.sh 12345678910111213#!/bin/bashNAME=&quot;jenkins.war&quot;echo $NAMEID=`ps -ef | grep &quot;$NAME&quot; | grep -v &quot;grep&quot; | awk &apos;&#123;print $2&#125;&apos;`echo $IDecho &quot;---------------&quot;for id in $IDdokill -9 $idecho &quot;killed $id&quot;doneecho &quot;---------------&quot;nohup java -jar jenkins.war --httpPort=8008 &amp; 添加启动权限：chmod +x jenkins_start.sh 开启8008端口 12firewall-cmd --zone=public --add-port=8008/tcp --permanentfirewall-cmd --reload 设置成开机启动（未成功。。） 修改/etc/rc.d/rc.local文件，添加启动脚本的目录 chmod +x /etc/rc.d/rc.local 集成GitHub安装GitHub插件系统管理-&gt;管理插件-&gt;可选插件，过滤条件“github plugin”，选中“github plugin”，直接安装。可能已经安装过了 配置GitHub插件系统管理-&gt;系统设置-&gt;GitHub-&gt;Add GitHub Server Github中生成access tokenSettings &gt;&gt; Developer settings &gt;&gt; Personal access tokens需要勾选的scopes：repo和admin:repo_hook 添加Credentialskind选择Secret text，并填写Secret 使用Test connection测试 创建一个自由风格任务 创建新任务，选择自由风格的任务 选择GitHub project，填写Project url 源码管理，选择Git，Add Credentials（使用GitHub的用户名和密码），选择githubweb源码浏览器，并填写项目url 构建触发器勾选GitHub hook trigger for GITScm polling 使用shell将blog自动发布到指定目录（只能在Jenkins所在服务器）构建 &gt;&gt; 增加构建步骤 &gt;&gt; Execute shell123456echo $JENKINS_HOMEcd $JENKINS_HOMEcd workspacelscp -rf hexo-blog /data/nginx_githubecho &quot;deploy success!&quot; 配置GitHub仓库的Webhooks进入要监控的仓库，Settings &gt;&gt; Webhooks，Add webhook 完成以上步骤之后，如果对被监控的仓库有push操作，则会触发Jenkins从git上拉取代码并进行build。则程序会发布到指定目录/data/nginx_github，然后就可以通过配置nginx访问了。 Maven编译并远程发布环境配置 Jenkins服务器和目标计算机上配置SSH（root账号登录）id_rsa.pub里面的内容是需要附加到你要远程连接的服务器上的用户的家目录下的.ssh目录下的authorized_keys的。在认证时，客户端会使用私钥对服务器发来的一些数据进行加密。而服务器端使用公钥钥解密，如果成功就直接认证通过。 生成ssh的公钥和私钥：ssh-keygen -t rsa，会提示输入：密钥存放位置（直接回车，默认在/root/.ssh/目录）、密码短语、重复密码短语。完成后在/root/.ssh/目录下生成了2个文件：id_rsa为私钥，id_rsa.pub为公钥 导入公钥：cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys 设置正确的文件和文件夹权限 1chmod -R 0600 ~/.ssh 修改SSH配置文件，支持使用证书登录：vim /etc/ssh/sshd_config，修改对应项的配置 1234RSAAuthentication yesStrictModes noPubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keys 重启ssh服务：systemctl restart sshd.service 测试：ssh localhost 将Jenkins服务器上的公钥内容添加到目标计算机的authorized_keys中。 安装Publish Over SSH插件并配置 系统管理 &gt;&gt; 管理插件 &gt;&gt; 可选插件，直接安装 系统管理 &gt;&gt; 系统配置，找到Publish over SSH的配置 Jenkins SSH Key配置 Passphrase：生成密钥时的密码 Path to key：ssh的私钥路径，一般为/root/.ssh/id_rsa Key：私钥内容（如果指定了私钥路径，则可为空） SSH Servers配置 Name：要部署的目标计算机名称（可任意指定） Hostname：目标计算机地址 Username：目标计算机的登录用户名 Remote Directory：要发布到的目录目的是让Jenkins所在服务器和程序要部署的服务器之间可以通过ssh进行免密码访问。 安装Maven Integration插件和配置只有安装了该插件，新建任务的时候才可以选择构建一个maven项目系统管理 &gt;&gt; 全局工具配置，安装和配置jdk和maven 新建项目选择构建maven项目 源码管理，选择Git，填写Repository URL，选择Credentials，指定Branch 构建触发器，选择GitHub hook trigger for GITScm polling Build，Root POM：SpringBootDemoSingle/pom.xml Post Steps，选择Run only if build succeeds，Add post-build step选择Send files or execute commands over SSH，配置如图 start.sh的内容为： 123456789101112131415161718#!/bin/shNAME=SprintbootDemoecho $NAMEID=`ps -ef | grep &quot;$NAME&quot; | grep -v &quot;grep&quot; | awk &apos;&#123;print $2&#125;&apos;`echo $IDecho &quot;---------------&quot;for id in $IDdokill -9 $idecho &quot;killed $id&quot;doneecho &quot;---------------&quot;if [ -f &quot;SpringBoot-demo-start.jar&quot; ]; thenrm -f SpringBoot-demo-start.jarmv SpringBoot-demo.jar SpringBoot-demo-start.jarfichmod +x SpringBoot-demo-start.jarnohup java -jar SpringBoot-demo-start.jar --name=$NAME --server.port=8088 &amp; 验证：curl http://localhost:8080/swagger-ui.html 管理节点当Jenkins需要处理多个任务时，进行分布式处理很有必要。比如可以部署一个专用于发布java项目的节点，一个专用于发布.net项目的节点或者一个专用于发布node项目的节点。 创建节点系统管理 &gt;&gt; 管理节点 &gt;&gt; 新建节点，指定节点名称node1，选中固定代理，OK。 节点配置，如下图 结果如图 使用在创建job时，在general中通过标签选择使用的节点，如图 参考文章 Github Plugin Jenkins+Github持续集成 Jenkins+GIT+Maven+Shell 实现项目一键发布 jenkins gulp 持续集成环境搭建 Jenkins+Git+Maven+Shell+Tomcat持续集成经典教程 Jenkins使用简易教程 CentOS7 SSH使用证书登录 linux下ssh和Xshell通过密钥登陆总结 使用Jenkins实现自动构建Maven项目]]></content>
      <categories>
        <category>CI</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx安装与配置]]></title>
    <url>%2F2018%2F02%2F26%2FNginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Nginx是一个Http服务器，与传统的服务器不同，Nginx不依赖多线程处理请求，它采用高扩展性的事件驱动型的架构，性能好，稳定，配置简单且资源消耗小。本文介绍nginx的安装与配置。 安装安装环境：CentOS7 安装Nginx仓库 1sudo yum install epel-release 安装Nginx 1sudo yum install nginx 启动Nginx 12systemctl start nginxsystemctl status nginx 注意nginx默认使用80端口启动，如果启动失败，可以查看80端口是否被占用，如果占用，则杀死进程 123netstat -lnp | grep 80ps pidkill pid 其中pid为进程id 如果有防火墙，需要运行如下命令运行http和https访问 123sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload 验证 1http://server_domain_name_or_IP/ 配置成开机启动 1sudo systemctl enable nginx 重新加载配置 1nginx -s reload Nginx介绍Nginx有一个主进程（master process）和很多工作进程（worker processes）。主进程用来读取配置并维护工作进程，工作进程处理请求。 Nginx配置介绍配置文件的结构及指令介绍Nginx有各种模块组成，而模块则由配置文件中的各种指令（directives）控制。Directives又分为simple directives和block directives。simple directive结构如下：1name parameter; block directive结构与simple directive类似，不过不是以;结尾，而是以{}结尾，例如：123location /documents/ &#123; [ configuration C ]&#125; 如果{}中有其他directives，我们称之为context。#后面为注释 location——根据request URI设置配置 1234语法: location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;location @name &#123; ... &#125;默认值: —Context: server, location ~*（大小写不敏感 ）或~（大小写敏感）——正则匹配 ^~或无修饰——前缀匹配 =——精确匹配匹配过程：首先进行精确匹配，匹配到此停止；然后使用uri进行前缀匹配，匹配出最长的的location，并记录，假设为location_prefix_longest，如果前缀匹配用^~修饰，则匹配到此停止；再然后进行正则匹配检查，假设匹配到的第一个location为location_reg_first，则使用location_reg_first中的配置，如果没有匹配到，则使用location_prefix_longest中的配置。举例说明： 123456789101112131415location = / &#123; [ configuration A ]&#125;location / &#123; [ configuration B ]&#125;location /documents/ &#123; [ configuration C ]&#125;location ^~ /images/ &#123; [ configuration D ]&#125;location ~* \.(gif|jpg|jpeg)$ &#123; [ configuration E ]&#125; /请求匹配configuration A，/index.html匹配configuration B，在/documents/document.html匹配configuration C，/images/1.gif匹配configuration D，/documents/1.jpg匹配configuration E。@定义了一个命名location，它用于请求重定向。不能嵌套且不能包含嵌套locations。 默认服务器根目录默认服务器根目录为/usr/share/nginx/html，我们在安装nginx步骤进行验证时看到的页面所相关的文件就放置在该目录下，默认服务的配置文件为/etc/nginx/nginx.conf.default Nginx全局配置文件Nginx的全局配置文件为/etc/nginx/nginx.conf，注意它的内容中有一条包含配置include /etc/nginx/conf.d/*.conf;，表明它将/etc/nginx/conf.d目录下所有以.conf结尾的配置文件包含进来，实现配置的扩展。 在/etc/nginx/conf.d/中添加配置 避免使用if指令 if指令是为rewrite模块设计的（location模块中只有rewrite或return），其他应用不推荐使用。例如： 123456if ($request_method = POST ) &#123; return 405;&#125;if ($args ~ post=140)&#123; rewrite ^ http://example.com/ permanent;&#125; 使用try_files判断文件是否存在。 访问静态内容 创建目录/data/nginx_www，并添加index.html文件，创建/data/nginx_image，并添加图片songhuiqiao.jpeg cd /etc/nginx/conf.d并创建配置文件static_content.conf 12345678910111213 server &#123; listen 8001; server_name static_content; root /usr/share/nginx/html; location / &#123; root /data/nginx_www; &#125; location /nginx_images/ &#123; root /data; &#125;&#125; 重新加载nginx配置nginx -s reload 开放8001端口firewall-cmd --zone=public --add-port=8001/tcp --permanent 重启防火墙systemctl restart firewalld 访问http://ip:8001/和http://ip:8001/nginx_images/songhuiqiao.jpeg，则分别访问的是/data/nginx_www/index.html静态文件和/data/nginx_images/songhuiqiao.jpeg静态文件 配置为代理服务器 Nginx收到请求后，将请求转发给被代理的服务器，获取到响应之后返给客户端。 创建目录/data/nginx_proxied，并添加index.html文件 cd /etc/nginx/conf.d并修改配置文件static_content.conf为 1234567891011121314151617 server &#123; listen 8001; server_name static_content; root /usr/share/nginx/html; location / &#123; root /data/nginx_www; &#125; location /nginx_images/ &#123; root /data; &#125; location /nginx_proxied/ &#123; proxy_pass http://localhost:8002; &#125;&#125; 即对uri前缀为/nginx_proxied/的请求做代理，被代理地址为http://localhost:8002 配置被代理服务cd /etc/nginx/conf.d并创建配置文件proxied_server.conf： 1234567891011server &#123; listen 8002; root /data/nginx_proxied; location / &#123; &#125; location /nginx_proxied/ &#123; root /data; &#125;&#125; 重新加载nginx配置文件nginx -s reload 访问http:ip:8001/nginx_proxied/ 参考文章 how-to-install-nginx-on-centos-7 Pre-canned Configurations Nginx Beginners’ Guide]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github搭建自己的博客（三）]]></title>
    <url>%2F2018%2F02%2F24%2FHexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[本地搭建好hexo系统后，我们可以将其部署到GitHub上，使用Github Pages访问我们的博客。 部署到GitHub 创建repository在GitHub中New一个repository，注意仓库的名称需要跟我们的GitHub用户名一致（GitHub Pages要求） 为仓库增加deploy key，否则发布过程会出现发布失败 生成本地ssh key，方法 拷贝.ssh/id_rsa.pub文件内的所有内容，进入repository，点击settings，点击Deploy keys，将拷贝的内容Add deploy key 修改站点配置文件1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master repo也可以配置为https的形式，但是我在发布过程中总是提示我版本不对，因此改用ssh发布 安装发布插件 1npm install hexo-deployer-git --save 发布 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 测试访问https://yourname.github.io/ 定制域名如果我们想自己申请域名作为自己的博客地址，可以使用GitHub Pages的Custom domain功能。 申请域名我是在腾讯云上申请的，然后需要配置我们域名的解析注意记录类型选择CNAME，记录值填写仓库名称即可，表明是域名绑定域名 配置GitHub Pages进入repository的Settings，找到GitHub Pages，并配置custom domain点击Save后，在Code中会增加CNAME文件，内容即为我们的自定义域名。 hexo中增加CNAME文件由于每次Deploy后CNAME文件都会被删掉，因此需要在站点目录下的source中新增CNAME文件，内容为自定义域名 测试访问自定义域名]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github搭建自己的博客（二）]]></title>
    <url>%2F2018%2F02%2F23%2FHexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Hexo支持各种主题风格，默认使用Landscape主题，本章我们介绍如何使用Next主题美化我们的博客 在Hexo中有两份主要的配置文件，其名称都是_config.yml。 其中，一份位于站点根目录下，主要包含Hexo本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件。 更换theme 下载Next主题Hexo官网可以下载各种主题，从中找到Next主题的地址，直接下载zip 配置主题将下载的zip文件解压至Hexo/blog/themes下，重命名为hexo-theme-next。 使用主题打开站点配置文件，修改theme配置 1theme: hexo-theme-next 验证主题Git Bash命令界面下，执行如下命令： 12hexo cleanhexo server -p 4001 浏览器中访问http://localhost:4001出现如下界面则更换主题成功 主题设定Next主题主要通过修改主题配置文件和站点配置文件设定自己的博客。 选择scheme修改主题配置文件，检索Scheme Settings1scheme: Pisces 设置博客language修改站点配置文件，检索language1language: zh-CN 设置博客菜单项修改主题配置文件，检索Menu Settings12345menu: home: / || home categories: /categories/ || th tags: /tags/ || tags archives: /archives/ || archive 菜单内容的设置格式是：item name: link || icon name，我只保留了主页，分类，标签，归档。搜索菜单会通过集成第三方服务实现。需要注意的是，添加categories和tags页面之前，这两个按钮都是无效的，后续会有介绍。 设置侧栏修改主题配置文件，检索position1234567sidebar: position: left display: post offset: 12 b2t: false scrollpercent: false onmobile: false 我配置的居左显示，在文章页面（拥有目录列表）时显示 设置头像将头像放置主题目录下的source/uploads/ （目录若不存在则新建uploads）修改主题配置文件，搜索Sidebar Avatar1avatar: /uploads/pic.jpg 主题配置NexT坚持将复杂的细节隐藏，提供尽量少并且简便的设置，保持最大限度的易用性。 设置RSS 安装hexo-generator-feedGit Bash下： 1npm install hexo-generator-feed --save 修改主题配置文件，检索rss 123456789rss:feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: &apos; &apos; 添加标签页面只有添加了标签页面，侧栏中我们配置的「标签」菜单才能点击并响应 站点目录下（即blog目录），Git Bash中 1hexo new page tags 则会在source/tags中新建index.md 设置页面类型 修改步骤1创建中的index.md 1234title: 标签date: 2018-02-22 22:18:27type: &quot;tags&quot;comments: false 其中comments: false是去掉标签页面的评论服务（如果集成了评论服务） 文章中的头部添加tags 12345title: Hexo+Github搭建自己的博客（二）date: 2018-02-23 18:26:04tags: - Hexo - Next 添加分类页面类似于添加标签页面 站点目录下（即blog目录），Git Bash中 1hexo new page categories 则会在source/categories中新建index.md 设置页面类型 修改步骤1创建中的index.md 1234title: 分类date: 2018-02-22 22:37:03type: &quot;categories&quot;comments: false 其中comments: false是去掉分类页面的评论服务（如果集成了评论服务） 文章中的头部添加categories 123456title: Hexo+Github搭建自己的博客（二）date: 2018-02-23 18:26:04tags: - Hexo - Nextcategories: 工具 设置字体包括：全局字体，标题字体，文章字体，Logo字体和代码字体修改主题配置文件，检索Font Settings1234567891011121314151617181920212223242526272829303132333435font: enable: true # 外链字体库地址，例如 //fonts.googleapis.com (默认值) # 预览：https://fonts.google.com/ host: # 全局字体，应用在 body 元素上 global: external: true family: Lato size: 14 # 标题字体 (h1, h2, h3, h4, h5, h6) headings: external: true family: Roboto Slab # 文章字体 posts: external: true family: Microsoft YaHei size: 14 # Logo 字体 logo: external: true family: Lobster Two size: 24 # 代码字体，应用于 code 以及代码块 codes: external: true family: Monospaced size: 13 这是我的字体配置，更多字体 侧边栏设置社交链接修改主题配置文件，检索social123social: GitHub: https://github.com/yourname || github E-Mail: mailto:youremail || envelope 开启打赏功能修改主题配置文件，检索reward_comment123reward_comment: 多谢支持，共同进步！wechatpay: /uploads/微信打赏.jpgalipay: /uploads/支付宝打赏.jpg 添加友情链接修改主题配置文件，检索links_title12345678links_icon: linklinks_title: 友情链接links_layout: inlinelinks: 酷壳: https://coolshell.cn/ SegmentFault: https://segmentfault.com/ DigitalOcean: https://www.digitalocean.com/community 伯乐在线: http://python.jobbole.com/ 设置「阅读全文」首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面。有三种方法： 在文章中使用 &lt;!-- more --&gt;手动进行截断 在文章的 front-matter 中添加 description，并提供文章摘录 自动形成摘要在出题配置文件中，检索auto_excerpt123auto_excerpt: enable: true length: 150 文章中插入图片且可放大查看 修改主题配置文件，检索post_asset_folder，将其置为true 安装hexo-asset-image插件：npm install hexo-asset-image --save。此后使用命令hexo new &quot;博客名称&quot;则会在source/_post文件夹里面就会出现一个“博客名称.md”的文件和一个“博客名称”的文件夹。 安装fancybox插件，并修改主题配置文件，检索fancybox并将其置为true。 文中插入图片：在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，![你想输入的替代文字](xxxx/图片名.jpg) 第三方服务集成评论系统基于来必力的免费city版本搭建。 首先登录来必力官网，在管理页面获取来必力的City版，获取安装代码，从自己的安装代码中获得data-uid，如图： 修改主题配置文件，检索livere_uid1livere_uid: your_uid 另外还可以基于Gitment搭建评论系统，不过我在搭建过程中初始化评论页面的时候遇到“Error: Validation Failed”，没解决因此放弃了。。 百度统计 注册登录百度统计 添加网站：将自己的博客地址添加到自有网站中，点击左侧栏“代码获取”，获取下图中标识的统计id 修改主题配置文件，检索baidu_analytics1baidu_analytics: your_baidu_id 阅读次数统计（后面有更简单方式） 注册登录LeanCloud，创建应用，点击应用，创建Class，Class名称为Counter，选择无限制 设置中，点击“应用Key”，获取AppId，AppKey 修改主题配置文件，检索leancloud_visitors1234leancloud_visitors: enable: true app_id: your_app_id app_key: your_app_key 搜索服务 安装检索插件，站点根目录下Git Bash执行命令 1npm install hexo-generator-searchdb --save 修改站点配置文件添加如下配置 12345search: path: search.xml field: post format: html limit: 10000 修改主题配置文件，启用本地搜索 12local_search: enable: true 其他个性化配置修改文章底部带#的标签修改模板/themes/hexo-theme-next/layout/_macro/post.swig，搜索rel=&quot;tag&quot;&gt;#，将 #换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 在每篇文章末尾统一添加“本文结束”标记 /themes/hexo-theme-next/layout/_macro/目录下新建page-end-tag.swig文件，内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 编辑/themes/hexo-theme-next/layout/_macro/post.swig文件，搜索END POST BODY，在其后面添加如下内容： 12345&#123;% if theme.page_end_tag.enabled and not is_index %&#125; &lt;div&gt; &#123;% include &apos;page-end-tag.swig&apos; %&#125; &lt;/div&gt;&#123;% endif %&#125; 编辑主题配置文件，添加内容： 12page_end_tag: enabled: true 网站底部添加访问量和博客阅读次数统计编辑主题配置文件，检索busuanzi_count12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 在文章底部增加版权信息方法一修改主题配置文件，检索post_copyright123post_copyright: enable: true license: &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 4.0&lt;/a&gt; 方法二——自定义 /themes/hexo-theme-next/layout/_macro/目录下新建my-copyright.swig文件，内容： 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class=&quot;my_post_copyright&quot;&gt; &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class=&quot;copy-path&quot; title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot; aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard(&apos;.fa-clipboard&apos;); $(&quot;.fa-clipboard&quot;).click(function()&#123; clipboard.on(&apos;success&apos;, function()&#123; swal(&#123; title: &quot;&quot;, text: &apos;复制成功&apos;, icon: &quot;success&quot;, showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125; 在目录/themes/hexo-theme-next/source/css/_common/components/post/下添加my-post-copyright.styl，内容为： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 编辑/themes/hexo-theme-next/layout/_macro/post.swig文件，搜索END POST BODY，在其后面（如果已经添加了文章结束标志则在其后）添加如下内容： 12345&#123;% if not is_index %&#125; &lt;div&gt; &#123;% include &apos;my-copyright.swig&apos; %&#125; &lt;/div&gt;&#123;% endif %&#125; 编辑/themes/hexo-theme-next/source/css/_common/components/post/post.styl文件，在最后一行添加代码： 1@import &quot;my-post-copyright&quot; 修改站点配置文件 1url: http://wfwblog.cn 在文章头部添加copyright 1234567title: Hexo+Github搭建自己的博客（二）date: 2018-02-23 18:26:04tags: - Hexo - Nextcategories: 工具copyright: true 参考文章Next主题使用介绍Next主题个性化配置教程hexo生成博文插入图片]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github搭建自己的博客（一）]]></title>
    <url>%2F2018%2F02%2F23%2FHexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[在查阅资料时，我发现有些人的博客风格简洁而清晰，很喜欢，因此学习基于Hexo+GitHub搭建了一套自己的博客系统，记录如下 环境准备主要完成以下工作： 安装Git 安装node.js 安装Hexo 安装Git 下载Git我使用的v1.9.5，网上说高版本会有问题，未验证 安装注意在步骤2中，选择配置Git环境变量的选项，即：Use Git from the Windows Command Prompt 验证在cmd下，执行命令git --version 安装node.js 下载node.js我使用的v6.3.1 安装 验证在cmd下，执行命令node -v 安装Hexo使用npm命令安装 新建Hexo文件夹，进入Hexo，任意位置点击鼠标右键，选择Git Bash（已经安装Git），步骤2和步骤3命令均在Git bash中执行 使用淘宝npm镜像：npm install -g cnpm --registry=https://registry.npm.taobao.org（需要等待一段时间） 安装hexo：cnpm install -g hexo-cli 验证：cmd下，执行命令hexo -v 运行HexoGit Bash命令界面中，执行命令1234hexo init blogcd blogcnpm installhexo server -p 4001 注意：hexo默认使用4000端口，但是如果4000端口被占用，则会一直没有响应，因此在启动的时候我指定hexo使用4001端口 浏览器中输入http://localhost:4001看到如下页面表明你已经成功了]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
