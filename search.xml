<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Jenkins+Github持续集成]]></title>
    <url>%2F2018%2F02%2F28%2FJenkins-Github%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%2F</url>
    <content type="text"><![CDATA[Jenkins安装 安装java环境yum install java 下载Jenkins：wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war并修改权限chmod +x jenkins.war 编写启动脚本jenkins_start.sh 12345678910111213#!/bin/bashNAME=&quot;jenkins.war&quot;echo $NAMEID=`ps -ef | grep &quot;$NAME&quot; | grep -v &quot;grep&quot; | awk &apos;&#123;print $2&#125;&apos;`echo $IDecho &quot;---------------&quot;for id in $IDdokill -9 $idecho &quot;killed $id&quot;doneecho &quot;---------------&quot;nohup java -jar jenkins.war --httpPort=8008 &amp; 添加启动权限：chmod +x jenkins_start.sh 开启8008端口 12firewall-cmd --zone=public --add-port=8008/tcp --permanentfirewall-cmd --reload 设置成开机启动 修改/etc/rc.d/rc.local文件，添加启动脚本的目录 chmod +x /etc/rc.d/rc.local 集成GitHub安装GitHub插件系统管理-&gt;管理插件-&gt;可选插件，过滤条件“github plugin”，选中“github plugin”，直接安装。可能已经安装过了 配置GitHub插件系统管理-&gt;系统设置-&gt;GitHub-&gt;Add GitHub Server Github中生成access tokenSettings &gt;&gt; Developer settings &gt;&gt; Personal access tokens需要勾选的scopes：repo和admin:repo_hook 添加Credentialskind选择Secret text，并填写Secret 使用Test connection测试 创建一个自由风格任务 创建新任务，选择自由风格的任务 选择GitHub project，填写Project url 源码管理，选择Git，Add Credentials（使用GitHub的用户名和密码），选择githubweb源码浏览器，并填写项目url 构建触发器勾选GitHub hook trigger for GITScm polling 使用shell将blog自动发布到指定目录构建 &gt;&gt; 增加构建步骤 &gt;&gt; Execute shell123456echo $JENKINS_HOMEcd $JENKINS_HOMEcd workspacelscp -rf hexo-blog /data/nginx_githubecho &quot;deploy success!&quot; 配置GitHub仓库的Webhooks进入要监控的仓库，Settings &gt;&gt; Webhooks，Add webhook 完成以上步骤之后，如果对被监控的仓库有push操作，则会触发Jenkins从git上拉取代码并进行build。 参考文章 Github Plugin Jenkins+Github持续集成 Jenkins+GIT+Maven+Shell 实现项目一键发布 jenkins gulp 持续集成环境搭建 「Jenkins+Git+Maven+Shell+Tomcat持续集成」经典教程]]></content>
      <categories>
        <category>CI</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx安装与配置]]></title>
    <url>%2F2018%2F02%2F26%2FNginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Nginx是一个Http服务器，与传统的服务器不同，Nginx不依赖多线程处理请求，它采用高扩展性的事件驱动型的架构，性能好，稳定，配置简单且资源消耗小。本文介绍nginx的安装与配置。 安装安装环境：CentOS7 安装Nginx仓库 1sudo yum install epel-release 安装Nginx 1sudo yum install nginx 启动Nginx 12systemctl start nginxsystemctl status nginx 注意nginx默认使用80端口启动，如果启动失败，可以查看80端口是否被占用，如果占用，则杀死进程 123netstat -lnp | grep 80ps pidkill pid 其中pid为进程id 如果有防火墙，需要运行如下命令运行http和https访问 123sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload 验证 1http://server_domain_name_or_IP/ 配置成开机启动 1sudo systemctl enable nginx 重新加载配置 1nginx -s reload Nginx介绍Nginx有一个主进程（master process）和很多工作进程（worker processes）。主进程用来读取配置并维护工作进程，工作进程处理请求。 Nginx配置介绍配置文件的结构及指令介绍Nginx有各种模块组成，而模块则由配置文件中的各种指令（directives）控制。Directives又分为simple directives和block directives。simple directive结构如下：1name parameter; block directive结构与simple directive类似，不过不是以;结尾，而是以{}结尾，例如：123location /documents/ &#123; [ configuration C ]&#125; 如果{}中有其他directives，我们称之为context。#后面为注释 location——根据request URI设置配置 1234语法: location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;location @name &#123; ... &#125;默认值: —Context: server, location ~*（大小写不敏感 ）或~（大小写敏感）——正则匹配 ^~或无修饰——前缀匹配 =——精确匹配匹配过程：首先进行精确匹配，匹配到此停止；然后使用uri进行前缀匹配，匹配出最长的的location，并记录，假设为location_prefix_longest，如果前缀匹配用^~修饰，则匹配到此停止；再然后进行正则匹配检查，假设匹配到的第一个location为location_reg_first，则使用location_reg_first中的配置，如果没有匹配到，则使用location_prefix_longest中的配置。举例说明： 123456789101112131415location = / &#123; [ configuration A ]&#125;location / &#123; [ configuration B ]&#125;location /documents/ &#123; [ configuration C ]&#125;location ^~ /images/ &#123; [ configuration D ]&#125;location ~* \.(gif|jpg|jpeg)$ &#123; [ configuration E ]&#125; /请求匹配configuration A，/index.html匹配configuration B，在/documents/document.html匹配configuration C，/images/1.gif匹配configuration D，/documents/1.jpg匹配configuration E。@定义了一个命名location，它用于请求重定向。不能嵌套且不能包含嵌套locations。 默认服务器根目录默认服务器根目录为/usr/share/nginx/html，我们在安装nginx步骤进行验证时看到的页面所相关的文件就放置在该目录下，默认服务的配置文件为/etc/nginx/nginx.conf.default Nginx全局配置文件Nginx的全局配置文件为/etc/nginx/nginx.conf，注意它的内容中有一条包含配置include /etc/nginx/conf.d/*.conf;，表明它将/etc/nginx/conf.d目录下所有以.conf结尾的配置文件包含进来，实现配置的扩展。 在/etc/nginx/conf.d/中添加配置 避免使用if指令 if指令是为rewrite模块设计的（location模块中只有rewrite或return），其他应用不推荐使用。例如： 123456if ($request_method = POST ) &#123; return 405;&#125;if ($args ~ post=140)&#123; rewrite ^ http://example.com/ permanent;&#125; 使用try_files判断文件是否存在。 访问静态内容 创建目录/data/nginx_www，并添加index.html文件，创建/data/nginx_image，并添加图片songhuiqiao.jpeg cd /etc/nginx/conf.d并创建配置文件static_content.conf 12345678910111213 server &#123; listen 8001; server_name static_content; root /usr/share/nginx/html; location / &#123; root /data/nginx_www; &#125; location /nginx_images/ &#123; root /data; &#125;&#125; 重新加载nginx配置nginx -s reload 开放8001端口firewall-cmd --zone=public --add-port=8001/tcp --permanent 重启防火墙systemctl restart firewalld 访问http://ip:8001/和http://ip:8001/nginx_images/songhuiqiao.jpeg，则分别访问的是/data/nginx_www/index.html静态文件和/data/nginx_images/songhuiqiao.jpeg静态文件 配置为代理服务器 Nginx收到请求后，将请求转发给被代理的服务器，获取到响应之后返给客户端。 创建目录/data/nginx_proxied，并添加index.html文件 cd /etc/nginx/conf.d并修改配置文件static_content.conf为 1234567891011121314151617 server &#123; listen 8001; server_name static_content; root /usr/share/nginx/html; location / &#123; root /data/nginx_www; &#125; location /nginx_images/ &#123; root /data; &#125; location /nginx_proxied/ &#123; proxy_pass http://localhost:8002; &#125;&#125; 即对uri前缀为/nginx_proxied/的请求做代理，被代理地址为http://localhost:8002 配置被代理服务cd /etc/nginx/conf.d并创建配置文件proxied_server.conf： 1234567891011server &#123; listen 8002; root /data/nginx_proxied; location / &#123; &#125; location /nginx_proxied/ &#123; root /data; &#125;&#125; 重新加载nginx配置文件nginx -s reload 访问http:ip:8001/nginx_proxied/ 参考文章 how-to-install-nginx-on-centos-7 Pre-canned Configurations Nginx Beginners’ Guide]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github搭建自己的博客（三）]]></title>
    <url>%2F2018%2F02%2F24%2FHexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[本地搭建好hexo系统后，我们可以将其部署到GitHub上，使用Github Pages访问我们的博客。 部署到GitHub 创建repository在GitHub中New一个repository，注意仓库的名称需要跟我们的GitHub用户名一致（GitHub Pages要求） 为仓库增加deploy key，否则发布过程会出现发布失败 生成本地ssh key，方法 拷贝.ssh/id_rsa.pub文件内的所有内容，进入repository，点击settings，点击Deploy keys，将拷贝的内容Add deploy key 修改站点配置文件1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master repo也可以配置为https的形式，但是我在发布过程中总是提示我版本不对，因此改用ssh发布 安装发布插件 1npm install hexo-deployer-git --save 发布 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 测试访问https://yourname.github.io/ 定制域名如果我们想自己申请域名作为自己的博客地址，可以使用GitHub Pages的Custom domain功能。 申请域名我是在腾讯云上申请的，然后需要配置我们域名的解析注意记录类型选择CNAME，记录值填写仓库名称即可，表明是域名绑定域名 配置GitHub Pages进入repository的Settings，找到GitHub Pages，并配置custom domain点击Save后，在Code中会增加CNAME文件，内容即为我们的自定义域名。 hexo中增加CNAME文件由于每次Deploy后CNAME文件都会被删掉，因此需要在站点目录下的source中新增CNAME文件，内容为自定义域名 测试访问自定义域名]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github搭建自己的博客（二）]]></title>
    <url>%2F2018%2F02%2F23%2FHexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Hexo支持各种主题风格，默认使用Landscape主题，本章我们介绍如何使用Next主题美化我们的博客 在Hexo中有两份主要的配置文件，其名称都是_config.yml。 其中，一份位于站点根目录下，主要包含Hexo本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件。 更换theme 下载Next主题Hexo官网可以下载各种主题，从中找到Next主题的地址，直接下载zip 配置主题将下载的zip文件解压至Hexo/blog/themes下，重命名为hexo-theme-next。 使用主题打开站点配置文件，修改theme配置 1theme: hexo-theme-next 验证主题Git Bash命令界面下，执行如下命令： 12hexo cleanhexo server -p 4001 浏览器中访问http://localhost:4001出现如下界面则更换主题成功 主题设定Next主题主要通过修改主题配置文件和站点配置文件设定自己的博客。 选择scheme修改主题配置文件，检索Scheme Settings1scheme: Pisces 设置博客language修改站点配置文件，检索language1language: zh-CN 设置博客菜单项修改主题配置文件，检索Menu Settings12345menu: home: / || home categories: /categories/ || th tags: /tags/ || tags archives: /archives/ || archive 菜单内容的设置格式是：item name: link || icon name，我只保留了主页，分类，标签，归档。搜索菜单会通过集成第三方服务实现。需要注意的是，添加categories和tags页面之前，这两个按钮都是无效的，后续会有介绍。 设置侧栏修改主题配置文件，检索position1234567sidebar: position: left display: post offset: 12 b2t: false scrollpercent: false onmobile: false 我配置的居左显示，在文章页面（拥有目录列表）时显示 设置头像将头像放置主题目录下的source/uploads/ （目录若不存在则新建uploads）修改主题配置文件，搜索Sidebar Avatar1avatar: /uploads/pic.jpg 主题配置NexT坚持将复杂的细节隐藏，提供尽量少并且简便的设置，保持最大限度的易用性。 设置RSS 安装hexo-generator-feedGit Bash下： 1npm install hexo-generator-feed --save 修改主题配置文件，检索rss 123456789rss:feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: &apos; &apos; 添加标签页面只有添加了标签页面，侧栏中我们配置的「标签」菜单才能点击并响应 站点目录下（即blog目录），Git Bash中 1hexo new page tags 则会在source/tags中新建index.md 设置页面类型 修改步骤1创建中的index.md 1234title: 标签date: 2018-02-22 22:18:27type: &quot;tags&quot;comments: false 其中comments: false是去掉标签页面的评论服务（如果集成了评论服务） 文章中的头部添加tags 12345title: Hexo+Github搭建自己的博客（二）date: 2018-02-23 18:26:04tags: - Hexo - Next 添加分类页面类似于添加标签页面 站点目录下（即blog目录），Git Bash中 1hexo new page categories 则会在source/categories中新建index.md 设置页面类型 修改步骤1创建中的index.md 1234title: 分类date: 2018-02-22 22:37:03type: &quot;categories&quot;comments: false 其中comments: false是去掉分类页面的评论服务（如果集成了评论服务） 文章中的头部添加categories 123456title: Hexo+Github搭建自己的博客（二）date: 2018-02-23 18:26:04tags: - Hexo - Nextcategories: 工具 设置字体包括：全局字体，标题字体，文章字体，Logo字体和代码字体修改主题配置文件，检索Font Settings1234567891011121314151617181920212223242526272829303132333435font: enable: true # 外链字体库地址，例如 //fonts.googleapis.com (默认值) # 预览：https://fonts.google.com/ host: # 全局字体，应用在 body 元素上 global: external: true family: Lato size: 14 # 标题字体 (h1, h2, h3, h4, h5, h6) headings: external: true family: Roboto Slab # 文章字体 posts: external: true family: Microsoft YaHei size: 14 # Logo 字体 logo: external: true family: Lobster Two size: 24 # 代码字体，应用于 code 以及代码块 codes: external: true family: Monospaced size: 13 这是我的字体配置，更多字体 侧边栏设置社交链接修改主题配置文件，检索social123social: GitHub: https://github.com/yourname || github E-Mail: mailto:youremail || envelope 开启打赏功能修改主题配置文件，检索reward_comment123reward_comment: 多谢支持，共同进步！wechatpay: /uploads/微信打赏.jpgalipay: /uploads/支付宝打赏.jpg 添加友情链接修改主题配置文件，检索links_title12345678links_icon: linklinks_title: 友情链接links_layout: inlinelinks: 酷壳: https://coolshell.cn/ SegmentFault: https://segmentfault.com/ DigitalOcean: https://www.digitalocean.com/community 伯乐在线: http://python.jobbole.com/ 设置「阅读全文」首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面。有三种方法： 在文章中使用 &lt;!-- more --&gt;手动进行截断 在文章的 front-matter 中添加 description，并提供文章摘录 自动形成摘要在出题配置文件中，检索auto_excerpt123auto_excerpt: enable: true length: 150 文章中插入图片且可放大查看 修改主题配置文件，检索post_asset_folder，将其置为true 安装hexo-asset-image插件：npm install hexo-asset-image --save。此后使用命令hexo new &quot;博客名称&quot;则会在source/_post文件夹里面就会出现一个“博客名称.md”的文件和一个“博客名称”的文件夹。 安装fancybox插件，并修改主题配置文件，检索fancybox并将其置为true。 文中插入图片：在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，![你想输入的替代文字](xxxx/图片名.jpg) 第三方服务集成评论系统基于来必力的免费city版本搭建。 首先登录来必力官网，在管理页面获取来必力的City版，获取安装代码，从自己的安装代码中获得data-uid，如图： 修改主题配置文件，检索livere_uid1livere_uid: your_uid 另外还可以基于Gitment搭建评论系统，不过我在搭建过程中初始化评论页面的时候遇到“Error: Validation Failed”，没解决因此放弃了。。 百度统计 注册登录百度统计 添加网站：将自己的博客地址添加到自有网站中，点击左侧栏“代码获取”，获取下图中标识的统计id 修改主题配置文件，检索baidu_analytics1baidu_analytics: your_baidu_id 阅读次数统计（后面有更简单方式） 注册登录LeanCloud，创建应用，点击应用，创建Class，Class名称为Counter，选择无限制 设置中，点击“应用Key”，获取AppId，AppKey 修改主题配置文件，检索leancloud_visitors1234leancloud_visitors: enable: true app_id: your_app_id app_key: your_app_key 搜索服务 安装检索插件，站点根目录下Git Bash执行命令 1npm install hexo-generator-searchdb --save 修改站点配置文件添加如下配置 12345search: path: search.xml field: post format: html limit: 10000 修改主题配置文件，启用本地搜索 12local_search: enable: true 其他个性化配置修改文章底部带#的标签修改模板/themes/hexo-theme-next/layout/_macro/post.swig，搜索rel=&quot;tag&quot;&gt;#，将 #换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 在每篇文章末尾统一添加“本文结束”标记 /themes/hexo-theme-next/layout/_macro/目录下新建page-end-tag.swig文件，内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 编辑/themes/hexo-theme-next/layout/_macro/post.swig文件，搜索END POST BODY，在其后面添加如下内容： 12345&#123;% if theme.page_end_tag.enabled and not is_index %&#125; &lt;div&gt; &#123;% include &apos;page-end-tag.swig&apos; %&#125; &lt;/div&gt;&#123;% endif %&#125; 编辑主题配置文件，添加内容： 12page_end_tag: enabled: true 网站底部添加访问量和博客阅读次数统计编辑主题配置文件，检索busuanzi_count12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 在文章底部增加版权信息方法一修改主题配置文件，检索post_copyright123post_copyright: enable: true license: &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 4.0&lt;/a&gt; 方法二——自定义 /themes/hexo-theme-next/layout/_macro/目录下新建my-copyright.swig文件，内容： 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class=&quot;my_post_copyright&quot;&gt; &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class=&quot;copy-path&quot; title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot; aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard(&apos;.fa-clipboard&apos;); $(&quot;.fa-clipboard&quot;).click(function()&#123; clipboard.on(&apos;success&apos;, function()&#123; swal(&#123; title: &quot;&quot;, text: &apos;复制成功&apos;, icon: &quot;success&quot;, showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125; 在目录/themes/hexo-theme-next/source/css/_common/components/post/下添加my-post-copyright.styl，内容为： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 编辑/themes/hexo-theme-next/layout/_macro/post.swig文件，搜索END POST BODY，在其后面（如果已经添加了文章结束标志则在其后）添加如下内容： 12345&#123;% if not is_index %&#125; &lt;div&gt; &#123;% include &apos;my-copyright.swig&apos; %&#125; &lt;/div&gt;&#123;% endif %&#125; 编辑/themes/hexo-theme-next/source/css/_common/components/post/post.styl文件，在最后一行添加代码： 1@import &quot;my-post-copyright&quot; 修改站点配置文件 1url: http://wfwblog.cn 在文章头部添加copyright 1234567title: Hexo+Github搭建自己的博客（二）date: 2018-02-23 18:26:04tags: - Hexo - Nextcategories: 工具copyright: true 参考文章Next主题使用介绍Next主题个性化配置教程hexo生成博文插入图片]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github搭建自己的博客（一）]]></title>
    <url>%2F2018%2F02%2F23%2FHexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[在查阅资料时，我发现有些人的博客风格简洁而清晰，很喜欢，因此学习基于Hexo+GitHub搭建了一套自己的博客系统，记录如下 环境准备主要完成以下工作： 安装Git 安装node.js 安装Hexo 安装Git 下载Git我使用的v1.9.5，网上说高版本会有问题，未验证 安装注意在步骤2中，选择配置Git环境变量的选项，即：Use Git from the Windows Command Prompt 验证在cmd下，执行命令git --version 安装node.js 下载node.js我使用的v6.3.1 安装 验证在cmd下，执行命令node -v 安装Hexo使用npm命令安装 新建Hexo文件夹，进入Hexo，任意位置点击鼠标右键，选择Git Bash（已经安装Git），步骤2和步骤3命令均在Git bash中执行 使用淘宝npm镜像：npm install -g cnpm --registry=https://registry.npm.taobao.org（需要等待一段时间） 安装hexo：cnpm install -g hexo-cli 验证：cmd下，执行命令hexo -v 运行HexoGit Bash命令界面中，执行命令1234hexo init blogcd blogcnpm installhexo server -p 4001 注意：hexo默认使用4000端口，但是如果4000端口被占用，则会一直没有响应，因此在启动的时候我指定hexo使用4001端口 浏览器中输入http://localhost:4001看到如下页面表明你已经成功了]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
